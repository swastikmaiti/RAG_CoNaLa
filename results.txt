1. input: Farm.objects.filter(tree__in=TreeQuerySet)
score: 0.7407113992591807
{'intent': 'Getting Unique Foreign Keys in Django?', 'snippet': 'Farm.objects.filter(tree__in=TreeQuerySet)'}
score: 0.604259202467448
{'intent': 'How to get all children of queryset in django?', 'snippet': "Category.objects.filter(animal__name__startswith='A')"}
score: 0.5979930194641302
{'intent': 'How to get all children of queryset in django?', 'snippet': "Animals.objects.filter(name__startswith='A')"}

2. input: python -> time a while loop has been running
score: 0.8861537367742911
{'intent': 'python -> time a while loop has been running', 'snippet': 'time.sleep(1)'}
score: 0.6401777126086143
{'intent': 'Exit while loop in Python', 'snippet': 'sys.exit()'}
score: 0.6401777126086143
{'intent': 'exit while loop in python', 'snippet': 'sys.exit()'}

3. input: ax.legend(handles[::-1], labels[::-1], title='Line', loc='upper left')
score: 0.9006352410454543
{'intent': 'Reverse the order of legend', 'snippet': "ax.legend(handles[::-1], labels[::-1], title='Line', loc='upper left')"}
score: 0.7188311901852373
{'intent': 'Duplicate items in legend in matplotlib?', 'snippet': 'handles, labels = ax.get_legend_handles_labels()'}
score: 0.7188311901852373
{'intent': 'duplicate items in legend in matplotlib?', 'snippet': 'handles, labels = ax.get_legend_handles_labels()'}

4. input: df.groupby('group').transform(pd.rolling_mean, 2, min_periods=2)
score: 0.7094812824728868
{'intent': 'how to group dataframe by a period of time?', 'snippet': "df.groupby([df['Source'], pd.TimeGrouper(freq='Min')])"}
score: 0.7094812824728868
{'intent': 'How to group DataFrame by a period of time?', 'snippet': "df.groupby([df['Source'], pd.TimeGrouper(freq='Min')])"}
score: 0.6909229490564099
{'intent': 'python pandas group by date using datetime data', 'snippet': "df.set_index('Date_Time').groupby(pd.TimeGrouper('D')).mean().dropna()"}

5. input: template.render(index_variables).encode('utf-8')
score: 0.6505994276366711
{'intent': 'Python, Encoding output to UTF-8', 'snippet': "s.encode('utf8')"}
score: 0.6505994276366711
{'intent': 'python, encoding output to utf-8', 'snippet': "s.encode('utf8')"}
score: 0.6372603086953629
{'intent': 'python, encoding output to utf-8', 'snippet': "f.write(s.encode('utf8'))"}

6. input: '.*?\\b(nunca)\\s+(\\S+)\\s+[0-9.]+[\\r\\n]+\\S+\\s+(\\S+)\\s+(VM\\S+)\\s+[0-9.]+'
score: 0.7056921489727634
{'intent': 'How to fix a regex that attemps to catch some word and id?', 'snippet': "'.*?\\\\b(nunca)\\\\s+(\\\\S+)\\\\s+[0-9.]+[\\\\r\\\\n]+\\\\S+\\\\s+(\\\\S+)\\\\s+(VM\\\\S+)\\\\s+[0-9.]+'"}
score: 0.44237409173954667
{'intent': 'Regular expression to find any number in a string', 'snippet': "re.findall('[+-]?\\\\d+', ' 1 sd  2 s 3 sfs 0 -1')"}
score: 0.44237409173954667
{'intent': 'regular expression to find any number in a string', 'snippet': "re.findall('[+-]?\\\\d+', ' 1 sd  2 s 3 sfs 0 -1')"}

7. input: [i.partition('\t')[-1] for i in l if '\t' in i]
score: 0.8679015236338397
{'intent': "split elements of a list `l` by '\\t'", 'snippet': "[i.partition('\\t')[-1] for i in l if '\\t' in i]"}
score: 0.8463595182978594
{'intent': 'Python: split elements of a list', 'snippet': "[i.partition('\\t')[-1] for i in l if '\\t' in i]"}
score: 0.8463595182978594
{'intent': 'python: split elements of a list', 'snippet': "[i.partition('\\t')[-1] for i in l if '\\t' in i]"}

8. input: using scss with flask
score: 0.8440611897388536
{'intent': 'using scss with flask', 'snippet': 'app.run(debug=True)'}
score: 0.8440611897388536
{'intent': 'Using SCSS with Flask', 'snippet': 'app.run(debug=True)'}
score: 0.8357996396456835
{'intent': 'Using SCSS with Flask', 'snippet': 'app.debug = True'}

9. input: how to change folder names in python?
score: 0.8554138965295264
{'intent': 'How to change folder names in python?', 'snippet': "os.rename('Joe Blow', 'Blow, Joe')"}
score: 0.8554138965295264
{'intent': 'How to change folder names in python?', 'snippet': "os.rename('Joe Blow', 'Blow, Joe')"}
score: 0.73779296824246
{'intent': 'how to rename all folders?', 'snippet': "os.rename(dir, dir + '!')"}

10. input: """abcdabcva""".count('ab')
score: 0.8302269001799067
{'intent': 'count number of occurrences of a substring \'ab\' in a string "abcdabcva"', 'snippet': '"""abcdabcva""".count(\'ab\')'}
score: 0.8302269001799067
{'intent': 'count number of occurrences of a substring \'ab\' in a string "abcdabcva"', 'snippet': '"""abcdabcva""".count(\'ab\')'}
score: 0.778530506492284
{'intent': 'Count number of occurrences of a given substring in a string', 'snippet': '"""abcdabcva""".count(\'ab\')'}

11. input: splitting a list into uneven groups?
score: 0.7896903496468073
{'intent': 'Splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]'}
score: 0.7864306034876242
{'intent': 'Splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6]]'}
score: 0.7781585934310353
{'intent': 'splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6], [], []]'}

12. input: get a sum of all values from key `gold` in a list of dictionary `example_list`
score: 0.9541012090113369
{'intent': 'get a sum of all values from key `gold` in a list of dictionary `example_list`', 'snippet': "sum([item['gold'] for item in example_list])"}
score: 0.9235707821749475
{'intent': 'get all the values in key `gold` summed from a list of dictionary `mylist`', 'snippet': "sum(item['gold'] for item in myLIst)"}
score: 0.9235707821749475
{'intent': 'Get all the values in key `gold` summed from a list of dictionary `myLIst`', 'snippet': "sum(item['gold'] for item in myLIst)"}

13. input: dictionary to lowercase in python
score: 0.8321939629411037
{'intent': 'Dictionary to lowercase in Python', 'snippet': "dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())"}
score: 0.8321939629411037
{'intent': 'Dictionary to lowercase in Python', 'snippet': "dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())"}
score: 0.8269118191393907
{'intent': 'Dictionary to lowercase in Python', 'snippet': "{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}"}

14. input: pixmap = QtGui.QPixmap(path)
score: 0.6663489041211952
{'intent': 'Python: How to Resize Raster Image with PyQt', 'snippet': 'pixmap = QtGui.QPixmap(path)'}
score: 0.5708098844951998
{'intent': 'screenshot of a window using python', 'snippet': 'QApplication.desktop()'}
score: 0.5708098844951998
{'intent': 'Screenshot of a window using python', 'snippet': 'QApplication.desktop()'}

15. input: filter a list of lists of tuples
score: 0.707215151339894
{'intent': 'Python: converting list of lists to tuples of tuples', 'snippet': 'tuple_of_tuples = tuple(tuple(x) for x in list_of_lists)'}
score: 0.6916674022150504
{'intent': 'Iterate a list of tuples', 'snippet': 'tuple_list = [(a, some_process(b)) for a, b in tuple_list]'}
score: 0.6858342346315146
{'intent': 'python - iterating over a subset of a list of tuples', 'snippet': '[x for x in l if x[1] == 1]'}

16. input: create a numpy array containing elements of array `a` as pointed to by index in array `b`
score: 0.8449798370991851
{'intent': 'create a NumPy array containing elements of array `A` as pointed to by index in array `B`', 'snippet': 'A[np.arange(A.shape[0])[:, (None)], B]'}
score: 0.8092878195416998
{'intent': 'python numpy 2d array indexing', 'snippet': 'b[a[1, 1]]'}
score: 0.8092878195416998
{'intent': 'Python numpy 2D array indexing', 'snippet': 'b[a[1, 1]]'}

17. input: get multiple parameters with same name from a url in pylons
score: 0.9238815832146394
{'intent': 'get multiple parameters with same name from a url in pylons', 'snippet': "request.params.getall('c')"}
score: 0.9132515885134197
{'intent': 'How to get multiple parameters with same name from a URL in Pylons?', 'snippet': "request.params.getall('c')"}
score: 0.9132515885134197
{'intent': 'how to get multiple parameters with same name from a url in pylons?', 'snippet': "request.params.getall('c')"}

18. input: value = myDict.get('lastName', myDict.get('firstName', myDict.get('userName')))
score: 0.702170708600394
{'intent': 'Python: How to check if keys exists and retrieve value from Dictionary in descending priority', 'snippet': "value = myDict.get('lastName', myDict.get('firstName', myDict.get('userName')))"}
score: 0.6971623399927166
{'intent': 'accessing python dictionary', 'snippet': "result[0]['from_user']"}
score: 0.6504105645378699
{'intent': 'python dictionary get multiple values', 'snippet': '[myDictionary.get(key) for key in keys]'}

19. input: creating html in python
score: 0.8468568330666794
{'intent': 'Creating HTML in python', 'snippet': 'f.write(doc.render())'}
score: 0.7380250128564276
{'intent': 'converting html to text with python', 'snippet': 'soup = BeautifulSoup(html)'}
score: 0.7380250128564276
{'intent': 'Converting html to text with Python', 'snippet': 'soup = BeautifulSoup(html)'}

20. input: dynamically adding functions to a python module
score: 0.7530701325047675
{'intent': 'How can I import a python module function dynamically?', 'snippet': "my_function = getattr(__import__('my_apps.views'), 'my_function')"}
score: 0.7530701325047675
{'intent': 'how can i import a python module function dynamically?', 'snippet': "my_function = getattr(__import__('my_apps.views'), 'my_function')"}
score: 0.7464716568408694
{'intent': 'how can i import a python module function dynamically?', 'snippet': "my_function = __import__('my_apps.views').my_function"}

21. input: splitting a list into uneven groups?
score: 0.7896903496468073
{'intent': 'Splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]'}
score: 0.7864306034876242
{'intent': 'Splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6]]'}
score: 0.7781585934310353
{'intent': 'splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6], [], []]'}

22. input: efficient way to extract text from between tags
score: 0.755534312060332
{'intent': 'Efficient way to extract text from between tags', 'snippet': "re.findall('(?<=>)([^<]+)(?=</a>[^<]*</li)', var, re.S)"}
score: 0.5914724985607824
{'intent': 'get all `a` tags where the text starts with value `some text` using regex', 'snippet': 'doc.xpath("//a[starts-with(text(),\'some text\')]")'}
score: 0.5914724985607824
{'intent': 'Get all `a` tags where the text starts with value `some text` using regex', 'snippet': 'doc.xpath("//a[starts-with(text(),\'some text\')]")'}

23. input: struct.pack('>I', 1)
score: 0.6672170674969367
{'intent': 'python: converting from binary to string', 'snippet': "struct.pack('>I', 1633837924)"}
score: 0.6672170674969367
{'intent': 'Python: Converting from binary to String', 'snippet': "struct.pack('>I', 1633837924)"}
score: 0.6654020536973644
{'intent': 'Python: Converting from binary to String', 'snippet': "struct.pack('<I', 1633837924)"}

24. input: int(float(s))
score: 0.7418112688595648
{'intent': 'taking the floor of a float', 'snippet': 'int(3.1415)'}
score: 0.7418112688595648
{'intent': 'Taking the floor of a float', 'snippet': 'int(3.1415)'}
score: 0.7034909880626523
{'intent': 'Convert a string to integer with decimal in Python', 'snippet': 'int(float(s))'}

25. input: dct[key].append(some_value)
score: 0.7232984465400434
{'intent': 'Python: list() as default value for dictionary', 'snippet': 'dct[key].append(some_value)'}
score: 0.5393014086772481
{'intent': 'Delete a key and value from an OrderedDict', 'snippet': 'del dct[key]'}
score: 0.5347748174472643
{'intent': 'Mapping dictionary value to list', 'snippet': '[dct[k] for k in lst]'}

26. input: driver.set_window_size(1400, 1000)
score: 0.8387047079379736
{'intent': 'set a window size to `1400, 1000` using selenium webdriver', 'snippet': 'driver.set_window_size(1400, 1000)'}
score: 0.8387047079379736
{'intent': 'Set a window size to `1400, 1000` using selenium webdriver', 'snippet': 'driver.set_window_size(1400, 1000)'}
score: 0.7159089981353669
{'intent': 'How to set window size using phantomjs and selenium webdriver in python', 'snippet': 'driver.set_window_size(1400, 1000)'}

27. input: return any(i.isdigit() for i in s)
score: 0.7581652356815209
{'intent': 'check if a string contains a number', 'snippet': 'return any(i.isdigit() for i in s)'}
score: 0.6140120986414047
{'intent': 'parse string `s` to int when string contains a number', 'snippet': "int(''.join(c for c in s if c.isdigit()))"}
score: 0.6140120986414047
{'intent': 'parse string `s` to int when string contains a number', 'snippet': "int(''.join(c for c in s if c.isdigit()))"}

28. input: copy file '/dir/file.ext' to '/new/dir'
score: 0.8372705843872595
{'intent': "copy file '/dir/file.ext' to '/new/dir'", 'snippet': "shutil.copy2('/dir/file.ext', '/new/dir')"}
score: 0.8137650632874911
{'intent': 'copy a file', 'snippet': "shutil.copy2('/dir/file.ext', '/new/dir')"}
score: 0.8017249365585766
{'intent': 'copy file "/dir/file.ext" to "/new/dir/newname.ext"', 'snippet': "shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')"}

29. input: driver.page_source
score: 0.786821829029462
{'intent': 'selenium get the entire `driver` page text', 'snippet': 'driver.page_source'}
score: 0.786821829029462
{'intent': 'Selenium get the entire `driver` page text', 'snippet': 'driver.page_source'}
score: 0.7259061962165432
{'intent': 'Get contents of entire page using Selenium', 'snippet': 'driver.page_source'}

30. input: find the first letter of each element in string `input`
score: 0.7504338195941334
{'intent': 'find the first letter of each element in string `input`', 'snippet': "output = ''.join(item[0].upper() for item in input.split())"}
score: 0.639906220389629
{'intent': 'how do i find the first letter of each word?', 'snippet': "output = ''.join(item[0].upper() for item in input.split())"}
score: 0.639906220389629
{'intent': 'How do I find the first letter of each word?', 'snippet': "output = ''.join(item[0].upper() for item in input.split())"}

31. input: df.unstack(level=1)
score: 0.6973647866143005
{'intent': 'Fill multi-index Pandas DataFrame with interpolation', 'snippet': 'df.unstack(level=1)'}
score: 0.6894625264182036
{'intent': 'Flatten DataFrame with multi-index columns', 'snippet': "piv.unstack().reset_index().drop('level_0', axis=1)"}
score: 0.6894625264182036
{'intent': 'flatten dataframe with multi-index columns', 'snippet': "piv.unstack().reset_index().drop('level_0', axis=1)"}

32. input: proper way in python to raise errors while setting variables
score: 0.7367393158104873
{'intent': 'Proper way in Python to raise errors while setting variables', 'snippet': "raise ValueError('password must be longer than 6 characters')"}
score: 0.6370153698240633
{'intent': 'is it ok to raise a built-in exception, but with a different message, in python?', 'snippet': "raise ValueError('some problem: %s' % value)"}
score: 0.6126261777879047
{'intent': 'How to use "raise" keyword in Python', 'snippet': "raise Exception('My error!')"}

33. input: inspect.getmembers(my_module, inspect.isclass)
score: 0.7946443631825516
{'intent': 'Python -- Check if object is instance of any class from a certain module', 'snippet': 'inspect.getmembers(my_module, inspect.isclass)'}
score: 0.7143505673127694
{'intent': 'how can i get a list of all classes within current module in python?', 'snippet': 'clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)'}
score: 0.7143505673127694
{'intent': 'How can I get a list of all classes within current module in Python?', 'snippet': 'clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)'}

34. input: get current date and time
score: 0.8402566927989314
{'intent': 'get current date and time', 'snippet': 'datetime.datetime.now()'}
score: 0.8137593749117791
{'intent': 'get current time', 'snippet': 'datetime.datetime.now()'}
score: 0.7902234466717676
{'intent': 'get current time', 'snippet': 'str(datetime.now())'}

35. input: reading tab-delimited csv file `filename` with pandas on mac
score: 0.9161149249123473
{'intent': 'reading tab-delimited csv file `filename` with pandas on mac', 'snippet': "pandas.read_csv(filename, sep='\\t', lineterminator='\\r')"}
score: 0.8539418218737547
{'intent': 'Reading tab-delimited file with Pandas - works on Windows, but not on Mac', 'snippet': "pandas.read_csv(filename, sep='\\t', lineterminator='\\r')"}
score: 0.8539418218737547
{'intent': 'reading tab-delimited file with pandas - works on windows, but not on mac', 'snippet': "pandas.read_csv(filename, sep='\\t', lineterminator='\\r')"}

36. input: os.path.commonprefix(['/usr/var', '/usr/var2/log'])
score: 0.8737890322040969
{'intent': "get the common prefix from comparing two absolute paths '/usr/var' and '/usr/var2/log'", 'snippet': "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"}
score: 0.8737890322040969
{'intent': "get the common prefix from comparing two absolute paths '/usr/var' and '/usr/var2/log'", 'snippet': "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"}
score: 0.8147961553166049
{'intent': 'Python: Get relative path from comparing two absolute paths', 'snippet': "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"}

37. input: limit float 3.14159 to two decimal points
score: 0.8690645897958732
{'intent': 'limit float 3.14159 to two decimal points', 'snippet': "('%.2f' % 3.14159)"}
score: 0.8521366785063821
{'intent': 'Limiting floats to two decimal points', 'snippet': "('%.2f' % 3.14159)"}
score: 0.7615579935862551
{'intent': 'Limiting floats to two decimal points', 'snippet': "('%.2f' % 13.9499999)"}

38. input: Book.objects.filter(pk=pk).update(**d)
score: 0.8182680892260128
{'intent': 'update fields in django model `book` with arguments in dictionary `d` where primary key is equal to `pk`', 'snippet': 'Book.objects.filter(pk=pk).update(**d)'}
score: 0.8182680892260128
{'intent': 'update fields in Django model `Book` with arguments in dictionary `d` where primary key is equal to `pk`', 'snippet': 'Book.objects.filter(pk=pk).update(**d)'}
score: 0.7665601454736981
{'intent': 'How do I use a dictionary to update fields in Django models?', 'snippet': 'Book.objects.filter(pk=pk).update(**d)'}

39. input: df['Date'].str.extract('(?P<year>\\d{4})').astype(int)
score: 0.820116837181916
{'intent': 'Pandas: how to change all the values of a column?', 'snippet': "df['Date'].str.extract('(?P<year>\\\\d{4})').astype(int)"}
score: 0.6730068720280602
{'intent': 'Extracting just Month and Year from Pandas Datetime column (Python)', 'snippet': "df['date_column'] = pd.to_datetime(df['date_column'])"}
score: 0.6615533513816991
{'intent': 'python cleaning dates for conversion to year only in pandas', 'snippet': "df['datestart'] = pd.to_datetime(df['datestart'], coerce=True)"}

40. input: dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)
score: 0.8546303502982884
{'intent': 'extract date from a string `monkey 10/01/1980 love banana`', 'snippet': "dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)"}
score: 0.8367409889674893
{'intent': "extract date from a string 'monkey 20/01/1980 love banana'", 'snippet': "dparser.parse('monkey 20/01/1980 love banana', fuzzy=True)"}
score: 0.8367409889674893
{'intent': "extract date from a string 'monkey 20/01/1980 love banana'", 'snippet': "dparser.parse('monkey 20/01/1980 love banana', fuzzy=True)"}

41. input: pandas : merge two columns, every other row
score: 0.7372009705047939
{'intent': 'how do i combine two columns within a dataframe in pandas?', 'snippet': "df['c'] = df['b'].combine_first(df['a'])"}
score: 0.7312942278754142
{'intent': 'Merge all columns in dataframe `df` into one column', 'snippet': "df.apply(' '.join, axis=0)"}
score: 0.7312942278754142
{'intent': 'merge all columns in dataframe `df` into one column', 'snippet': "df.apply(' '.join, axis=0)"}

42. input: return super(MyModel, self).save(*args, **kwargs)
score: 0.6944546430960344
{'intent': 'Concurrency control in Django model', 'snippet': 'super(MyModel, self).save(*args, **kwargs)'}
score: 0.6944546430960344
{'intent': 'concurrency control in django model', 'snippet': 'super(MyModel, self).save(*args, **kwargs)'}
score: 0.6753978342888513
{'intent': 'Django model field default based on another model field', 'snippet': 'super(ModelB, self).save(*args, **kwargs)'}

43. input: get all non-ascii characters in a unicode string `\xa3100 is worth more than \u20ac100`
score: 0.833927972791193
{'intent': 'Get all non-ascii characters in a unicode string `\\xa3100 is worth more than \\u20ac100`', 'snippet': "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))"}
score: 0.7213775735312873
{'intent': 'Detecting non-ascii characters in unicode string', 'snippet': "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))"}
score: 0.7213775735312873
{'intent': 'detecting non-ascii characters in unicode string', 'snippet': "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))"}

44. input: how can i start a python thread from c++?
score: 0.9043570915502075
{'intent': 'How can I start a Python thread FROM C++?', 'snippet': "system('python myscript.py')"}
score: 0.9043570915502075
{'intent': 'How can I start a Python thread FROM C++?', 'snippet': "system('python myscript.py')"}
score: 0.7105706433872632
{'intent': 'spawning a thread in python', 'snippet': 't.start()'}

45. input: switch between two frames in tkinter
score: 0.5893181669035767
{'intent': 'change tkinter frame title', 'snippet': 'root.mainloop()'}
score: 0.5651567885839296
{'intent': 'How to create a timer using tkinter?', 'snippet': 'root.mainloop()'}
score: 0.5651567885839296
{'intent': 'how to create a timer using tkinter?', 'snippet': 'root.mainloop()'}

46. input: convert list into string with spaces in python
score: 0.9099607184391966
{'intent': 'convert list into string with spaces in python', 'snippet': '""" """.join(my_list)'}
score: 0.9099607184391966
{'intent': 'convert list into string with spaces in python', 'snippet': '""" """.join(my_list)'}
score: 0.9099607184391966
{'intent': 'convert list into string with spaces in python', 'snippet': '""" """.join(my_list)'}

47. input: datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')
score: 0.8487315151223565
{'intent': "Represent DateTime object '10/05/2012' with format '%d/%m/%Y' into format '%Y-%m-%d'", 'snippet': "datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')"}
score: 0.8487315151223565
{'intent': "represent datetime object '10/05/2012' with format '%d/%m/%y' into format '%y-%m-%d'", 'snippet': "datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')"}
score: 0.8451118773046311
{'intent': 'none', 'snippet': "datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')"}

48. input: finding key from value in python dictionary:
score: 0.8441534294689784
{'intent': 'Finding key from value in Python dictionary:', 'snippet': '[k for k, v in d.items() if v == desired_value]'}
score: 0.8441534294689784
{'intent': 'Finding key from value in Python dictionary:', 'snippet': '[k for k, v in d.items() if v == desired_value]'}
score: 0.8342069921667702
{'intent': 'Finding key from value in Python dictionary:', 'snippet': 'return [v for k, v in self.items() if v == value]'}

49. input: convert average of python list values to another list
score: 0.8473403030649173
{'intent': 'convert average of python list values to another list', 'snippet': '[([k] + [(sum(x) / float(len(x))) for x in zip(*v)]) for k, v in list(d.items())]'}
score: 0.8473403030649173
{'intent': 'Convert Average of Python List Values to Another List', 'snippet': '[([k] + [(sum(x) / float(len(x))) for x in zip(*v)]) for k, v in list(d.items())]'}
score: 0.8418672576909041
{'intent': 'Convert Average of Python List Values to Another List', 'snippet': "{'Mike': [[1, 4], [5, 7]], 'Joe': [[5, 7], [6, 9], [7, 4]]}"}

50. input: how to write a python package/module?
score: 0.7028675160833024
{'intent': 'python import a module from a directory(package) one level up', 'snippet': "sys.path.append('../..')"}
score: 0.7028675160833024
{'intent': 'python import a module from a directory(package) one level up', 'snippet': "sys.path.append('../..')"}
score: 0.691874669941992
{'intent': 'how to reference to the top-level module in python inside a package?', 'snippet': '__init__.py'}

51. input: cnx.commit()
score: 0.6759026263638432
{'intent': 'pyodbc insert into sql', 'snippet': 'cnxn.commit()'}
score: 0.6759026263638432
{'intent': 'pyodbc insert into sql', 'snippet': 'cnxn.commit()'}
score: 0.6117713048921999
{'intent': 'Mysql commit current transaction', 'snippet': 'con.commit()'}

52. input: array([[0, 1, 0, 1, 0, 1, 0], [2, 3, 2, 3, 2, 3, 2]])
score: 0.7516310664779563
{'intent': 'Numpy - add row to array', 'snippet': 'array([[0, 1, 2], [0, 2, 0], [0, 1, 2], [1, 2, 0], [2, 1, 2]])'}
score: 0.7516310664779563
{'intent': 'numpy - add row to array', 'snippet': 'array([[0, 1, 2], [0, 2, 0], [0, 1, 2], [1, 2, 0], [2, 1, 2]])'}
score: 0.7010314009543827
{'intent': 'numpy: get 1d array as 2d array without reshape', 'snippet': 'array([[0, 0, 1, 2, 3, 4, 0, 1, 2, 3], [1, 5, 6, 7, 8, 9, 4, 5, 6, 7]])'}

53. input: check whether a file "/etc/password.txt" exists
score: 0.8644808143874334
{'intent': 'check whether a file "/etc/password.txt" exists', 'snippet': "print(os.path.isfile('/etc/password.txt'))"}
score: 0.830621105831024
{'intent': 'check whether a file exists', 'snippet': "print(os.path.exists('/etc/password.txt'))"}
score: 0.8261319966070648
{'intent': 'check whether a file exists', 'snippet': "print(os.path.isfile('/etc/password.txt'))"}

54. input: ax.plot(x_normalised, y, 'bo')
score: 0.7683579583407926
{'intent': 'How to assign equal scaling on the x-axis in Matplotlib?', 'snippet': "ax.plot(x_normalised, y, 'bo')"}
score: 0.6618615067768485
{'intent': 'Python/Matplotlib - Is there a way to make a discontinuous axis?', 'snippet': "ax.plot(x, y, 'bo')"}
score: 0.6618615067768485
{'intent': 'python/matplotlib - is there a way to make a discontinuous axis?', 'snippet': "ax.plot(x, y, 'bo')"}

55. input: [ind for ind, sub in enumerate(totalist) if sub[:2] == ['A', 'B']]
score: 0.9098326272146757
{'intent': 'Categorize list in Python', 'snippet': "[ind for ind, sub in enumerate(totalist) if sub[:2] == ['A', 'B']]"}
score: 0.767125649038469
{'intent': 'categorize list in python', 'snippet': "list([x for x in totalist if x[:2] == ['A', 'B']])"}
score: 0.767125649038469
{'intent': 'Categorize list in Python', 'snippet': "list([x for x in totalist if x[:2] == ['A', 'B']])"}

56. input: how to break time.sleep() in a python concurrent.futures
score: 0.9729643907926162
{'intent': 'How to break time.sleep() in a python concurrent.futures', 'snippet': 'time.sleep(5)'}
score: 0.8153332813000669
{'intent': 'How to detect exceptions in concurrent.futures in Python3?', 'snippet': 'time.sleep(1)'}
score: 0.8153332813000669
{'intent': 'how to detect exceptions in concurrent.futures in python3?', 'snippet': 'time.sleep(1)'}

57. input: sorting a list of dictionary values by date in python
score: 0.8709325521201989
{'intent': 'sorting a list of dictionary values by date in python', 'snippet': "your_list.sort(key=itemgetter('date'), reverse=True)"}
score: 0.8610963803176604
{'intent': 'sorting a list of dictionary values by date in python', 'snippet': "list.sort(key=lambda item: item['date'], reverse=True)"}
score: 0.8610963803176604
{'intent': 'sorting a list of dictionary values by date in python', 'snippet': "list.sort(key=lambda item: item['date'], reverse=True)"}

58. input: python library to generate regular expressions
score: 0.799214191381121
{'intent': 'Python library to generate regular expressions', 'snippet': '"""(desired)+|(input)+|(strings)+"""'}
score: 0.6234379120923863
{'intent': 'python: defining a union of regular expressions', 'snippet': "[': error:', 'cc1plus:']"}
score: 0.6059130745300046
{'intent': 'python regular expression match', 'snippet': 'print(m.group(1))'}

59. input: the best way to filter a dictionary in python
score: 0.8306596856625127
{'intent': 'The best way to filter a dictionary in Python', 'snippet': 'd = {k: v for k, v in list(d.items()) if v > 0}'}
score: 0.8306596856625127
{'intent': 'The best way to filter a dictionary in Python', 'snippet': 'd = {k: v for k, v in list(d.items()) if v > 0}'}
score: 0.8267968374027919
{'intent': 'The best way to filter a dictionary in Python', 'snippet': 'd = dict((k, v) for k, v in d.items() if v > 0)'}

60. input: how do you change the size of figures drawn with matplotlib?
score: 0.8064532793292856
{'intent': 'change figure size and figure format in matplotlib', 'snippet': 'plt.figure(figsize=(3, 4))'}
score: 0.8064532793292856
{'intent': 'change figure size and figure format in matplotlib', 'snippet': 'plt.figure(figsize=(3, 4))'}
score: 0.8064532793292856
{'intent': 'change figure size and figure format in matplotlib', 'snippet': 'plt.figure(figsize=(3, 4))'}

61. input: how can i remove duplicate words in a string with python?
score: 0.8520314413239335
{'intent': 'How can I remove duplicate words in a string with Python?', 'snippet': "print(' '.join(sorted(set(words), key=words.index)))"}
score: 0.8520314413239335
{'intent': 'How can I remove duplicate words in a string with Python?', 'snippet': "print(' '.join(sorted(set(words), key=words.index)))"}
score: 0.7317700754899849
{'intent': 'Python: Best Way to remove duplicate character from string', 'snippet': '"""""".join(ch for ch, _ in itertools.groupby(foo))'}

62. input: pyplot.show()
score: 0.7480374907678722
{'intent': 'pyplot, main title, subplot', 'snippet': 'plt.show()'}
score: 0.7377550049980474
{'intent': 'How to display the value of the bar on each bar with pyplot.barh()?', 'snippet': 'plt.show()'}
score: 0.7377550049980474
{'intent': 'how to display the value of the bar on each bar with pyplot.barh()?', 'snippet': 'plt.show()'}

63. input: x = x[numpy.logical_not(numpy.isnan(x))]
score: 0.865481571320643
{'intent': 'remove Nan values from array `x`', 'snippet': 'x = x[numpy.logical_not(numpy.isnan(x))]'}
score: 0.8375670851721309
{'intent': 'Removing nan values from an array', 'snippet': 'x = x[numpy.logical_not(numpy.isnan(x))]'}
score: 0.8375670851721309
{'intent': 'removing nan values from an array', 'snippet': 'x = x[numpy.logical_not(numpy.isnan(x))]'}

64. input: sorting list of nested dictionaries in python
score: 0.8698034578293272
{'intent': 'sorting list of nested dictionaries in python', 'snippet': 'sorted(yourdata, reverse=True)'}
score: 0.8698034578293272
{'intent': 'sorting list of nested dictionaries in python', 'snippet': 'sorted(yourdata, reverse=True)'}
score: 0.8698034578293272
{'intent': 'sorting list of nested dictionaries in python', 'snippet': 'sorted(yourdata, reverse=True)'}

65. input: unittest.main()
score: 0.7010602885204449
{'intent': 'creating unit tests for methods with global variables', 'snippet': 'unittest.main()'}
score: 0.7010602885204449
{'intent': 'Creating Unit tests for methods with global variables', 'snippet': 'unittest.main()'}
score: 0.6336297635798089
{'intent': 'How to create unittests for python prompt toolkit?', 'snippet': 'unittest.main()'}

66. input: """""".join(set(foo))
score: 0.754225793758419
{'intent': 'removing duplicate characters from a string variable "foo"', 'snippet': '"""""".join(set(foo))'}
score: 0.7407348760297918
{'intent': 'removing duplicate characters from a string', 'snippet': '"""""".join(set(foo))'}
score: 0.7407348760297918
{'intent': 'Removing duplicate characters from a string', 'snippet': '"""""".join(set(foo))'}

67. input: best way to extract subset of key-value pairs from python dictionary object
score: 0.9049052878918793
{'intent': 'best way to extract subset of key-value pairs from python dictionary object', 'snippet': "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"}
score: 0.9049052878918793
{'intent': 'best way to extract subset of key-value pairs from python dictionary object', 'snippet': "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"}
score: 0.9049052878918793
{'intent': 'best way to extract subset of key-value pairs from python dictionary object', 'snippet': "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"}

68. input: bp = df.boxplot(by='Group')
score: 0.7165982656252629
{'intent': 'how to make a grouped boxplot graph in matplotlib', 'snippet': 'plt.show()'}
score: 0.6471503478742937
{'intent': 'Issue with Pandas boxplot within a subplot', 'snippet': "df.pivot('val', 'day', 'val').boxplot(ax=ax)"}
score: 0.6471503478742937
{'intent': 'issue with pandas boxplot within a subplot', 'snippet': "df.pivot('val', 'day', 'val').boxplot(ax=ax)"}

69. input: rows = soup.findAll('tr')[4::5]
score: 0.8497325153777466
{'intent': 'getting the nth element using beautifulsoup', 'snippet': "rows = soup.findAll('tr')[4::5]"}
score: 0.8497325153777466
{'intent': 'Getting the nth element using BeautifulSoup', 'snippet': "rows = soup.findAll('tr')[4::5]"}
score: 0.8497325153777466
{'intent': 'Getting the nth element using BeautifulSoup', 'snippet': "rows = soup.findAll('tr')[4::5]"}

70. input: iterate a list of tuples
score: 0.7927548954038857
{'intent': 'Iterate a list of tuples', 'snippet': 'tuple_list = [(a, some_process(b)) for a, b in tuple_list]'}
score: 0.7874375608832427
{'intent': 'convert list of tuples to list?', 'snippet': 'list(chain.from_iterable(a))'}
score: 0.7874375608832427
{'intent': 'Convert list of tuples to list?', 'snippet': 'list(chain.from_iterable(a))'}

71. input: [ord(c) for c in s]
score: 0.5516718015029416
{'intent': 'Convert string to ASCII value python', 'snippet': '[ord(c) for c in s]'}
score: 0.5174477830720232
{'intent': 'converting hex string `s` to its integer representations', 'snippet': "[ord(c) for c in s.decode('hex')]"}
score: 0.5174477830720232
{'intent': 'converting hex string `s` to its integer representations', 'snippet': "[ord(c) for c in s.decode('hex')]"}

72. input: sum([True, True, False, False, False, True])
score: 0.7533545292834936
{'intent': 'counting the number of true booleans in a python list `[True, True, False, False, False, True]`', 'snippet': 'sum([True, True, False, False, False, True])'}
score: 0.7336745084265689
{'intent': 'counting the number of true booleans in a python list', 'snippet': 'sum([True, True, False, False, False, True])'}
score: 0.7336745084265689
{'intent': 'Counting the number of True Booleans in a Python List', 'snippet': 'sum([True, True, False, False, False, True])'}

73. input: django model field by variable
score: 0.869115155321141
{'intent': 'Django model field by variable', 'snippet': 'getattr(model, fieldtoget)'}
score: 0.6754601225703163
{'intent': 'Accessing model field attributes in Django', 'snippet': "MyModel._meta.get_field('foo').verbose_name"}
score: 0.6754601225703163
{'intent': 'accessing model field attributes in django', 'snippet': "MyModel._meta.get_field('foo').verbose_name"}

74. input: [i for i, item in enumerate(a) if item in b]
score: 0.6970398238851584
{'intent': 'check if list item contains items from another list', 'snippet': '[i for e in bad for i in my_list if e in i]'}
score: 0.6898291667697773
{'intent': 'Finding the indices of matching elements in list in Python', 'snippet': 'return [i for i, x in enumerate(lst) if x < a or x > b]'}
score: 0.6898291667697773
{'intent': 'finding the indices of matching elements in list in python', 'snippet': 'return [i for i, x in enumerate(lst) if x < a or x > b]'}

75. input: how do i coalesce a sequence of identical characters into just one?
score: 0.661777422807243
{'intent': 'how do i coalesce a sequence of identical characters into just one?', 'snippet': "print(re.sub('-+', '-', astr))"}
score: 0.6455430798040023
{'intent': 'How do I coalesce a sequence of identical characters into just one?', 'snippet': "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))"}
score: 0.6455430798040023
{'intent': 'How do I coalesce a sequence of identical characters into just one?', 'snippet': "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))"}

76. input: dict(map(operator.itemgetter('city', 'country'), li))
score: 0.8941660104981004
{'intent': 'python map array of dictionaries to dictionary?', 'snippet': "dict(map(operator.itemgetter('city', 'country'), li))"}
score: 0.6260185890494385
{'intent': 'get keys correspond to a value in dictionary', 'snippet': 'dict((v, k) for k, v in map.items())'}
score: 0.6260185890494385
{'intent': 'get keys correspond to a value in dictionary', 'snippet': 'dict((v, k) for k, v in map.items())'}

77. input: pyautogui.typewrite('any text you want to type')
score: 0.4437143431257814
{'intent': "writing string 'text to write\\n' to file `f`", 'snippet': "f.write('text to write\\n')"}
score: 0.4437143431257814
{'intent': "writing string 'text to write\\n' to file `f`", 'snippet': "f.write('text to write\\n')"}
score: 0.43697549980785455
{'intent': 'how to change the window title in pyside?', 'snippet': 'self.show()'}

78. input: fastest way to sorting a corpus dictionary into an ordereddict - python
score: 0.7111206884872591
{'intent': 'How to sort dictionaries by keys in Python', 'snippet': 'sorted(d)'}
score: 0.7054138814099089
{'intent': 'How to sort dictionaries by keys in Python', 'snippet': 'sorted(o.items())'}
score: 0.7006533434062345
{'intent': 'How to sort dictionaries by keys in Python', 'snippet': 'sorted(d.items())'}

79. input: a sequence of empty lists of length n in python?
score: 0.8943905806245983
{'intent': 'A sequence of empty lists of length n in Python?', 'snippet': '[[] for _ in range(n)]'}
score: 0.8943905806245983
{'intent': 'A sequence of empty lists of length n in Python?', 'snippet': '[[] for _ in range(n)]'}
score: 0.8406301203920272
{'intent': 'a sequence of empty lists of length `n`', 'snippet': '[[] for _ in range(n)]'}

80. input: finding the most frequent character in a string
score: 0.8094591084664594
{'intent': 'Finding the most frequent character in a string', 'snippet': 'print(collections.Counter(s).most_common(1)[0])'}
score: 0.8094591084664594
{'intent': 'Finding the most frequent character in a string', 'snippet': 'print(collections.Counter(s).most_common(1)[0])'}
score: 0.7070587781405246
{'intent': 'print letter that appears most frequently in string `s`', 'snippet': 'print(collections.Counter(s).most_common(1)[0])'}

81. input: workbook.close()
score: 0.6683612687628786
{'intent': 'How to concatenate string cell contents', 'snippet': 'workbook.close()'}
score: 0.6373716961694633
{'intent': 'Python convert csv to xlsx', 'snippet': 'workbook.close()'}
score: 0.6373716961694633
{'intent': 'python convert csv to xlsx', 'snippet': 'workbook.close()'}

82. input: replace nan values in array `a` with zeros
score: 0.7732106855708223
{'intent': 'replace NaN values in array `a` with zeros', 'snippet': 'b = np.where(np.isnan(a), 0, a)'}
score: 0.7467923085989385
{'intent': "How can I replace all the NaN values with Zero's in a column of a pandas dataframe", 'snippet': 'df.fillna(0)'}
score: 0.7467923085989385
{'intent': "How can I replace all the NaN values with Zero's in a column of a pandas dataframe", 'snippet': 'df.fillna(0)'}

83. input: [dict(zip(k, x)) for x in v]
score: 0.9045526618432602
{'intent': 'zip keys with individual values in lists `k` and `v`', 'snippet': '[dict(zip(k, x)) for x in v]'}
score: 0.8474065111338078
{'intent': 'How do I zip keys with individual values in my lists in python?', 'snippet': '[dict(zip(k, x)) for x in v]'}
score: 0.8474065111338078
{'intent': 'How do I zip keys with individual values in my lists in python?', 'snippet': '[dict(zip(k, x)) for x in v]'}

84. input: conn.request('GET', '/oauth/access_token', params)
score: 0.6932410126516488
{'intent': "request uri '<my_uri>' and pass authorization token 'tok:<my_token>' to the header", 'snippet': "r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'})"}
score: 0.6932410126516488
{'intent': "request URI '<MY_URI>' and pass authorization token 'TOK:<MY_TOKEN>' to the header", 'snippet': "r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'})"}
score: 0.6924520550087775
{'intent': '"Missing redirect_uri parameter" response from Facebook with Python/Django', 'snippet': "conn.request('GET', '/oauth/access_token', params)"}

85. input: how do i draw a grid onto a plot in python?
score: 0.9073808688037142
{'intent': 'how do i draw a grid onto a plot in python?', 'snippet': 'plt.grid(True)'}
score: 0.9073808688037142
{'intent': 'How do I draw a grid onto a plot in Python?', 'snippet': 'plt.grid(True)'}
score: 0.9073808688037142
{'intent': 'How do I draw a grid onto a plot in Python?', 'snippet': 'plt.grid(True)'}

86. input: e = root.xpath('.//a[text()="TEXT A"]')
score: 0.9037009199548287
{'intent': "find the element that holds string 'text a' in file `root`", 'snippet': 'e = root.xpath(\'.//a[text()="TEXT A"]\')'}
score: 0.9037009199548287
{'intent': "find the element that holds string 'TEXT A' in file `root`", 'snippet': 'e = root.xpath(\'.//a[text()="TEXT A"]\')'}
score: 0.8766692675976877
{'intent': 'Find the`a` tag in html `root` which starts with the text `TEXT A`  and assign it to `e`', 'snippet': 'e = root.xpath(\'.//a[starts-with(text(),"TEXT A")]\')'}

87. input: ['a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd']
score: 0.680196474140448
{'intent': 'separating a string', 'snippet': "['abcd', 'a,bcd', 'a,b,cd', 'a,b,c,d', 'a,bc,d', 'ab,cd', 'ab,c,d', 'abc,d']"}
score: 0.680196474140448
{'intent': 'Separating a String', 'snippet': "['abcd', 'a,bcd', 'a,b,cd', 'a,b,c,d', 'a,bc,d', 'ab,cd', 'ab,c,d', 'abc,d']"}
score: 0.6216363451788176
{'intent': 'Substrings of a string using Python', 'snippet': "['a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd']"}

88. input: plotting with groupby in pandas/python
score: 0.7218651472697447
{'intent': 'Plotting categorical data with pandas and matplotlib', 'snippet': "df.groupby('colour').size().plot(kind='bar')"}
score: 0.7218651472697447
{'intent': 'Plotting categorical data with pandas and matplotlib', 'snippet': "df.groupby('colour').size().plot(kind='bar')"}
score: 0.7218651472697447
{'intent': 'plotting categorical data with pandas and matplotlib', 'snippet': "df.groupby('colour').size().plot(kind='bar')"}

89. input: delete 1st, 2nd and 4th columns from dataframe `df`
score: 0.8276459735316612
{'intent': 'delete 1st, 2nd and 4th columns from dataframe `df`', 'snippet': 'df.drop(df.columns[[0, 1, 3]], axis=1)'}
score: 0.6816941663103266
{'intent': 'Delete column from pandas DataFrame', 'snippet': 'df.drop(df.columns[[0, 1, 3]], axis=1)'}
score: 0.6816941663103266
{'intent': 'Delete column from pandas DataFrame', 'snippet': 'df.drop(df.columns[[0, 1, 3]], axis=1)'}

90. input: the best way to filter a dictionary in python
score: 0.8306596856625127
{'intent': 'The best way to filter a dictionary in Python', 'snippet': 'd = {k: v for k, v in list(d.items()) if v > 0}'}
score: 0.8306596856625127
{'intent': 'The best way to filter a dictionary in Python', 'snippet': 'd = {k: v for k, v in list(d.items()) if v > 0}'}
score: 0.8267968374027919
{'intent': 'The best way to filter a dictionary in Python', 'snippet': 'd = dict((k, v) for k, v in d.items() if v > 0)'}

91. input: print(re.findall('[0-u]+', my_string))
score: 0.7564614230251019
{'intent': 'How to retrieve only arabic texts from a string using regular expression?', 'snippet': "print(re.findall('[0-u]+', my_string))"}
score: 0.7189383282598336
{'intent': 'How to retrieve only arabic texts from a string using regular expression?', 'snippet': "print(re.findall('[u0600-u06FF]+', my_string))"}
score: 0.7189383282598336
{'intent': 'how to retrieve only arabic texts from a string using regular expression?', 'snippet': "print(re.findall('[u0600-u06FF]+', my_string))"}

92. input: {{(test | getkey): 'this works'}}
score: 0.6267873527723735
{'intent': 'dict keys with spaces in Django templates', 'snippet': "{{(test | getkey): 'this works'}}"}
score: 0.48538573853059297
{'intent': 'how to check if given variable exist in jinja2 template?', 'snippet': '"""{{ x.foo }}"""'}
score: 0.48538573853059297
{'intent': 'How to check if given variable exist in jinja2 template?', 'snippet': '"""{{ x.foo }}"""'}

93. input: zcat = subprocess.Popen(['zcat', path], stdout=subprocess.PIPE)
score: 0.8044989097218179
{'intent': 'Python equivalent of piping zcat result to filehandle in Perl', 'snippet': "zcat = subprocess.Popen(['zcat', path], stdout=subprocess.PIPE)"}
score: 0.7415936849323049
{'intent': 'pass a string into subprocess.Popen', 'snippet': "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"}
score: 0.7407126994923321
{'intent': 'Pipe subprocess standard output to a variable', 'snippet': 'subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)'}

94. input: get pid from paramiko
score: 0.7008212047086242
{'intent': 'get PID from paramiko', 'snippet': "stdin, stdout, stderr = ssh.exec_command('./wrapper.py ./someScript.sh')"}
score: 0.511322915353124
{'intent': 'how to run sudo with paramiko? (python)', 'snippet': "ssh.connect('127.0.0.1', username='jesse', password='lol')"}
score: 0.511322915353124
{'intent': 'How to run sudo with paramiko? (Python)', 'snippet': "ssh.connect('127.0.0.1', username='jesse', password='lol')"}

95. input: [[[x[0]] for x in y] for y in listD]
score: 0.7712427555554288
{'intent': 'Slicing a multidimensional list', 'snippet': '[[[x[0]] for x in y] for y in listD]'}
score: 0.7402806191632645
{'intent': 'fors in python list comprehension', 'snippet': '[y for y in x for x in data]'}
score: 0.7402806191632645
{'intent': 'fors in python list comprehension', 'snippet': '[y for y in x for x in data]'}

96. input: print(re.sub('(\\W)\\1+', '\\1', a))
score: 0.8645520013492367
{'intent': 'coalesce non-word-characters in string `a`', 'snippet': "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))"}
score: 0.8343420187045694
{'intent': 'How do I coalesce a sequence of identical characters into just one?', 'snippet': "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))"}
score: 0.8343420187045694
{'intent': 'How do I coalesce a sequence of identical characters into just one?', 'snippet': "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))"}

97. input: dir()
score: 0.49472088793532104
{'intent': 'list all files of a directory `mypath`', 'snippet': 'for (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)'}
score: 0.4940410817608708
{'intent': 'Get all object attributes', 'snippet': 'dir()'}
score: 0.4940410817608708
{'intent': 'Get all object attributes', 'snippet': 'dir()'}

98. input: how do i determine the size of an object in python?
score: 0.8891237054906155
{'intent': 'How do I determine the size of an object in Python?', 'snippet': "sys.getsizeof('this also')"}
score: 0.7611296596341188
{'intent': 'function to get the size of object', 'snippet': 'len()'}
score: 0.7611296596341188
{'intent': 'function to get the size of object', 'snippet': 'len()'}

99. input: best way to return a value from a python script
score: 0.8723928240675791
{'intent': 'Best way to return a value from a python script', 'snippet': 'return [1, 2, 3]'}
score: 0.8111787137032803
{'intent': 'Best way to return a value from a python script', 'snippet': 'sys.exit(0)'}
score: 0.8111787137032803
{'intent': 'best way to return a value from a python script', 'snippet': 'sys.exit(0)'}

100. input: reverse a string `some_string`
score: 0.8640492986903677
{'intent': 'reverse a string `some_string`', 'snippet': 'some_string[::(-1)]'}
score: 0.8383805291097701
{'intent': 'Reverse a string `a_string`', 'snippet': 'def reversed_string(a_string):\n    return a_string[::(-1)]'}
score: 0.8383805291097701
{'intent': 'reverse a string `a_string`', 'snippet': 'def reversed_string(a_string):\n    return a_string[::(-1)]'}

101. input: sorted(a, key=lambda i: list(i.values())[0], reverse=True)
score: 0.8735458647156034
{'intent': 'sort a list of dictionaries `a` by dictionary values in descending order', 'snippet': 'sorted(a, key=lambda i: list(i.values())[0], reverse=True)'}
score: 0.8649636309406065
{'intent': 'Sort a list of tuples by second value, reverse=True and then by key, reverse=False', 'snippet': 'sorted(d, key=lambda x: (-x[1], x[0]))'}
score: 0.8649636309406065
{'intent': 'sort a list of tuples by second value, reverse=true and then by key, reverse=false', 'snippet': 'sorted(d, key=lambda x: (-x[1], x[0]))'}

102. input: reducefn({'physics': 1}, {'volume': 1, 'chemistry': 1}, {'chemistry': 1})
score: 0.7380765882013249
{'intent': 'How to pass a dictionary as value to a function in python', 'snippet': "reducefn({'physics': 1}, {'volume': 1, 'chemistry': 1}, {'chemistry': 1})"}
score: 0.5325770565627457
{'intent': 'How to pass a dictionary as value to a function in python', 'snippet': "{'physics': 1}, {'volume': 1, 'chemistry': 1}, {'chemistry': 1}"}
score: 0.5325770565627457
{'intent': 'how to pass a dictionary as value to a function in python', 'snippet': "{'physics': 1}, {'volume': 1, 'chemistry': 1}, {'chemistry': 1}"}

103. input: dir()
score: 0.49472088793532104
{'intent': 'list all files of a directory `mypath`', 'snippet': 'for (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)'}
score: 0.4940410817608708
{'intent': 'Get all object attributes', 'snippet': 'dir()'}
score: 0.4940410817608708
{'intent': 'Get all object attributes', 'snippet': 'dir()'}

104. input: subprocess.call(['ls', '-l'])
score: 0.788842378731156
{'intent': 'calling an external command "ls -l"', 'snippet': 'from subprocess import call'}
score: 0.788842378731156
{'intent': 'Calling an external command "ls -l"', 'snippet': 'from subprocess import call'}
score: 0.77455210349224
{'intent': 'Calling an external command', 'snippet': "call(['ls', '-l'])"}

105. input: antisort([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)])
score: 0.6232135141011508
{'intent': 'sorting a list of tuples such that grouping by key is not desired', 'snippet': '[(1, 2), (3, 4), (1, 3), (2, 4), (1, 4), (2, 3)]'}
score: 0.5868731152091107
{'intent': 'finding groups of increasing numbers in a list', 'snippet': '[(1, 2, 3), (1, 2, 3)]'}
score: 0.5567017496491602
{'intent': 'Subtract all items in a list against each other', 'snippet': '[(1, 1), (2, 2), (3, 4), (1, 1), (2, 3), (1, 2)]'}

106. input: int('deadbeef', 16)
score: 0.7474140301684866
{'intent': 'Convert hex string "deadbeef" to integer', 'snippet': "int('deadbeef', 16)"}
score: 0.7474140301684866
{'intent': 'convert hex string "deadbeef" to integer', 'snippet': "int('deadbeef', 16)"}
score: 0.7460990901957245
{'intent': 'Convert hex string to int', 'snippet': "int('deadbeef', 16)"}

107. input: python 3: multiply a vector by a matrix without numpy
score: 0.8662646518191381
{'intent': 'Python 3: Multiply a vector by a matrix without NumPy', 'snippet': 'np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])'}
score: 0.8662646518191381
{'intent': 'Python 3: Multiply a vector by a matrix without NumPy', 'snippet': 'np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])'}
score: 0.8076436732555246
{'intent': 'how to multiply two vector and get a matrix?', 'snippet': 'numpy.outer(numpy.array([1, 2]), numpy.array([3, 4]))'}

108. input: [v for k, v in list(my_dict.items()) if 'Date' in k]
score: 0.8988165794570591
{'intent': 'get values from a dictionary `my_dict` whose key contains the string `date`', 'snippet': "[v for k, v in list(my_dict.items()) if 'Date' in k]"}
score: 0.8988165794570591
{'intent': 'get values from a dictionary `my_dict` whose key contains the string `Date`', 'snippet': "[v for k, v in list(my_dict.items()) if 'Date' in k]"}
score: 0.8471762817706583
{'intent': 'Accessing Python dict values with the key start characters', 'snippet': "[v for k, v in list(my_dict.items()) if 'Date' in k]"}

109. input: my_array, my_variable = my_function()
score: 0.7954298463757423
{'intent': 'python: can a function return an array and a variable?', 'snippet': 'my_array, my_variable = my_function()'}
score: 0.7408783671163663
{'intent': 'python: can a function return an array and a variable?', 'snippet': 'result = my_function()'}
score: 0.7408783671163663
{'intent': 'Python: Can a function return an array and a variable?', 'snippet': 'result = my_function()'}

110. input: print(text.encode('windows-1252'))
score: 0.9055147386126909
{'intent': 'print a unicode string `text`', 'snippet': "print(text.encode('windows-1252'))"}
score: 0.9055147386126909
{'intent': 'print a unicode string `text`', 'snippet': "print(text.encode('windows-1252'))"}
score: 0.8260896207260261
{'intent': 'Convert Unicode to UTF-8 Python', 'snippet': "print(text.encode('windows-1252'))"}

111. input: ex.groupby(level='A').get_group(1)
score: 0.7116564274340408
{'intent': 'Counting unique index values in Pandas groupby', 'snippet': "ex.groupby(level='A').get_group(1)"}
score: 0.6607295913996685
{'intent': 'Counting unique index values in Pandas groupby', 'snippet': "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"}
score: 0.6607295913996685
{'intent': 'counting unique index values in pandas groupby', 'snippet': "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"}

112. input: get index of the top n values of a list in python
score: 0.8875589965189555
{'intent': 'Get index of the top n values of a list in python', 'snippet': 'zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]'}
score: 0.8875589965189555
{'intent': 'Get index of the top n values of a list in python', 'snippet': 'zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]'}
score: 0.8875589965189555
{'intent': 'get index of the top n values of a list in python', 'snippet': 'zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]'}

113. input: finding the minimum value in a numpy array and the corresponding values for the rest of that array's row
score: 0.8818573295668084
{'intent': "Finding the minimum value in a numpy array and the corresponding values for the rest of that array's row", 'snippet': 'np.argmin(a[:, (1)])'}
score: 0.8700111419578095
{'intent': "finding the minimum value in a numpy array and the corresponding values for the rest of that array's row", 'snippet': 'a[np.argmin(a[:, (1)]), 0]'}
score: 0.8700111419578095
{'intent': "Finding the minimum value in a numpy array and the corresponding values for the rest of that array's row", 'snippet': 'a[np.argmin(a[:, (1)]), 0]'}

114. input: df.groupby(['saleid', 'upc']).size().unstack(fill_value=0)
score: 0.8908284109603615
{'intent': 'pandas pivot table of sales', 'snippet': "df.groupby(['saleid', 'upc']).size().unstack(fill_value=0)"}
score: 0.74151478602036
{'intent': 'pandas pivot table of sales', 'snippet': "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"}
score: 0.74151478602036
{'intent': 'pandas pivot table of sales', 'snippet': "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"}

115. input: df.apply(lambda x: pd.factorize(x)[0])
score: 0.7787028523687329
{'intent': 'Vectorizing / Contrasting a Dataframe with Categorical Variables', 'snippet': 'df.apply(lambda x: pd.factorize(x)[0])'}
score: 0.7130740487934649
{'intent': 'Pandas: How can I use the apply() function for a single column?', 'snippet': "df['a'] = df['a'].apply(lambda x: x + 1)"}
score: 0.7130740487934649
{'intent': 'pandas: how can i use the apply() function for a single column?', 'snippet': "df['a'] = df['a'].apply(lambda x: x + 1)"}

116. input: creating a program that prints true if three words are entered in dictionary order
score: 0.8820573616999976
{'intent': 'Creating a program that prints true if three words are entered in dictionary order', 'snippet': 'print(all(lst[i].lower() < lst[i + 1].lower() for i in range(len(lst) - 1)))'}
score: 0.5808890048973507
{'intent': 'Find 3 letter words', 'snippet': 'words = [word for word in string.split() if len(word) == 3]'}
score: 0.5808890048973507
{'intent': 'find 3 letter words', 'snippet': 'words = [word for word in string.split() if len(word) == 3]'}

117. input: string2.replace('', string1)
score: 0.9201734403821443
{'intent': 'Replacing the empty strings in a string', 'snippet': "string2.replace('', string1)"}
score: 0.81470224600934
{'intent': 'Replacing the empty strings in a string', 'snippet': "string2.replace('', string1)[len(string1):-len(string1)]"}
score: 0.81470224600934
{'intent': 'Replacing the empty strings in a string', 'snippet': "string2.replace('', string1)[len(string1):-len(string1)]"}

118. input: """\\xc3\\x85a""".encode('utf-8')
score: 0.9001158597486858
{'intent': 'encode string "\\\\xc3\\\\x85a" to bytes', 'snippet': '"""\\\\xc3\\\\x85a""".encode(\'utf-8\')'}
score: 0.7920319158557183
{'intent': 'convert and escape string "\\\\xc3\\\\x85あ" to UTF-8 code', 'snippet': '"""\\\\xc3\\\\x85あ""".encode(\'utf-8\').decode(\'unicode_escape\')'}
score: 0.7905488400135197
{'intent': "encode `u'X\\xc3\\xbcY\\xc3\\x9f'` as unicode and decode with utf-8", 'snippet': "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')"}

119. input: slicing a list into a list of sub-lists
score: 0.7879194697586801
{'intent': 'Slicing a list into a list of sub-lists', 'snippet': '[input[i:i + n] for i in range(0, len(input), n)]'}
score: 0.7879194697586801
{'intent': 'slicing a list into a list of sub-lists', 'snippet': '[input[i:i + n] for i in range(0, len(input), n)]'}
score: 0.7879194697586801
{'intent': 'Slicing a list into a list of sub-lists', 'snippet': '[input[i:i + n] for i in range(0, len(input), n)]'}

120. input: convert binary data to signed integer
score: 0.7084164628591374
{'intent': 'how to convert signed to unsigned integer in python', 'snippet': 'bin(_)'}
score: 0.7084164628591374
{'intent': 'How to convert signed to unsigned integer in python', 'snippet': 'bin(_)'}
score: 0.7014525901851149
{'intent': 'Convert binary data to signed integer', 'snippet': "struct.unpack('!h', p0 + p1)[0]"}

121. input: normalize columns of pandas data frame
score: 0.8088976559257264
{'intent': 'Normalize columns of pandas data frame', 'snippet': 'df = df / df.max().astype(np.float64)'}
score: 0.8088976559257264
{'intent': 'normalize columns of pandas data frame', 'snippet': 'df = df / df.max().astype(np.float64)'}
score: 0.7654552639307386
{'intent': 'How to normalize by another row in a pandas DataFrame?', 'snippet': 'df.loc[:, (cols)] / df.loc[ii, cols].values'}

122. input: python pandas - grouping by and summarizing on a field
score: 0.8349057725123614
{'intent': 'Python pandas - grouping by and summarizing on a field', 'snippet': "df.pivot(index='order', columns='sample')"}
score: 0.8349057725123614
{'intent': 'Python pandas - grouping by and summarizing on a field', 'snippet': "df.pivot(index='order', columns='sample')"}
score: 0.7025455041676938
{'intent': 'summarizing dataframe into a dictionary', 'snippet': "df.groupby('date')['level'].first().apply(np.ceil).astype(int).to_dict()"}

123. input: args = parser.parse_args()
score: 0.8004053037925651
{'intent': 'how to pass argparse arguments to a class', 'snippet': 'args = parser.parse_args()'}
score: 0.8004053037925651
{'intent': 'how to pass argparse arguments to a class', 'snippet': 'args = parser.parse_args()'}
score: 0.7289786557248379
{'intent': 'disable/remove argument in argparse', 'snippet': "parser.add_argument('--arg1', help=argparse.SUPPRESS)"}

124. input: sorted(list_of_tuples, key=lambda tup: tup[1])
score: 0.939857492128535
{'intent': 'sorting a list of tuples in Python', 'snippet': 'sorted(list_of_tuples, key=lambda tup: tup[1])'}
score: 0.939857492128535
{'intent': 'sorting a list of tuples in Python', 'snippet': 'sorted(list_of_tuples, key=lambda tup: tup[1])'}
score: 0.9339790752896587
{'intent': 'sorting a list of tuples `list_of_tuples` by second key', 'snippet': 'sorted(list_of_tuples, key=lambda tup: tup[1])'}

125. input: line = subprocess.check_output(['tail', '-1', filename])
score: 0.8432110068736034
{'intent': 'Efficiently finding the last line in a text file', 'snippet': "line = subprocess.check_output(['tail', '-1', filename])"}
score: 0.7130669382662679
{'intent': 'get the output of a subprocess command `echo "foo"` in command line', 'snippet': 'subprocess.check_output(\'echo "foo"\', shell=True)'}
score: 0.7130669382662679
{'intent': 'get the output of a subprocess command `echo "foo"` in command line', 'snippet': 'subprocess.check_output(\'echo "foo"\', shell=True)'}

126. input: os.path.isfile('C:\\Users\\xxx\\Desktop\\xxx')
score: 0.817483127185131
{'intent': 'SyntaxError when trying to use backslash for Windows file path', 'snippet': "os.path.isfile('C:\\\\Users\\\\xxx\\\\Desktop\\\\xxx')"}
score: 0.654489933048173
{'intent': 'check whether a file exists', 'snippet': 'os.path.isfile(fname)'}
score: 0.6254952491535506
{'intent': "set the current working directory to 'c:\\\\Users\\\\uname\\\\desktop\\\\python'", 'snippet': "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"}

127. input: pandas: how can i use the apply() function for a single column?
score: 0.8388146158516926
{'intent': 'pandas: how can i use the apply() function for a single column?', 'snippet': "df['a'] = df['a'].apply(lambda x: x + 1)"}
score: 0.8388146158516926
{'intent': 'pandas: how can i use the apply() function for a single column?', 'snippet': "df['a'] = df['a'].apply(lambda x: x + 1)"}
score: 0.8388146158516926
{'intent': 'Pandas: How can I use the apply() function for a single column?', 'snippet': "df['a'] = df['a'].apply(lambda x: x + 1)"}

128. input: line.strip()
score: 0.8257167517351678
{'intent': 'strip a string `line` of all carriage returns and newlines', 'snippet': 'line.strip()'}
score: 0.7783889217180482
{'intent': 'remove (chomp) a newline', 'snippet': 's.strip()'}
score: 0.7456960388537067
{'intent': 'remove newline in string `s`', 'snippet': 's.strip()'}

129. input: random.sample(range(len(mylist)), sample_size)
score: 0.8495307705306459
{'intent': 'Get random sample from list while maintaining ordering of items?', 'snippet': 'random.sample(range(len(mylist)), sample_size)'}
score: 0.7776240300629584
{'intent': 'random list with replacement from python list of lists', 'snippet': '[random.choice(list_of_lists) for _ in range(sample_size)]'}
score: 0.7776240300629584
{'intent': 'Random list with replacement from python list of lists', 'snippet': '[random.choice(list_of_lists) for _ in range(sample_size)]'}

130. input: remove elements in list `b` from list `a`
score: 0.8693183918527958
{'intent': 'remove elements in list `b` from list `a`', 'snippet': '[x for x in a if x not in b]'}
score: 0.8333571585068833
{'intent': 'remove item "b" in list `a`', 'snippet': "a.remove('b')"}
score: 0.8333571585068833
{'intent': 'remove item "b" in list `a`', 'snippet': "a.remove('b')"}

131. input: datetime.datetime.combine(dateobject, datetime.time())
score: 0.908784048103255
{'intent': 'convert Date object `dateobject` into a DateTime object', 'snippet': 'datetime.datetime.combine(dateobject, datetime.time())'}
score: 0.908784048103255
{'intent': 'convert date object `dateobject` into a datetime object', 'snippet': 'datetime.datetime.combine(dateobject, datetime.time())'}
score: 0.782501545559316
{'intent': 'How do I convert a datetime.date object into datetime.datetime in python?', 'snippet': 'datetime.datetime.combine(dateobject, datetime.time())'}

132. input: get a list `slice` of array slices of the first two rows and columns from array `arr`
score: 0.8982199957732678
{'intent': 'get a list `slice` of array slices of the first two rows and columns from array `arr`', 'snippet': 'slice = [arr[i][0:2] for i in range(0, 2)]'}
score: 0.7025395854405047
{'intent': 'how to get a padded slice of a multidimensional array?', 'snippet': 'arr[-2:2]'}
score: 0.7025395854405047
{'intent': 'How to get a padded slice of a multidimensional array?', 'snippet': 'arr[-2:2]'}

133. input: write(s.encode('latin-1'))
score: 0.7822925821868607
{'intent': 'UnicodeEncodeError when writing to a file', 'snippet': "write(s.encode('latin-1'))"}
score: 0.6826725016446655
{'intent': 'python byte string encode and decode', 'snippet': '"""foo""".decode(\'latin-1\')'}
score: 0.6826725016446655
{'intent': 'python byte string encode and decode', 'snippet': '"""foo""".decode(\'latin-1\')'}

134. input: df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)
score: 0.9219989487207907
{'intent': "sort dataframe `df` based on column 'b' in ascending and column 'c' in descending", 'snippet': "df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)"}
score: 0.9219989487207907
{'intent': "sort dataframe `df` based on column 'b' in ascending and column 'c' in descending", 'snippet': "df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)"}
score: 0.8676552837055956
{'intent': 'sort pandas data frame `df` using values from columns `c1` and `c2` in ascending order', 'snippet': "df.sort(['c1', 'c2'], ascending=[True, True])"}

135. input: u = s.decode('utf-8-sig')
score: 0.8279274157844235
{'intent': 'convert utf-8 with bom string `s` to utf-8 with no bom `u`', 'snippet': "u = s.decode('utf-8-sig')"}
score: 0.7869034233274537
{'intent': 'convert utf-8 with bom to utf-8 with no bom in python', 'snippet': "u = s.decode('utf-8-sig')"}
score: 0.7869034233274537
{'intent': 'Convert UTF-8 with BOM to UTF-8 with no BOM in Python', 'snippet': "u = s.decode('utf-8-sig')"}

136. input: fig.savefig('the name of your figure')
score: 0.6686802729379111
{'intent': 'get the list of figures in matplotlib', 'snippet': "plt.savefig('figure%d.png' % i)"}
score: 0.6515537466421495
{'intent': 'Matplotlib/pyplot: How to enforce axis range?', 'snippet': "fig.savefig('the name of your figure')"}
score: 0.6429545809138361
{'intent': 'Save matplotlib file to a directory', 'snippet': "fig.savefig('Sub Directory/graph.png')"}

137. input: os.rename('Joe Blow', 'Blow, Joe')
score: 0.849235572805848
{'intent': 'Rename a folder `Joe Blow` to `Blow, Joe`', 'snippet': "os.rename('Joe Blow', 'Blow, Joe')"}
score: 0.7281245404954257
{'intent': 'How to change folder names in python?', 'snippet': "os.rename('Joe Blow', 'Blow, Joe')"}
score: 0.7281245404954257
{'intent': 'How to change folder names in python?', 'snippet': "os.rename('Joe Blow', 'Blow, Joe')"}

138. input: extract folder path from file path
score: 0.7034171186379025
{'intent': 'extract folder path from file path', 'snippet': 'os.path.dirname(os.path.abspath(existGDBPath))'}
score: 0.6984893990141312
{'intent': 'Python - Extract folder path from file path', 'snippet': 'os.path.dirname(os.path.abspath(existGDBPath))'}
score: 0.6984893990141312
{'intent': 'python - extract folder path from file path', 'snippet': 'os.path.dirname(os.path.abspath(existGDBPath))'}

139. input: sentence = re.sub('\\s+', '', sentence, flags=re.UNICODE)
score: 0.8835868559863994
{'intent': 'remove all whitespace in a string', 'snippet': "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"}
score: 0.8580634191577544
{'intent': 'remove all whitespaces in string `sentence`', 'snippet': "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"}
score: 0.7685443455234502
{'intent': 'Remove punctuation from Unicode formatted strings', 'snippet': "return re.sub('\\\\p{P}+', '', text)"}

140. input: s[s.find('\n') + 1:s.rfind('\n')]
score: 0.7751397279710597
{'intent': 'remove first and last lines of string `s`', 'snippet': "s[s.find('\\n') + 1:s.rfind('\\n')]"}
score: 0.6745000948000098
{'intent': "find the index of sub string 's' in string `str` starting from index 11", 'snippet': "str.find('s', 11)"}
score: 0.6745000948000098
{'intent': "find the index of sub string 's' in string `str` starting from index 11", 'snippet': "str.find('s', 11)"}

141. input: os.kill(process.pid, signal.SIGKILL)
score: 0.9500617403893612
{'intent': 'kill a process with id `process.pid`', 'snippet': 'os.kill(process.pid, signal.SIGKILL)'}
score: 0.8910136728329423
{'intent': 'How to terminate process from Python using pid?', 'snippet': 'os.kill(pid, signal.SIGTERM)'}
score: 0.8910136728329423
{'intent': 'how to terminate process from python using pid?', 'snippet': 'os.kill(pid, signal.SIGTERM)'}

142. input: convert a flat list to list of list in python
score: 0.8232778786854651
{'intent': 'convert a flat list to list of list in python', 'snippet': "[['a', 'b', 'c'], ['d', 'e', 'f']]"}
score: 0.8232778786854651
{'intent': 'convert a flat list to list of list in python', 'snippet': "[['a', 'b', 'c'], ['d', 'e', 'f']]"}
score: 0.8125146898977728
{'intent': 'python: flatten to a list of lists but no more', 'snippet': "[[1, 2, 3], ['a', 'b', 'c']]"}

143. input: getting task_id inside a celery task
score: 0.9402355806882402
{'intent': 'Getting task_id inside a Celery task', 'snippet': 'print(celery.current_task.task_id)'}
score: 0.686453988667732
{'intent': 'route to worker depending on result in celery?', 'snippet': "my_task.apply_async(exchange='C.dq', routing_key=host)"}
score: 0.686453988667732
{'intent': 'Route to worker depending on result in Celery?', 'snippet': "my_task.apply_async(exchange='C.dq', routing_key=host)"}

144. input: getting the first item item in a many-to-many relation in django
score: 0.8732134056387378
{'intent': 'Getting the first item item in a many-to-many relation in Django', 'snippet': 'Group.objects.get(id=1).members.all()[0]'}
score: 0.8732134056387378
{'intent': 'Getting the first item item in a many-to-many relation in Django', 'snippet': 'Group.objects.get(id=1).members.all()[0]'}
score: 0.8732134056387378
{'intent': 'getting the first item item in a many-to-many relation in django', 'snippet': 'Group.objects.get(id=1).members.all()[0]'}

145. input: how do convert unicode escape sequences to unicode characters in a python string
score: 0.8868276785271376
{'intent': 'How do convert unicode escape sequences to unicode characters in a python string', 'snippet': "name.decode('latin-1').encode('utf-8')"}
score: 0.8761396595468991
{'intent': 'how do convert unicode escape sequences to unicode characters in a python string', 'snippet': "name.decode('latin-1')"}
score: 0.8761396595468991
{'intent': 'How do convert unicode escape sequences to unicode characters in a python string', 'snippet': "name.decode('latin-1')"}

146. input: df.sub(df.a, axis=0)
score: 0.6420002898495624
{'intent': 'dropping a single (sub-) column from a multiindex', 'snippet': "df.drop('a', level=1, axis=1)"}
score: 0.6420002898495624
{'intent': 'Dropping a single (sub-) column from a MultiIndex', 'snippet': "df.drop('a', level=1, axis=1)"}
score: 0.6420002898495624
{'intent': 'Dropping a single (sub-) column from a MultiIndex', 'snippet': "df.drop('a', level=1, axis=1)"}

147. input: grouped.reset_index(level=0).reset_index(level=0)
score: 0.7043838909760719
{'intent': 'reset index of series `s`', 'snippet': 's.reset_index(0).reset_index(drop=True)'}
score: 0.7043838909760719
{'intent': 'reset index of series `s`', 'snippet': 's.reset_index(0).reset_index(drop=True)'}
score: 0.6348269243160586
{'intent': 'collapse hierarchical column index to level 0 in dataframe `df`', 'snippet': 'df.columns = df.columns.get_level_values(0)'}

148. input: max(lst, key=lambda x: x['score'])
score: 0.8892440321198337
{'intent': 'Get an item from a list of dictionary `lst` which has maximum value in the key `score` using lambda function', 'snippet': "max(lst, key=lambda x: x['score'])"}
score: 0.8892440321198337
{'intent': 'get an item from a list of dictionary `lst` which has maximum value in the key `score` using lambda function', 'snippet': "max(lst, key=lambda x: x['score'])"}
score: 0.8275106448076701
{'intent': 'how to get the index of dictionary with the highest value in a list of dictionary', 'snippet': "max(lst, key=lambda x: x['score'])"}

149. input: how can i do an atomic write to stdout in python?
score: 0.9157325038893394
{'intent': 'How can I do an atomic write to stdout in python?', 'snippet': 'sys.stdout.write(msg)'}
score: 0.7393174439795969
{'intent': 'atomic writing to file with python', 'snippet': "f.write('huzza')"}
score: 0.7393174439795969
{'intent': 'atomic writing to file with Python', 'snippet': "f.write('huzza')"}

150. input: how to subset a data frame using pandas based on a group criteria?
score: 0.8431086247947515
{'intent': 'How to subset a data frame using Pandas based on a group criteria?', 'snippet': "df.groupby('User')['X'].transform(sum) == 0"}
score: 0.8431086247947515
{'intent': 'How to subset a data frame using Pandas based on a group criteria?', 'snippet': "df.groupby('User')['X'].transform(sum) == 0"}
score: 0.8417430285100991
{'intent': 'How to subset a data frame using Pandas based on a group criteria?', 'snippet': "df.loc[df.groupby('User')['X'].transform(sum) == 0]"}

151. input: time.sleep(10)
score: 0.6294188810565495
{'intent': 'make a time delay', 'snippet': 'time.sleep(5)'}
score: 0.5965122591264929
{'intent': 'delay for "5" seconds', 'snippet': 'time.sleep(5)'}
score: 0.5965122591264929
{'intent': 'delay for "5" seconds', 'snippet': 'time.sleep(5)'}

152. input: l[:3] + l[-3:]
score: 0.674035918425619
{'intent': 'Get the first and last 3 elements of list `l`', 'snippet': 'l[:3] + l[-3:]'}
score: 0.674035918425619
{'intent': 'get the first and last 3 elements of list `l`', 'snippet': 'l[:3] + l[-3:]'}
score: 0.6525845949424486
{'intent': 'Index the first and the last n elements of a list', 'snippet': 'l[:3] + l[-3:]'}

153. input: """0,1,2""".split(',')
score: 0.907907356023973
{'intent': 'split string "0,1,2" based on delimiter \',\'', 'snippet': '"""0,1,2""".split(\',\')'}
score: 0.809188544766873
{'intent': 'Converting a String to List in Python', 'snippet': '"""0,1,2""".split(\',\')'}
score: 0.809188544766873
{'intent': 'Converting a String to List in Python', 'snippet': '"""0,1,2""".split(\',\')'}

154. input: from functools import reduce
reduce(lambda x, y: x[y], [4, 3, 2], nestedList)
score: 0.8387401894458855
{'intent': 'How to unnest a nested list?', 'snippet': 'from functools import reduce\nreduce(lambda x, y: x + y, A, [])'}
score: 0.8387401894458855
{'intent': 'how to unnest a nested list?', 'snippet': 'from functools import reduce\nreduce(lambda x, y: x + y, A, [])'}
score: 0.8211015364488058
{'intent': 'Convert list of positions [4, 1, 2] of arbitrary length to an index for a nested list', 'snippet': 'from functools import reduce\nreduce(lambda x, y: x[y], [4, 3, 2], nestedList)'}

155. input: ax.tick_params(labeltop='off')
score: 0.7647518268690077
{'intent': 'how to show tick labels on top of matplotlib plot?', 'snippet': "ax.xaxis.set_tick_params(labeltop='on')"}
score: 0.744401162891908
{'intent': 'Python/Matplotlib - Is there a way to make a discontinuous axis?', 'snippet': "ax.tick_params(labeltop='off')"}
score: 0.728943087762168
{'intent': 'moving x-axis to the top of a plot in matplotlib', 'snippet': "ax.tick_params(labelbottom='off', labeltop='on')"}

156. input: df.drop(df.columns[[0, 1, 3]], axis=1)
score: 0.8741477687277939
{'intent': 'delete 1st, 2nd and 4th columns from dataframe `df`', 'snippet': 'df.drop(df.columns[[0, 1, 3]], axis=1)'}
score: 0.8737439122293981
{'intent': 'Delete column from pandas DataFrame', 'snippet': 'df.drop(df.columns[[0, 1, 3]], axis=1)'}
score: 0.8737439122293981
{'intent': 'Delete column from pandas DataFrame', 'snippet': 'df.drop(df.columns[[0, 1, 3]], axis=1)'}

157. input: append a pandas series `b` to the series `a` and get a continuous index
score: 0.9213084360575097
{'intent': 'append a pandas series `b` to the series `a` and get a continuous index', 'snippet': 'a.append(b).reset_index(drop=True)'}
score: 0.8118401581285626
{'intent': 'simple way to append a pandas series with same index', 'snippet': 'pd.Series(np.concatenate([a, b]))'}
score: 0.8118401581285626
{'intent': 'Simple way to append a pandas series with same index', 'snippet': 'pd.Series(np.concatenate([a, b]))'}

158. input: how do i find the iloc of a row in pandas dataframe?
score: 0.9130861644587364
{'intent': 'How do i find the iloc of a row in pandas dataframe?', 'snippet': "df[df.index < '2000-01-04'].index[-1]"}
score: 0.777840060317335
{'intent': 'select pandas rows based on list index', 'snippet': 'df.iloc[([1, 3]), :]'}
score: 0.777840060317335
{'intent': 'Select Pandas rows based on list index', 'snippet': 'df.iloc[([1, 3]), :]'}

159. input: {'count': 836780, '_shards': {'successful': 5, 'failed': 0, 'total': 5}}
score: 0.8301243860289413
{'intent': 'Format the output of elasticsearch-py', 'snippet': "{'count': 836780, '_shards': {'successful': 5, 'failed': 0, 'total': 5}}"}
score: 0.5233362230858496
{'intent': 'get count of values associated with key in dict python', 'snippet': "sum(d['success'] for d in s)"}
score: 0.5233362230858496
{'intent': 'get count of values associated with key in dict python', 'snippet': "sum(d['success'] for d in s)"}

160. input: how to better rasterize a plot without blurring the labels in matplotlib?
score: 0.8714231636309289
{'intent': 'how to better rasterize a plot without blurring the labels in matplotlib?', 'snippet': "plt.savefig('rasterized_transparency.eps')"}
score: 0.862625682033672
{'intent': 'How to better rasterize a plot without blurring the labels in matplotlib?', 'snippet': "plt.savefig('rasterized_transparency.eps', dpi=200)"}
score: 0.6468660230277125
{'intent': 'How to plot blurred points in Matplotlib', 'snippet': 'plt.show()'}

161. input: get the object with the max attribute's value in a list of objects
score: 0.6247890012754334
{'intent': 'Find key of object with maximum property value', 'snippet': "max(d, key=lambda x: d[x]['c'] + d[x]['h'])"}
score: 0.6078350722089121
{'intent': 'Pythonic way to get the largest item in a list', 'snippet': 'max(a_list, key=operator.itemgetter(1))'}
score: 0.6078350722089121
{'intent': 'pythonic way to get the largest item in a list', 'snippet': 'max(a_list, key=operator.itemgetter(1))'}

162. input: how to create an integer array in python?
score: 0.8603530318615102
{'intent': 'How to create an integer array in Python?', 'snippet': "a = array.array('i', (0 for i in range(0, 10)))"}
score: 0.8603530318615102
{'intent': 'how to create an integer array in python?', 'snippet': "a = array.array('i', (0 for i in range(0, 10)))"}
score: 0.688979233624285
{'intent': 'create a list of integers with duplicate values in python', 'snippet': '[(i // 2) for i in range(10)]'}

163. input: how to connect a progress bar to a function?
score: 0.8571719125464634
{'intent': 'How to connect a progress bar to a function?', 'snippet': 'app.mainloop()'}
score: 0.598563928891024
{'intent': 'flask app: update progress bar while function runs', 'snippet': 'app.run()'}
score: 0.5654885750273719
{'intent': 'print a progress-bar processing in python', 'snippet': 'sys.stdout.flush()'}

164. input: removing a list of characters in string
score: 0.757406906829355
{'intent': 'Removing a list of characters in string', 'snippet': "s.translate(None, '!.;,')"}
score: 0.7530588893386189
{'intent': 'Removing a list of characters in string', 'snippet': "s.translate(None, ',!.;')"}
score: 0.7530588893386189
{'intent': 'removing a list of characters in string', 'snippet': "s.translate(None, ',!.;')"}

165. input: numpy.array(data, dtype=[('label', str), ('x', float), ('y', float)])
score: 0.8419480010431916
{'intent': 'Maintain strings when converting python list into numpy structured array', 'snippet': "numpy.array(data, dtype=[('label', str), ('x', float), ('y', float)])"}
score: 0.8116443280726255
{'intent': 'maintain strings when converting python list into numpy structured array', 'snippet': "numpy.array(data, dtype=[('label', 'S2'), ('x', float), ('y', float)])"}
score: 0.7095463864212579
{'intent': 'How to convert a Numpy 2D array with object dtype to a regular 2D array of floats', 'snippet': "np.array(arr[:, (1)], dtype=[('', np.float)] * 3).view(np.float).reshape(-1, 3)"}

166. input: how to round each item in a list of floats to 2 decmial places
score: 0.9366772405532526
{'intent': 'How to round each item in a list of floats to 2 decmial places', 'snippet': "['0.30', '0.50', '0.20']"}
score: 0.9211817554772783
{'intent': 'how to round each item in a list of floats to 2 decmial places', 'snippet': 'myRoundedList = [round(elem, 2) for elem in myList]'}
score: 0.6126944223533585
{'intent': 'how to round to two decimal places in python 2.7?', 'snippet': 'round(1.679, 2)'}

167. input: (trace_df['ratio'] > 0).mean()
score: 0.8151796434283478
{'intent': 'get proportion of rows in dataframe `trace_df` whose values for column `ratio` are greater than 0', 'snippet': "(trace_df['ratio'] > 0).mean()"}
score: 0.7869522850060311
{'intent': 'Percentage match in pandas Dataframe', 'snippet': "(trace_df['ratio'] > 0).mean()"}
score: 0.7869522850060311
{'intent': 'percentage match in pandas dataframe', 'snippet': "(trace_df['ratio'] > 0).mean()"}

168. input: [1, 2, 3]
score: 0.5703526431825576
{'intent': 'check if 3 is inside list `[1, 2, 3]`', 'snippet': '3 in [1, 2, 3]'}
score: 0.5703526431825576
{'intent': 'check if 3 is inside list `[1, 2, 3]`', 'snippet': '3 in [1, 2, 3]'}
score: 0.5607007463270594
{'intent': 'store integer 3, 4, 1 and 2 in a list', 'snippet': '[3, 4, 1, 2]'}

169. input: df = df.set_index(['id', 'name'])
score: 0.76196283379061
{'intent': 'Pandas: Mean of columns with the same names', 'snippet': "df = df.set_index(['id', 'name'])"}
score: 0.7552735471292595
{'intent': 'python pandas dataframe to dictionary', 'snippet': "df.set_index('id').to_dict()"}
score: 0.7552735471292595
{'intent': 'python pandas dataframe to dictionary', 'snippet': "df.set_index('id').to_dict()"}

170. input: plt.figure()
score: 0.5732806435575337
{'intent': 'How to create a function that outputs a matplotlib figure?', 'snippet': 'plt.show()'}
score: 0.5732806435575337
{'intent': 'how to create a function that outputs a matplotlib figure?', 'snippet': 'plt.show()'}
score: 0.5577778371932995
{'intent': 'How do I use matplotlib autopct?', 'snippet': 'plt.figure()'}

171. input: creating 2d dictionary in python
score: 0.8518782419260155
{'intent': 'Creating 2D dictionary in Python', 'snippet': "dict_names['d1']['name']"}
score: 0.8417539689274932
{'intent': 'creating 2d dictionary in python', 'snippet': "d['set1']['name']"}
score: 0.8417539689274932
{'intent': 'Creating 2D dictionary in Python', 'snippet': "d['set1']['name']"}

172. input: {i.pop('name'): i for i in listofdict}
score: 0.8252127997937814
{'intent': 'Elegant way to transform a list of dict into a dict of dicts', 'snippet': "{i.pop('name'): i for i in listofdict}"}
score: 0.680937218745799
{'intent': 'Elegant way to transform a list of dict into a dict of dicts', 'snippet': "dict(zip([d.pop('name') for d in listofdict], listofdict))"}
score: 0.680937218745799
{'intent': 'elegant way to transform a list of dict into a dict of dicts', 'snippet': "dict(zip([d.pop('name') for d in listofdict], listofdict))"}

173. input: settin general defaults for named arguments in python
score: 0.7440199199535191
{'intent': 'Accessing the default argument values in Python', 'snippet': 'test.__defaults__'}
score: 0.7440199199535191
{'intent': 'accessing the default argument values in python', 'snippet': 'test.__defaults__'}
score: 0.6567536209551944
{'intent': 'Conditionally passing arbitrary number of default named arguments to a function', 'snippet': "func('arg', 'arg2', 'some value' if condition else None)"}

174. input: dict((v, k) for k, v in map.items())
score: 0.8666314897804064
{'intent': 'get keys correspond to a value in dictionary', 'snippet': 'dict((v, k) for k, v in map.items())'}
score: 0.8666314897804064
{'intent': 'get keys correspond to a value in dictionary', 'snippet': 'dict((v, k) for k, v in map.items())'}
score: 0.8496675561092973
{'intent': 'Reverse key-value pairs in a dictionary `map`', 'snippet': 'dict((v, k) for k, v in map.items())'}

175. input: insert data into mysql table from python script
score: 0.8290014066691571
{'intent': 'insert data into mysql table from python script', 'snippet': "cursor.execute('SELECT qSQL FROM TBLTEST WHERE id = 4')"}
score: 0.7728486716336536
{'intent': 'error when trying to insert values into mysql table with python', 'snippet': "0, '2012-11-06T16:23:36-05:00', 0, None, 23759918, 'baseline', '0 to 100', null, 105114, 2009524, True, 'charge', 'Charge'"}
score: 0.7667721335390009
{'intent': 'How can I insert data into a MySQL database?', 'snippet': 'cursor.execute(sql)'}

176. input: how to ignore nan in colorbar?
score: 0.860151761390495
{'intent': 'How to ignore NaN in colorbar?', 'snippet': 'plt.show()'}
score: 0.5588319065091266
{'intent': 'removing nan values from an array', 'snippet': 'x = x[~numpy.isnan(x)]'}
score: 0.5588319065091266
{'intent': 'Removing nan values from an array', 'snippet': 'x = x[~numpy.isnan(x)]'}

177. input: s.decode('unicode-escape').encode('ascii')
score: 0.9030771138908478
{'intent': 'How do I treat an ASCII string as unicode and unescape the escaped characters in it in python?', 'snippet': "s.decode('unicode-escape').encode('ascii')"}
score: 0.8593727525215394
{'intent': 'Encoding a string to ascii', 'snippet': "s = s.decode('some_encoding').encode('ascii', 'replace')"}
score: 0.8593727525215394
{'intent': 'encoding a string to ascii', 'snippet': "s = s.decode('some_encoding').encode('ascii', 'replace')"}

178. input: python version 2.7: xml elementtree: how to iterate through certain elements of a child element in order to find a match
score: 0.9279759019010375
{'intent': 'Python version 2.7: XML ElementTree: How to iterate through certain elements of a child element in order to find a match', 'snippet': "element.find('visits')"}
score: 0.7925606303967037
{'intent': 'Parse XML file into Python object', 'snippet': "[(ch.tag, ch.text) for e in tree.findall('file') for ch in e.getchildren()]"}
score: 0.7925606303967037
{'intent': 'parse xml file into python object', 'snippet': "[(ch.tag, ch.text) for e in tree.findall('file') for ch in e.getchildren()]"}

179. input: split a string `text` with comma, question mark or exclamation by non-consuming regex using look-behind
score: 0.8952713962810629
{'intent': 'Split a string `text` with comma, question mark or exclamation by non-consuming regex using look-behind', 'snippet': "re.split('(?<=[\\\\.\\\\?!]) ', text)"}
score: 0.6521949213369986
{'intent': "split string `text` by the occurrences of regex pattern '(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[a-z]|$)'", 'snippet': "re.split('(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)', text)"}
score: 0.6521949213369986
{'intent': "split string `text` by the occurrences of regex pattern '(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)'", 'snippet': "re.split('(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)', text)"}

180. input: strip everything up to and including the character `&` from url `url`, strip the character `=` from the remaining string and concatenate `.html` to the end
score: 0.8498921452097452
{'intent': 'strip everything up to and including the character `&` from url `url`, strip the character `=` from the remaining string and concatenate `.html` to the end', 'snippet': "url.split('&')[-1].replace('=', '') + '.html'"}
score: 0.7504276998793257
{'intent': 'Strip random characters from url', 'snippet': "url.split('&')[-1].replace('=', '') + '.html'"}
score: 0.7504276998793257
{'intent': 'Strip random characters from url', 'snippet': "url.split('&')[-1].replace('=', '') + '.html'"}

181. input: replace value '-' in any column of pandas dataframe to "nan"
score: 0.9740564541884529
{'intent': 'replace value \'-\' in any column of pandas dataframe to "NaN"', 'snippet': "df.replace('-', 'NaN')"}
score: 0.9528442686936394
{'intent': 'Replace value in any column in pandas dataframe', 'snippet': "df.replace('-', 'NaN')"}
score: 0.9528442686936394
{'intent': 'Replace value in any column in pandas dataframe', 'snippet': "df.replace('-', 'NaN')"}

182. input: [x[1] for x in L]
score: 0.6902211899891983
{'intent': 'Accessing a value in a tuple that is in a list', 'snippet': '[x[1] for x in L]'}
score: 0.6902211899891983
{'intent': 'Accessing a value in a tuple that is in a list', 'snippet': '[x[1] for x in L]'}
score: 0.6281086666585223
{'intent': 'get the value at index 1 for each tuple in the list of tuples `L`', 'snippet': '[x[1] for x in L]'}

183. input: dict((k, bigdict[k]) for k in ('l', 'm', 'n'))
score: 0.8422657949041626
{'intent': "extract subset of key-value pairs with keys as `('l', 'm', 'n')` from dictionary object `bigdict`", 'snippet': "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"}
score: 0.8089666752197202
{'intent': "extract subset of key value pair for keys 'l', 'm', 'n' from `bigdict` in python 3", 'snippet': "{k: bigdict[k] for k in ('l', 'm', 'n')}"}
score: 0.8089666752197202
{'intent': "Extract subset of key value pair for keys 'l', 'm', 'n' from `bigdict` in python 3", 'snippet': "{k: bigdict[k] for k in ('l', 'm', 'n')}"}

184. input: how to detect if computer is contacted to the internet with python?
score: 0.5654862808518698
{'intent': 'how can i check the data transfer on a network interface in python?', 'snippet': 'time.sleep(5)'}
score: 0.5654862808518698
{'intent': 'How can I check the data transfer on a network interface in python?', 'snippet': 'time.sleep(5)'}
score: 0.5509248032146797
{'intent': 'network pinging with python', 'snippet': "os.system('ping -c 5 www.examplesite.com')"}

185. input: how to remove square brackets from list in python?
score: 0.8687174093194475
{'intent': 'How to remove square brackets from list in Python?', 'snippet': "print(', '.join(LIST))"}
score: 0.8482492698586952
{'intent': 'How to remove square brackets from list in Python?', 'snippet': "print(', '.join(map(str, LIST)))"}
score: 0.8482492698586952
{'intent': 'how to remove square brackets from list in python?', 'snippet': "print(', '.join(map(str, LIST)))"}

186. input: df.sub(df.mean(axis=1), axis=0)
score: 0.8298958377570377
{'intent': "Subtract the mean of each row in dataframe `df` from the corresponding row's elements", 'snippet': 'df.sub(df.mean(axis=1), axis=0)'}
score: 0.8093590388128501
{'intent': 'Pandas: Subtract row mean from each element in row', 'snippet': 'df.sub(df.mean(axis=1), axis=0)'}
score: 0.8093590388128501
{'intent': 'Pandas: Subtract row mean from each element in row', 'snippet': 'df.sub(df.mean(axis=1), axis=0)'}

187. input: zipped.sort(key=lambda t: t[1])
score: 0.8933542033205468
{'intent': 'How do I sort a zipped list in Python?', 'snippet': 'zipped.sort(key=lambda t: t[1])'}
score: 0.8933542033205468
{'intent': 'How do I sort a zipped list in Python?', 'snippet': 'zipped.sort(key=lambda t: t[1])'}
score: 0.8747238436603757
{'intent': 'sort a zipped list `zipped` using lambda function', 'snippet': 'sorted(zipped, key=lambda x: x[1])'}

188. input: python: how to remove all duplicate items from a list
score: 0.8921107667307311
{'intent': 'Python: How to remove all duplicate items from a list', 'snippet': 'x = list(set(x))'}
score: 0.8921107667307311
{'intent': 'python: how to remove all duplicate items from a list', 'snippet': 'x = list(set(x))'}
score: 0.8555381522783445
{'intent': 'Python: How to remove all duplicate items from a list', 'snippet': 'woduplicates = list(set(lseperatedOrblist))'}

189. input: run a python script with arguments
score: 0.7291445906072395
{'intent': 'Run a python script with arguments', 'snippet': "sys.exit('Not enough args')"}
score: 0.7240727665258866
{'intent': 'Execute a file with arguments in Python shell', 'snippet': "subprocess.call(['./abc.py', arg1, arg2])"}
score: 0.7240727665258866
{'intent': 'execute a file with arguments in python shell', 'snippet': "subprocess.call(['./abc.py', arg1, arg2])"}

190. input: is there any lib for python that will get me the synonyms of a word?
score: 0.899665872842049
{'intent': 'Is there any lib for python that will get me the synonyms of a word?', 'snippet': "['dog', 'domestic_dog', 'Canis_familiaris']"}
score: 0.8905609215169589
{'intent': 'is there any lib for python that will get me the synonyms of a word?', 'snippet': "['great', 'satisfying', 'exceptional', 'positive', 'acceptable']"}
score: 0.8905609215169589
{'intent': 'Is there any lib for python that will get me the synonyms of a word?', 'snippet': "['great', 'satisfying', 'exceptional', 'positive', 'acceptable']"}

191. input: create a pandas dataframe `df` from elements of a dictionary `nvalues`
score: 0.7948737914327275
{'intent': 'Creating a Pandas dataframe from elements of a dictionary', 'snippet': "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"}
score: 0.7948737914327275
{'intent': 'Creating a Pandas dataframe from elements of a dictionary', 'snippet': "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"}
score: 0.7724558831917137
{'intent': 'create a pandas dataframe `df` from elements of a dictionary `nvalues`', 'snippet': "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"}

192. input: creating dynamically named variables in a function in python 3 / understanding exec / eval / locals in python 3
score: 0.9824476510889903
{'intent': 'Creating dynamically named variables in a function in python 3 / Understanding exec / eval / locals in python 3', 'snippet': 'foo()'}
score: 0.7255366157524499
{'intent': 'Python: Using vars() to assign a string to a variable', 'snippet': 'locals()[4]'}
score: 0.7255366157524499
{'intent': 'python: using vars() to assign a string to a variable', 'snippet': 'locals()[4]'}

193. input: pandas - plotting series
score: 0.6836334784413182
{'intent': 'Pandas - Plotting series', 'snippet': 'pd.concat([rng0, rng1, rng2, rng3, rng4, rng5], axis=1).T.plot()'}
score: 0.6506384642234293
{'intent': 'how to plot arbitrary markers on a pandas data series?', 'snippet': "ts.plot(marker='.')"}
score: 0.6506384642234293
{'intent': 'how to plot arbitrary markers on a pandas data series?', 'snippet': "ts.plot(marker='.')"}

194. input: change current working directory
score: 0.6571999370790845
{'intent': 'change current working directory in python', 'snippet': "os.chdir('chapter3')"}
score: 0.6571999370790845
{'intent': 'change current working directory in python', 'snippet': "os.chdir('chapter3')"}
score: 0.6571999370790845
{'intent': 'change current working directory in python', 'snippet': "os.chdir('chapter3')"}

195. input: execute os command `my_cmd`
score: 0.8859729779076211
{'intent': 'execute os command `my_cmd`', 'snippet': 'os.system(my_cmd)'}
score: 0.6021226232464194
{'intent': 'execute a command `command ` in the terminal from a python script', 'snippet': 'os.system(command)'}
score: 0.6021226232464194
{'intent': 'execute a command `command ` in the terminal from a python script', 'snippet': 'os.system(command)'}

196. input: [k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]
score: 0.8475368255606851
{'intent': 'remove adjacent duplicate elements from a list `[1, 2, 2, 3, 2, 2, 4]`', 'snippet': '[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]'}
score: 0.8475368255606851
{'intent': 'remove adjacent duplicate elements from a list `[1, 2, 2, 3, 2, 2, 4]`', 'snippet': '[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]'}
score: 0.8278450020951997
{'intent': 'Remove adjacent duplicate elements from a list', 'snippet': '[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]'}

197. input: python - the request headers for mechanize
score: 0.8234244381456971
{'intent': 'Python - The request headers for mechanize', 'snippet': "browser.addheaders = [('User-Agent', 'Mozilla/5.0 blahblah')]"}
score: 0.655611508261464
{'intent': "Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`", 'snippet': "br.addheaders = [('Cookie', 'cookiename=cookie value')]"}
score: 0.6402676570109476
{'intent': 'how to login to a website with python and mechanize', 'snippet': 'browser.submit()'}

198. input: sorted(list(myDict.items()), key=lambda e: e[1][2])
score: 0.9556623941075256
{'intent': 'Python: sorting a dictionary of lists', 'snippet': 'sorted(list(myDict.items()), key=lambda e: e[1][2])'}
score: 0.9556623941075256
{'intent': 'Python: sorting a dictionary of lists', 'snippet': 'sorted(list(myDict.items()), key=lambda e: e[1][2])'}
score: 0.9072355138116199
{'intent': 'sort dictionary of lists `myDict` by the third item in each list', 'snippet': 'sorted(list(myDict.items()), key=lambda e: e[1][2])'}

199. input: how to initialize multiple columns to existing pandas dataframe
score: 0.8479188436318228
{'intent': 'how to initialize multiple columns to existing pandas DataFrame', 'snippet': "df.reindex(columns=list['abcd'])"}
score: 0.8381679046950261
{'intent': 'how to initialize multiple columns to existing pandas dataframe', 'snippet': "df.reindex(columns=list['cd'])"}
score: 0.8381679046950261
{'intent': 'how to initialize multiple columns to existing pandas DataFrame', 'snippet': "df.reindex(columns=list['cd'])"}

200. input: [int(s[i:i + 3], 2) for i in range(0, len(s), 3)]
score: 0.7884596256052416
{'intent': 'convert binary string to list of integers using python', 'snippet': '[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]'}
score: 0.7884596256052416
{'intent': 'Convert binary string to list of integers using Python', 'snippet': '[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]'}
score: 0.7884596256052416
{'intent': 'Convert binary string to list of integers using Python', 'snippet': '[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]'}

201. input: return [dictio for dictio in dictlist if dictio[key] in valuelist]
score: 0.8553411580085115
{'intent': 'How to filter list of dictionaries with matching values for a given key', 'snippet': 'return [dictio for dictio in dictlist if dictio[key] in valuelist]'}
score: 0.7302214416114652
{'intent': 'dictionary keys match on list; get key/value pair', 'snippet': 'new_dict = {k: my_dict[k] for k in my_list if k in my_dict}'}
score: 0.7294146170448815
{'intent': 'get list of keys in dictionary `my_dict` whose values contain values from list `lst`', 'snippet': '[key for item in lst for key, value in list(my_dict.items()) if item in value]'}

202. input: [[int(x)] for y in list_of_lists for x in y]
score: 0.8186366278290378
{'intent': 'List comprehension - converting strings in one list, to integers in another', 'snippet': '[[int(x)] for y in list_of_lists for x in y]'}
score: 0.7769233844975869
{'intent': 'python: one-liner to perform an operation upon elements in a 2d array (list of lists)?', 'snippet': '[[int(y) for y in x] for x in values]'}
score: 0.7769233844975869
{'intent': 'Python: One-liner to perform an operation upon elements in a 2d array (list of lists)?', 'snippet': '[[int(y) for y in x] for x in values]'}

203. input: socket.inet_ntoa(struct.pack('!L', 2130706433))
score: 0.8479401731174012
{'intent': 'Convert an IP string to a number and vice versa', 'snippet': "socket.inet_ntoa(struct.pack('!L', 2130706433))"}
score: 0.8479401731174012
{'intent': 'Convert an IP string to a number and vice versa', 'snippet': "socket.inet_ntoa(struct.pack('!L', 2130706433))"}
score: 0.8318376229789273
{'intent': 'convert a number 2130706433 to ip string', 'snippet': "socket.inet_ntoa(struct.pack('!L', 2130706433))"}

204. input: regex: correctly matching groups with negative lookback
score: 0.624168983559096
{'intent': 'Regex: Correctly matching groups with negative lookback', 'snippet': "print(re.findall('[^/|(]+(?:\\\\([^)]*\\\\))*', re.sub('^qr/(.*)/i$', '\\\\1', str)))"}
score: 0.5625052101634704
{'intent': 'python regex -- extraneous matchings', 'snippet': "re.findall('-|\\\\+=|==|=|\\\\+|[^-+=\\\\s]+', 'hello-+==== =+  there')"}
score: 0.5625052101634704
{'intent': 'Python regex -- extraneous matchings', 'snippet': "re.findall('-|\\\\+=|==|=|\\\\+|[^-+=\\\\s]+', 'hello-+==== =+  there')"}

205. input: how to handle a http get request to a file in tornado?
score: 0.8841019734843192
{'intent': 'How to handle a HTTP GET request to a file in Tornado?', 'snippet': "('/static/(.*)', web.StaticFileHandler, {'path': '/var/www'}),"}
score: 0.5995023000202129
{'intent': 'how can i implement multiple url parameters in a tornado route?', 'snippet': 'tornado.ioloop.IOLoop.instance().start()'}
score: 0.5995023000202129
{'intent': 'How can I implement multiple URL parameters in a Tornado route?', 'snippet': 'tornado.ioloop.IOLoop.instance().start()'}

206. input: random.randrange(1, 10)
score: 0.6796220749938663
{'intent': 'Generate random integers between 0 and 9', 'snippet': 'random.randint(a, b)'}
score: 0.6740732948109153
{'intent': 'how to create a range of random decimal numbers between 0 and 1', 'snippet': '[random.random() for _ in range(0, 10)]'}
score: 0.6740732948109153
{'intent': 'how to create a range of random decimal numbers between 0 and 1', 'snippet': '[random.random() for _ in range(0, 10)]'}

207. input: symlinks on windows?
score: 0.6926534716268683
{'intent': 'symlinks on windows?', 'snippet': "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)"}
score: 0.6926534716268683
{'intent': 'Symlinks on windows?', 'snippet': "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)"}
score: 0.6926534716268683
{'intent': 'Symlinks on windows?', 'snippet': "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)"}

208. input: python - using env variables of remote host with / ssh
score: 0.5645498501348774
{'intent': 'how to copy a file to a remote server in python using scp or ssh?', 'snippet': "os.system('scp FILE USER@SERVER:PATH')"}
score: 0.5637214929462594
{'intent': 'how to open an ssh tunnel using python?', 'snippet': "subprocess.call(['curl', 'http://localhost:2222'])"}
score: 0.5637214929462594
{'intent': 'How to open an SSH tunnel using python?', 'snippet': "subprocess.call(['curl', 'http://localhost:2222'])"}

209. input: int(math.ceil(x)) - 1
score: 0.7478642585160103
{'intent': 'find the largest integer less than `x`', 'snippet': 'int(math.ceil(x)) - 1'}
score: 0.736272363216641
{'intent': 'How do I find the largest integer less than x?', 'snippet': 'int(math.ceil(x)) - 1'}
score: 0.736272363216641
{'intent': 'How do I find the largest integer less than x?', 'snippet': 'int(math.ceil(x)) - 1'}

210. input: listofzeros = [0] * n
score: 0.8342010272467935
{'intent': 'List of zeros in python', 'snippet': 'listofzeros = [0] * n'}
score: 0.8342010272467935
{'intent': 'List of zeros in python', 'snippet': 'listofzeros = [0] * n'}
score: 0.8318454202493922
{'intent': 'create a list `listofzeros` of `n` zeros', 'snippet': 'listofzeros = [0] * n'}

211. input: python pandas drop columns based on max value of column
score: 0.9573841812503379
{'intent': 'python pandas drop columns based on max value of column', 'snippet': 'df.max()'}
score: 0.9417974446211226
{'intent': 'Python Pandas drop columns based on max value of column', 'snippet': 'df.columns[df.max() > 0]'}
score: 0.9417974446211226
{'intent': 'Python Pandas drop columns based on max value of column', 'snippet': 'df.columns[df.max() > 0]'}

212. input: pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))
score: 0.7148409942666762
{'intent': 'pandas unique values multiple columns', 'snippet': "np.unique(df[['Col1', 'Col2']])"}
score: 0.7102839019826904
{'intent': 'pandas unique values multiple columns', 'snippet': "np.unique(df[['Col1', 'Col2']].values)"}
score: 0.7062598556244328
{'intent': 'how to remove duplicates from a dataframe?', 'snippet': "df.sort_values(by=['a', 'b']).groupby(df.a).first()[['b']].reset_index()"}

213. input: pythonic way to insert every 2 elements in a string
score: 0.8243212919263833
{'intent': 'Pythonic way to insert every 2 elements in a string', 'snippet': '"""-""".join(s[i:i + 2] for i in range(0, len(s), 2))'}
score: 0.8243212919263833
{'intent': 'pythonic way to insert every 2 elements in a string', 'snippet': '"""-""".join(s[i:i + 2] for i in range(0, len(s), 2))'}
score: 0.8151433068872831
{'intent': 'pythonic way to insert every 2 elements in a string', 'snippet': 's[::2], s[1::2]'}

214. input: x = numpy.asarray(x, order='C')
score: 0.7568275046662155
{'intent': 'Cheapest way to get a numpy array into C-contiguous order?', 'snippet': "x = numpy.asarray(x, order='C')"}
score: 0.6177803684611394
{'intent': 'how to sort a scipy array with order attribute when it does not have the field names?', 'snippet': 'x = np.array([(1, 0), (0, 1)])'}
score: 0.5984824984957383
{'intent': 'Array indexing in numpy', 'snippet': 'x[(np.arange(x.shape[0]) != 1), :, :]'}

215. input: how can i parse html with html5lib, and query the parsed html with xpath?
score: 0.8539696675661383
{'intent': 'How can I parse HTML with html5lib, and query the parsed HTML with XPath?', 'snippet': "[td.text for td in tree.xpath('//td')]"}
score: 0.7860162133715572
{'intent': 'how to build html5lib parser to deal with a mixture of xml and html tags', 'snippet': "xml_soup = BeautifulSoup(xml_object, 'xml')"}
score: 0.6552214735352003
{'intent': 'parsing html string `html` using beautifulsoup', 'snippet': "parsed_html = BeautifulSoup(html)\nprint(parsed_html.body.find('div', attrs={'class': 'container', }).text)"}

216. input: how to find a value in a list of python dictionaries?
score: 0.845009382270004
{'intent': 'How to find a value in a list of python dictionaries?', 'snippet': "any(d['name'] == 'Test' for d in label)"}
score: 0.845009382270004
{'intent': 'How to find a value in a list of python dictionaries?', 'snippet': "any(d['name'] == 'Test' for d in label)"}
score: 0.8363286225490998
{'intent': 'Get a list of values from a list of dictionaries in python', 'snippet': "[d['key'] for d in l if 'key' in d]"}

217. input: rotating a two-dimensional array in python
score: 0.9365553355640138
{'intent': 'rotating a two-dimensional array in python', 'snippet': 'original[::-1]'}
score: 0.9365553355640138
{'intent': 'Rotating a two-dimensional array in Python', 'snippet': 'original[::-1]'}
score: 0.9168042171639896
{'intent': 'rotating a two-dimensional array in python', 'snippet': '[[1, 2, 3], [4, 5, 6], [7, 8, 9]]'}

218. input: any(x in string for x in search)
score: 0.850399727177422
{'intent': 'check if any of the items in  `search` appear in `string`', 'snippet': 'any(x in string for x in search)'}
score: 0.850399727177422
{'intent': 'check if any of the items in  `search` appear in `string`', 'snippet': 'any(x in string for x in search)'}
score: 0.8161164681752021
{'intent': 'Find array item in a string', 'snippet': 'any(x in string for x in search)'}

219. input: how to send a xml-rpc request in python?
score: 0.8826373908507068
{'intent': 'How to send a xml-rpc request in python?', 'snippet': 'server.serve_forever()'}
score: 0.7801318683957841
{'intent': 'send xml file to http using python', 'snippet': 'print(response.read())'}
score: 0.7801318683957841
{'intent': 'send xml file to http using python', 'snippet': 'print(response.read())'}

220. input: python split a list into subsets based on pattern
score: 0.8211826140927084
{'intent': 'Python split a list into subsets based on pattern', 'snippet': '[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]'}
score: 0.8211826140927084
{'intent': 'Python split a list into subsets based on pattern', 'snippet': '[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]'}
score: 0.7084019208160486
{'intent': 'split list by condition in python', 'snippet': 'aList, bList = [[x for x in a if x[0] == i] for i in (0, 1)]'}

221. input: __init__.py
score: 0.7597843025403977
{'intent': 'import a module in python', 'snippet': '__init__.py'}
score: 0.7597843025403977
{'intent': 'Import a module in Python', 'snippet': '__init__.py'}
score: 0.7527192778456564
{'intent': 'Importing files in Python from __init__.py', 'snippet': '__init__.py'}

222. input: L = [c for c in L if c not in ['a', 'c']]
score: 0.7063675631984693
{'intent': 'else if in list comprehension in python3', 'snippet': "['A', 'b', 'C', 'D', 'E', 'F']"}
score: 0.7063675631984693
{'intent': 'else if in list comprehension in Python3', 'snippet': "['A', 'b', 'C', 'D', 'E', 'F']"}
score: 0.6816945684516477
{'intent': 'python convert list to dictionary', 'snippet': "l = ['a', 'b', 'c', 'd', 'e']"}

223. input: split dictionary of lists into list of dictionaries
score: 0.7991639151549175
{'intent': 'efficient way to convert a list to dictionary', 'snippet': "dict([x.split(':') for x in a])"}
score: 0.7931533936599414
{'intent': 'convert a list of dictionaries `listofdict into a dictionary of dictionaries', 'snippet': "dict((d['name'], d) for d in listofdict)"}
score: 0.7931533936599414
{'intent': 'convert a list of dictionaries `listofdict into a dictionary of dictionaries', 'snippet': "dict((d['name'], d) for d in listofdict)"}

224. input: checking if a variable belongs to a class in python
score: 0.8202986589743415
{'intent': 'checking if a variable belongs to a class in python', 'snippet': "'b' in list(Foo.__dict__.values())"}
score: 0.8202986589743415
{'intent': 'Checking if a variable belongs to a class in python', 'snippet': "'b' in list(Foo.__dict__.values())"}
score: 0.7010167996255308
{'intent': 'Python -- Check if object is instance of any class from a certain module', 'snippet': 'inspect.getmembers(my_module, inspect.isclass)'}

225. input: python: split string by list of separators
score: 0.8638288259279778
{'intent': 'Python: Split string by list of separators', 'snippet': "[s.strip() for s in re.split(',|;', string)]"}
score: 0.8638288259279778
{'intent': 'python: split string by list of separators', 'snippet': "[s.strip() for s in re.split(',|;', string)]"}
score: 0.8600186289289404
{'intent': 'Python: Split string by list of separators', 'snippet': "[t.strip() for s in string.split(',') for t in s.split(';')]"}

226. input: painter.restore()
score: 0.41950377726857246
{'intent': 'clear Tkinter Canvas `canvas`', 'snippet': "canvas.delete('all')"}
score: 0.41950377726857246
{'intent': 'clear tkinter canvas `canvas`', 'snippet': "canvas.delete('all')"}
score: 0.41244301820054763
{'intent': 'Python GTK+ Canvas', 'snippet': 'Gtk.main()'}

227. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

228. input: r = requests.get(url, params=payload)
score: 0.9258474669739343
{'intent': 'request http url `url` with parameters `payload`', 'snippet': 'r = requests.get(url, params=payload)'}
score: 0.8892039826683236
{'intent': 'Simple URL GET/POST function', 'snippet': 'r = requests.get(url, params=payload)'}
score: 0.8631099490726505
{'intent': 'Simple URL GET/POST function', 'snippet': 'r = requests.post(url, data=payload)'}

229. input: split a string `yas` based on tab '\t'
score: 0.8822232984500266
{'intent': "split a string `yas` based on tab '\\t'", 'snippet': "re.split('\\\\t+', yas.rstrip('\\t'))"}
score: 0.8250739618629421
{'intent': 'splitting a string based on tab in the file', 'snippet': "re.split('\\\\t+', yas.rstrip('\\t'))"}
score: 0.8250739618629421
{'intent': 'splitting a string based on tab in the file', 'snippet': "re.split('\\\\t+', yas.rstrip('\\t'))"}

230. input: pretty print pandas dataframe
score: 0.6377193752058742
{'intent': 'how to print dataframe without index', 'snippet': 'print(df.to_string(index=False))'}
score: 0.6377193752058742
{'intent': 'how to print dataframe without index', 'snippet': 'print(df.to_string(index=False))'}
score: 0.6206702849354926
{'intent': 'Print the complete string of a pandas dataframe', 'snippet': 'df.iloc[2, 0]'}

231. input: tuple(tup[0] for tup in A)
score: 0.7771647294488757
{'intent': 'get first element of each tuple in list `A`', 'snippet': '[tup[0] for tup in A]'}
score: 0.7771647294488757
{'intent': 'get first element of each tuple in list `a`', 'snippet': '[tup[0] for tup in A]'}
score: 0.7230956300576067
{'intent': 'multiple tuple to two-pair tuple in python?', 'snippet': '[(tuple[a], tuple[a + 1]) for a in range(0, len(tuple), 2)]'}

232. input: sys.modules['m']
score: 0.7542944407913821
{'intent': 'How to generate a module object from a code object in Python', 'snippet': "sys.modules['m']"}
score: 0.630903846816341
{'intent': 'load module from string in python', 'snippet': "sys.modules['mymodule'] = mymodule"}
score: 0.630903846816341
{'intent': 'Load module from string in python', 'snippet': "sys.modules['mymodule'] = mymodule"}

233. input: df.to_sql('table_name', engine)
score: 0.6805085339778123
{'intent': 'Pandas writing dataframe to other postgresql schema', 'snippet': "df.to_sql('test', engine, schema='a_schema')"}
score: 0.6574873130142684
{'intent': 'return pandas dataframe from postgresql query with sqlalchemy', 'snippet': 'df = pd.read_sql_query(\'select * from "Stat_Table"\', con=engine)'}
score: 0.6574873130142684
{'intent': 'Return Pandas dataframe from PostgreSQL query with sqlalchemy', 'snippet': 'df = pd.read_sql_query(\'select * from "Stat_Table"\', con=engine)'}

234. input: zip(*lists)
score: 0.7936481762864278
{'intent': 'How can I add the corresponding elements of several lists of numbers?', 'snippet': 'zip(*lists)'}
score: 0.787318252710385
{'intent': 'how to unzip a list of tuples into individual lists?', 'snippet': 'zip(*l)'}
score: 0.787318252710385
{'intent': 'How to unzip a list of tuples into individual lists?', 'snippet': 'zip(*l)'}

235. input: df.index.values.tolist()
score: 0.8826001025954343
{'intent': 'Get index values of Pandas DataFrame as list?', 'snippet': 'df.index.values.tolist()'}
score: 0.8826001025954343
{'intent': 'Get index values of Pandas DataFrame as list?', 'snippet': 'df.index.values.tolist()'}
score: 0.8826001025954343
{'intent': 'get index values of pandas dataframe as list?', 'snippet': 'df.index.values.tolist()'}

236. input: q = B.select().join(A).group_by(A).having(fn.Max(B.date) == B.date)
score: 0.707767021420293
{'intent': 'Fetching most recent related object for set of objects in Peewee', 'snippet': 'q = B.select().join(A).group_by(A).having(fn.Max(B.date) == B.date)'}
score: 0.6324609883798852
{'intent': 'django orm query group by multiple columns combined by max', 'snippet': "MM.objects.all().values('b', 'a').annotate(max=Max('c'))"}
score: 0.6324609883798852
{'intent': 'Django ORM query GROUP BY multiple columns combined by MAX', 'snippet': "MM.objects.all().values('b', 'a').annotate(max=Max('c'))"}

237. input: sorting numpy array on multiple columns in python
score: 0.8721133851074655
{'intent': 'sorting numpy array on multiple columns in python', 'snippet': "df.sort(['date'])"}
score: 0.8721133851074655
{'intent': 'Sorting numpy array on multiple columns in Python', 'snippet': "df.sort(['date'])"}
score: 0.8568971893821506
{'intent': 'sorting numpy array on multiple columns in python', 'snippet': 'rows_list.sort(key=operator.itemgetter(0, 1, 2))'}

238. input: name = 'b' + str(num)
score: 0.7768640055932382
{'intent': 'Making a string out of a string and an integer in Python', 'snippet': "name = 'b' + str(num)"}
score: 0.5075012260250442
{'intent': 'convert variable name to string?', 'snippet': 'get_indentifier_name_missing_function()'}
score: 0.5075012260250442
{'intent': 'Convert Variable Name to String?', 'snippet': 'get_indentifier_name_missing_function()'}

239. input: re.compile('(\\s{1,})+')
score: 0.7412363803946465
{'intent': "Is there a reason for python regex not to compile r'(\\s*)+'?", 'snippet': "re.compile('(\\\\s{1,})+')"}
score: 0.7092443624830647
{'intent': "is there a reason for python regex not to compile r'(\\s*)+'?", 'snippet': "re.compile('(\\\\s{0,})+')"}
score: 0.7092443624830647
{'intent': "Is there a reason for python regex not to compile r'(\\s*)+'?", 'snippet': "re.compile('(\\\\s{0,})+')"}

240. input: s.split('&')
score: 0.7602921934160096
{'intent': 'Python - How to cut a string in Python?', 'snippet': "s.split('&')"}
score: 0.7356372250785856
{'intent': 'string splitting in python', 'snippet': "s.split('s')"}
score: 0.7356372250785856
{'intent': 'String splitting in Python', 'snippet': "s.split('s')"}

241. input: len(df.columns)
score: 0.8288407345067716
{'intent': 'Python pandas dataframe: retrieve number of columns', 'snippet': 'len(df.columns)'}
score: 0.7934245721337579
{'intent': 'python pandas dataframe: retrieve number of columns', 'snippet': 'len(df.index)'}
score: 0.7934245721337579
{'intent': 'Python pandas dataframe: retrieve number of columns', 'snippet': 'len(df.index)'}

242. input: f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break
score: 0.856486308126451
{'intent': 'list all files of a directory `mypath`', 'snippet': 'for (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)'}
score: 0.776219757064627
{'intent': 'loop over files', 'snippet': 'for (root, dirs, filenames) in os.walk(source):\n    for f in filenames:\n        pass'}
score: 0.6994632458604169
{'intent': 'list all files in directory "."', 'snippet': "for (dirname, dirnames, filenames) in os.walk('.'):\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n    for filename in filenames:\n        pass"}

243. input: Thread(target=fct).start()
score: 0.842025028622304
{'intent': 'Spawning a thread in python', 'snippet': 'Thread(target=fct).start()'}
score: 0.5529134750232988
{'intent': 'Spawning a thread in python', 'snippet': 't.start()'}
score: 0.5529134750232988
{'intent': 'spawning a thread in python', 'snippet': 't.start()'}

244. input: parallel running of several jobs in a python script
score: 0.9000560168632603
{'intent': 'Parallel running of several jobs in a python script', 'snippet': 'p.wait()'}
score: 0.7006922174198613
{'intent': 'python: how can i run python functions in parallel?', 'snippet': 'p.start()'}
score: 0.7006922174198613
{'intent': 'Python: How can I run python functions in parallel?', 'snippet': 'p.start()'}

245. input: print(sorted(L, key=lambda x: int(x.split('.')[2])))
score: 0.9072413449757151
{'intent': "sort a list `L` by number after second '.'", 'snippet': "print(sorted(L, key=lambda x: int(x.split('.')[2])))"}
score: 0.8957067262663774
{'intent': 'specific sort a list of numbers separated by dots', 'snippet': "print(sorted(L, key=lambda x: int(x.split('.')[2])))"}
score: 0.8957067262663774
{'intent': 'Specific sort a list of numbers separated by dots', 'snippet': "print(sorted(L, key=lambda x: int(x.split('.')[2])))"}

246. input: check if key 'c' in `d`
score: 0.9145106831705209
{'intent': "Check if key 'c' in `d`", 'snippet': "('c' in d)"}
score: 0.8250461648227263
{'intent': "Check if key 'a' in `d`", 'snippet': "('a' in d)"}
score: 0.8250461648227263
{'intent': "check if key 'a' in `d`", 'snippet': "('a' in d)"}

247. input: how to write a only integers numpy 2d array on a txt file
score: 0.8476254421632672
{'intent': 'how to write a only integers numpy 2d array on a txt file', 'snippet': "np.savetxt(fname='newPicksData.txt', X=new_picks.astype(int), fmt='%i')"}
score: 0.8476254421632672
{'intent': 'How to write a only integers numpy 2D array on a txt file', 'snippet': "np.savetxt(fname='newPicksData.txt', X=new_picks.astype(int), fmt='%i')"}
score: 0.7085723681638809
{'intent': 'Write multiple numpy arrays to file', 'snippet': "np.savetxt('test.txt', data)"}

248. input: [x for x, y, z in G]
score: 0.5268198843826823
{'intent': 'get the first element of each tuple from a list of tuples `g`', 'snippet': '[x[0] for x in G]'}
score: 0.5268198843826823
{'intent': 'get the first element of each tuple from a list of tuples `G`', 'snippet': '[x[0] for x in G]'}
score: 0.48998425957090885
{'intent': 'get a list of booleans `z` that shows wether the corresponding items in list `x` and `y` are equal', 'snippet': 'z = [(i == j) for i, j in zip(x, y)]'}

249. input: how do i slice a string every 3 indices?
score: 0.9040335204820829
{'intent': 'How do I slice a string every 3 indices?', 'snippet': "['str', 'ing', 'Str', 'ing', 'Str', 'ing', 'Str', 'ing']"}
score: 0.8566996437772861
{'intent': 'how do i slice a string every 3 indices?', 'snippet': 'return [str[start:start + num] for start in range(0, len(str), num)]'}
score: 0.7232897565432101
{'intent': 'Python string slice indices - slice to end of string', 'snippet': 'word[1:]'}

250. input: changing the length of axis lines in matplotlib
score: 0.8079999975051144
{'intent': 'how to set the unit length of axis in matplotlib?', 'snippet': 'plt.show()'}
score: 0.8079999975051144
{'intent': 'How to set the unit length of axis in matplotlib?', 'snippet': 'plt.show()'}
score: 0.8079999975051144
{'intent': 'How to set the unit length of axis in matplotlib?', 'snippet': 'plt.show()'}

251. input: how do i merge a list of dicts into a single dict?
score: 0.893746377716204
{'intent': 'How do I merge a list of dicts into a single dict?', 'snippet': '{k: v for d in L for k, v in list(d.items())}'}
score: 0.893746377716204
{'intent': 'How do I merge a list of dicts into a single dict?', 'snippet': '{k: v for d in L for k, v in list(d.items())}'}
score: 0.8930921067683213
{'intent': 'How do I merge a list of dicts into a single dict?', 'snippet': 'dict(j for i in L for j in list(i.items()))'}

252. input: [[4], [5, 5], [6, 6, 6]]
score: 0.6639637646490912
{'intent': 'Splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6], [], []]'}
score: 0.6639637646490912
{'intent': 'splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6], [], []]'}
score: 0.6597377493670585
{'intent': 'Splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6]]'}

253. input: how to check version of python package if no __version__ variable is set
score: 0.8647165580892777
{'intent': 'How to check version of python package if no __version__ variable is set', 'snippet': "pip.main(['show', 'pyodbc'])"}
score: 0.7649630711182727
{'intent': 'check python version', 'snippet': 'sys.version_info'}
score: 0.7649630711182727
{'intent': 'check python version', 'snippet': 'sys.version_info'}

254. input: os.path.basename('/folderA/folderB/folderC/folderD')
score: 0.705393988206245
{'intent': 'elegant way to take basename of directory in python?', 'snippet': "os.path.dirname(os.path.join(output_dir, ''))"}
score: 0.705393988206245
{'intent': 'Elegant way to take basename of directory in Python?', 'snippet': "os.path.dirname(os.path.join(output_dir, ''))"}
score: 0.6913846769743972
{'intent': 'How to get only the last part of a path in Python?', 'snippet': "os.path.basename('/folderA/folderB/folderC/folderD')"}

255. input: """""".join(chr(i) for i in L)
score: 0.7036366084493766
{'intent': 'convert a list `L` of ascii values to a string', 'snippet': '"""""".join(chr(i) for i in L)'}
score: 0.7036366084493766
{'intent': 'convert a list `l` of ascii values to a string', 'snippet': '"""""".join(chr(i) for i in L)'}
score: 0.609104215714888
{'intent': 'How to join list of strings?', 'snippet': '""" """.join(L)'}

256. input: ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
score: 0.7606206274980567
{'intent': 'how to create a ssh tunnel using python and paramiko?', 'snippet': 'ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())'}
score: 0.7606206274980567
{'intent': 'How to create a ssh tunnel using python and paramiko?', 'snippet': 'ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())'}
score: 0.7346257455590248
{'intent': 'x11 forwarding with paramiko', 'snippet': 'ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())'}

257. input: redis_conn = redis.Redis(connection_pool=redis_pool)
score: 0.9397264535767451
{'intent': 'How do I properly use connection pools in redis?', 'snippet': 'redis_conn = redis.Redis(connection_pool=redis_pool)'}
score: 0.4702702253663462
{'intent': 'how to use sadd with multiple elements in redis using python api?', 'snippet': "r.sadd('a', 1, 2, 3)"}
score: 0.4702702253663462
{'intent': 'How to use sadd with multiple elements in Redis using Python API?', 'snippet': "r.sadd('a', 1, 2, 3)"}

258. input: A = [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0], [0], [0]]]
score: 0.6781922237789846
{'intent': 'Converting a 3D List to a 3D NumPy array', 'snippet': 'A = [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0], [0], [0]]]'}
score: 0.6302375811129455
{'intent': 'how to initialise a 2d array in python?', 'snippet': '[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]'}
score: 0.6302375811129455
{'intent': 'How to initialise a 2D array in Python?', 'snippet': '[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]'}

259. input: int('55063.000000')
score: 0.7638983336774738
{'intent': "ValueError: invalid literal for int() with base 10: ''", 'snippet': "int('55063.000000')"}
score: 0.7080605050688773
{'intent': "ValueError: invalid literal for int() with base 10: ''", 'snippet': "float('55063.000000')"}
score: 0.6020448959678459
{'intent': "Python: invalid literal for int() with base 10: '808.666666666667'", 'snippet': "int(float('808.666666666667'))"}

260. input: how to get the context of a search in beautifulsoup?
score: 0.8612626219682398
{'intent': 'how to get the context of a search in BeautifulSoup?', 'snippet': "k = soup.find(text=re.compile('My keywords')).parent.text"}
score: 0.8612626219682398
{'intent': 'how to get the context of a search in BeautifulSoup?', 'snippet': "k = soup.find(text=re.compile('My keywords')).parent.text"}
score: 0.7933653981344915
{'intent': "get the context of a search by keyword 'My keywords' in beautifulsoup `soup`", 'snippet': "k = soup.find(text=re.compile('My keywords')).parent.text"}

261. input: df.groupby['month'].Category.apply(pd.value_counts)
score: 0.8076261081574985
{'intent': 'pandas : use groupby on each element of list', 'snippet': "df['categories'].apply(pd.Series).stack().value_counts()"}
score: 0.8076261081574985
{'intent': 'Pandas : Use groupby on each element of list', 'snippet': "df['categories'].apply(pd.Series).stack().value_counts()"}
score: 0.7215481360294579
{'intent': 'Reshape DataFrame categorical values to rows', 'snippet': "pd.melt(df).groupby(['variable', 'value'])['value'].count().unstack().T"}

262. input: print(random.choice(words))
score: 0.9119126225552268
{'intent': "return a random word from a word list 'words'", 'snippet': 'print(random.choice(words))'}
score: 0.9119126225552268
{'intent': "return a random word from a word list 'words'", 'snippet': 'print(random.choice(words))'}
score: 0.8831474375382922
{'intent': 'Return a random word from a word list in python', 'snippet': 'print(random.choice(words))'}

263. input: count = sum(len(v) for v in d.values())
score: 0.8117333158511579
{'intent': 'Python count items in dict value that is a list', 'snippet': 'count = sum(len(v) for v in d.values())'}
score: 0.6919531744547162
{'intent': 'Python 2.7 Counting number of dictionary items with given value', 'snippet': 'sum(d.values())'}
score: 0.6919531744547162
{'intent': 'python 2.7 counting number of dictionary items with given value', 'snippet': 'sum(d.values())'}

264. input: how to decode unicode raw literals to readable string?
score: 0.8983479086319537
{'intent': 'How to decode unicode raw literals to readable string?', 'snippet': "s.decode('unicode_escape')"}
score: 0.8983479086319537
{'intent': 'How to decode unicode raw literals to readable string?', 'snippet': "s.decode('unicode_escape')"}
score: 0.7917114142181084
{'intent': 'decode unicode string `s` into a readable unicode literal', 'snippet': "s.decode('unicode_escape')"}

265. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

266. input: how to access the specific locations of an integer list in python?
score: 0.8450442564347718
{'intent': 'How to access the specific locations of an integer list in Python?', 'snippet': 'operator.itemgetter(*b)(a)'}
score: 0.7063157508959077
{'intent': 'how can i search a list in python and print at which location(s) in that list my criteria is located?', 'snippet': 'newNums = [i for i, x in enumerate(nums) if x == 12]'}
score: 0.6735553161757856
{'intent': 'Find/extract a sequence of integers within a list in python', 'snippet': '[1, 2, 3, 4]'}

267. input: text_file.close()
score: 0.8161323083967642
{'intent': 'Writing to a file in a for loop', 'snippet': 'text_file.close()'}
score: 0.8158053082668788
{'intent': 'Python Print String To Text File', 'snippet': 'text_file.close()'}
score: 0.7211387103778137
{'intent': 'how to read the entire file into a list in python?', 'snippet': 'text_file.close()'}

268. input: data.loc[0, 'transaction_amount']
score: 0.6923626289951298
{'intent': 'Importing financial data into Python Pandas using read_csv', 'snippet': "data.loc[0, 'transaction_amount']"}
score: 0.5350049983317848
{'intent': 'Python Print String To Text File', 'snippet': "text_file.write('Purchase Amount: {0}'.format(TotalAmount))"}
score: 0.5350049983317848
{'intent': 'python print string to text file', 'snippet': "text_file.write('Purchase Amount: {0}'.format(TotalAmount))"}

269. input: myDict = {key: val for key, val in list(myDict.items()) if val != 42}
score: 0.8849713983932281
{'intent': "remove items from dictionary `myDict` if the item's value `val` is equal to 42", 'snippet': 'myDict = {key: val for key, val in list(myDict.items()) if val != 42}'}
score: 0.8849713983932281
{'intent': "remove items from dictionary `mydict` if the item's value `val` is equal to 42", 'snippet': 'myDict = {key: val for key, val in list(myDict.items()) if val != 42}'}
score: 0.8655847074105112
{'intent': 'remove all items from a dictionary `mydict` whose values are `42`', 'snippet': '{key: val for key, val in list(myDict.items()) if val != 42}'}

270. input: plt.savefig('example.pdf')
score: 0.7114535799368762
{'intent': "Save plot `plt` as png file 'filename.png'", 'snippet': "plt.savefig('filename.png')"}
score: 0.6740231181332539
{'intent': "save plot `plt` as svg file 'test.svg'", 'snippet': "plt.savefig('test.svg')"}
score: 0.6740231181332539
{'intent': "Save plot `plt` as svg file 'test.svg'", 'snippet': "plt.savefig('test.svg')"}

271. input: len([x for x in s if x['success']])
score: 0.7026595909401838
{'intent': 'get count of values associated with key in dict python', 'snippet': "len([x for x in s if x['success']])"}
score: 0.6833743332149185
{'intent': 'get count of values associated with key in dict python', 'snippet': "len([x for x in s if x.get('success', False)])"}
score: 0.6833743332149185
{'intent': 'get count of values associated with key in dict python', 'snippet': "len([x for x in s if x.get('success', False)])"}

272. input: a[:, (0)][mask]
score: 0.5484725626310458
{'intent': 'get the non-masked values of array `m`', 'snippet': 'm[~m.mask]'}
score: 0.5450130357319503
{'intent': 'Intersection of two numpy arrays of different dimensions by column', 'snippet': 'a[:, (0)][mask]'}
score: 0.5281311842382863
{'intent': 'mask out specific values from an array', 'snippet': 'np.in1d(a, [2, 3]).reshape(a.shape)'}

273. input: python check if all of the following items is in a list
score: 0.8500001251480983
{'intent': 'python check if all of the following items is in a list', 'snippet': "set(l).issuperset(set(['a', 'b']))"}
score: 0.8500001251480983
{'intent': 'Python Check if all of the following items is in a list', 'snippet': "set(l).issuperset(set(['a', 'b']))"}
score: 0.8393536008588945
{'intent': 'Python Check if all of the following items is in a list', 'snippet': "set(['a', 'b']).issubset(set(l))"}

274. input: self.assertEqual(4, 2 + 2)
score: 0.6260623981206356
{'intent': 'For loop in unittest', 'snippet': "self.assertEqual(iline, 'it is a test!')"}
score: 0.6260623981206356
{'intent': 'for loop in unittest', 'snippet': "self.assertEqual(iline, 'it is a test!')"}
score: 0.5499871215541327
{'intent': 'how to assert output with nosetest/unittest in python?', 'snippet': "self.assertEqual(output, 'hello world!')"}

275. input: data = np.concatenate((im, indices), axis=-1)
score: 0.7019256415223052
{'intent': 'Combining NumPy arrays', 'snippet': 'b = np.concatenate((a, a), axis=0)'}
score: 0.7019256415223052
{'intent': 'combining numpy arrays', 'snippet': 'b = np.concatenate((a, a), axis=0)'}
score: 0.7019256415223052
{'intent': 'Combining NumPy arrays', 'snippet': 'b = np.concatenate((a, a), axis=0)'}

276. input: is it possible to take an ordered "slice" of a dictionary in python based on a list of keys?
score: 0.9508788019493062
{'intent': 'Is it possible to take an ordered "slice" of a dictionary in Python based on a list of keys?', 'snippet': 'map(my_dictionary.get, my_list)'}
score: 0.9508788019493062
{'intent': 'is it possible to take an ordered "slice" of a dictionary in python based on a list of keys?', 'snippet': 'map(my_dictionary.get, my_list)'}
score: 0.9451519252102702
{'intent': 'Is it possible to take an ordered "slice" of a dictionary in Python based on a list of keys?', 'snippet': 'res = [(x, my_dictionary[x]) for x in my_list]'}

277. input: python: alter elements of a list
score: 0.7476407626221062
{'intent': 'replacing particular elements in a list', 'snippet': "mylist = [('XXX' if v == 'abc' else v) for v in mylist]"}
score: 0.7460963099035223
{'intent': 'Python: Alter elements of a list', 'snippet': 'bool_list = [False] * len(bool_list)'}
score: 0.7418456187758323
{'intent': 'replace values in list using python', 'snippet': 'new_items = [(x if x % 2 else None) for x in items]'}

278. input: pickle.loads(s)
score: 0.694980258873018
{'intent': 'python pickle/unpickle a list to/from a file', 'snippet': "pickle.load('afile')"}
score: 0.694980258873018
{'intent': 'Python pickle/unpickle a list to/from a file', 'snippet': "pickle.load('afile')"}
score: 0.6465319315901984
{'intent': "python pickle/unpickle a list to/from a file 'afile'", 'snippet': "pickle.load(open('afile', 'rb'))"}

279. input: combine or join numpy arrays
score: 0.7640443364311507
{'intent': 'Combine or join numpy arrays', 'snippet': '[(0, 0, 1, 1), (0, 1, 0, 1)]'}
score: 0.7573846269654452
{'intent': "concatenating two one-dimensional numpy arrays 'a' and 'b'.", 'snippet': 'numpy.concatenate([a, b])'}
score: 0.7573846269654452
{'intent': "Concatenating two one-dimensional NumPy arrays 'a' and 'b'.", 'snippet': 'numpy.concatenate([a, b])'}

280. input: dir()
score: 0.49472088793532104
{'intent': 'list all files of a directory `mypath`', 'snippet': 'for (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)'}
score: 0.4940410817608708
{'intent': 'Get all object attributes', 'snippet': 'dir()'}
score: 0.4940410817608708
{'intent': 'Get all object attributes', 'snippet': 'dir()'}

281. input: f.write(str(yEst) + '\n')
score: 0.7630660710548798
{'intent': 'Write data to a file in Python', 'snippet': "f.write(str(yEst) + '\\n')"}
score: 0.6502305554033614
{'intent': "writing string 'text to write\\n' to file `f`", 'snippet': "f.write('text to write\\n')"}
score: 0.6502305554033614
{'intent': "writing string 'text to write\\n' to file `f`", 'snippet': "f.write('text to write\\n')"}

282. input: python - replace the boolean value of a list with the values from two different lists
score: 0.8047313275856924
{'intent': 'python - replace the boolean value of a list with the values from two different lists', 'snippet': "['BMW', 'VW', 'b', 'Volvo', 'c']"}
score: 0.7283887764999007
{'intent': 'replace values in list using python', 'snippet': 'new_items = [(x if x % 2 else None) for x in items]'}
score: 0.7283887764999007
{'intent': 'Replace values in list using Python', 'snippet': 'new_items = [(x if x % 2 else None) for x in items]'}

283. input: delete letters from string
score: 0.6985864879383556
{'intent': 'Delete letters from string', 'snippet': '"""""".join(filter(str.isdigit, \'12454v\'))'}
score: 0.6985864879383556
{'intent': 'Delete letters from string', 'snippet': '"""""".join(filter(str.isdigit, \'12454v\'))'}
score: 0.6735888344796567
{'intent': "delete letters from string '12454v'", 'snippet': '"""""".join(filter(str.isdigit, \'12454v\'))'}

284. input: a = numpy.fromfile('filename', dtype=numpy.float32)
score: 0.8586783886110995
{'intent': "Construct an array with data type float32 `a` from data in binary file 'filename'", 'snippet': "a = numpy.fromfile('filename', dtype=numpy.float32)"}
score: 0.7852926303392793
{'intent': 'numpy: efficiently reading a large array', 'snippet': "a = numpy.fromfile('filename', dtype=numpy.float32)"}
score: 0.7852926303392793
{'intent': 'numpy: efficiently reading a large array', 'snippet': "a = numpy.fromfile('filename', dtype=numpy.float32)"}

285. input: ax.axes.get_yaxis().set_visible(False)
score: 0.6712074576865593
{'intent': 'Python/Matplotlib - Is there a way to make a discontinuous axis?', 'snippet': "ax2.spines['left'].set_visible(False)"}
score: 0.6712074576865593
{'intent': 'python/matplotlib - is there a way to make a discontinuous axis?', 'snippet': "ax2.spines['left'].set_visible(False)"}
score: 0.6653589858384614
{'intent': 'Python/Matplotlib - Is there a way to make a discontinuous axis?', 'snippet': "ax.spines['right'].set_visible(False)"}

286. input: df.eval('("yes" == "yes")')
score: 0.7862655490418705
{'intent': "Pandas query function with subexpressions that don't include a column name", 'snippet': 'df.eval(\'("yes" == "yes")\')'}
score: 0.5888765080860341
{'intent': 'Is there a simple way to change a column of yes/no to 1/0 in a Pandas dataframe?', 'snippet': "pd.Series(np.where(sample.housing.values == 'yes', 1, 0), sample.index)"}
score: 0.5888765080860341
{'intent': 'is there a simple way to change a column of yes/no to 1/0 in a pandas dataframe?', 'snippet': "pd.Series(np.where(sample.housing.values == 'yes', 1, 0), sample.index)"}

287. input: plt.savefig('confusion_matrix.png', format='png')
score: 0.806729033066996
{'intent': "Save plot `plt` as png file 'filename.png'", 'snippet': "plt.savefig('filename.png')"}
score: 0.7859911212903283
{'intent': 'How to plot confusion matrix with string axis rather than integer in python', 'snippet': "plt.savefig('confusion_matrix.png', format='png')"}
score: 0.7089290936144027
{'intent': 'specifying and saving a figure with exact size in pixels', 'snippet': "plt.savefig('myfig.png', dpi=1000)"}

288. input: replace keys in a dictionary
score: 0.7258239918266531
{'intent': 'Copy keys to a new dictionary (Python)', 'snippet': 'set(d.keys())'}
score: 0.7258239918266531
{'intent': 'copy keys to a new dictionary (python)', 'snippet': 'set(d.keys())'}
score: 0.7031653051416255
{'intent': 'easiest way to replace a string using a dictionary of replacements?', 'snippet': "pattern = re.compile('|'.join(list(d.keys())))"}

289. input: reading hex to double-precision float python
score: 0.85204365730195
{'intent': 'Reading hex to double-precision float python', 'snippet': "struct.unpack('d', '4081637ef7d0424a'.decode('hex'))"}
score: 0.8267982436560996
{'intent': 'reading hex to double-precision float python', 'snippet': "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"}
score: 0.8267982436560996
{'intent': 'Reading hex to double-precision float python', 'snippet': "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"}

290. input: df['C'] = df.apply(lambda row: row['A'] + row['B'], axis=1)
score: 0.8930461721537323
{'intent': 'Make new column in Panda dataframe by adding values from other columns', 'snippet': "df['C'] = df.apply(lambda row: row['A'] + row['B'], axis=1)"}
score: 0.7742944375194402
{'intent': "use operations like max/min within a row to a dataframe 'd' in pandas", 'snippet': "d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)"}
score: 0.7742944375194402
{'intent': "use operations like max/min within a row to a dataframe 'd' in pandas", 'snippet': "d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)"}

291. input: python decimals format
score: 0.8218277183637737
{'intent': 'Python Decimals format', 'snippet': '"""{0:.3g}""".format(num)'}
score: 0.8218277183637737
{'intent': 'Python Decimals format', 'snippet': '"""{0:.3g}""".format(num)'}
score: 0.8072055316288704
{'intent': 'Python Decimals format', 'snippet': "print('{0} --> {1}'.format(num, result))"}

292. input: remove the newline character in a list read from a file
score: 0.7005882390321668
{'intent': 'Remove the newline character in a list read from a file', 'snippet': "grades.append(lists[i].rstrip('\\n').split(','))"}
score: 0.6886382113818792
{'intent': 'read a file line by line into a list', 'snippet': 'with open(fname) as f:\n    content = f.readlines()'}
score: 0.6872111270292802
{'intent': 'Reading a file without newlines', 'snippet': "[line.rstrip('\\n') for line in file]"}

293. input: sorting python list based on the length of the string
score: 0.8754186120493399
{'intent': 'Sorting Python list based on the length of the string', 'snippet': 'print(sorted(xs, key=len))'}
score: 0.8754186120493399
{'intent': 'sorting python list based on the length of the string', 'snippet': 'print(sorted(xs, key=len))'}
score: 0.8754186120493399
{'intent': 'Sorting Python list based on the length of the string', 'snippet': 'print(sorted(xs, key=len))'}

294. input: mylist.sort(key=lambda d: (d['weight'], d['factor']))
score: 0.861380522011999
{'intent': "ordering a list of dictionaries `mylist` by elements 'weight' and 'factor'", 'snippet': "mylist.sort(key=lambda d: (d['weight'], d['factor']))"}
score: 0.861380522011999
{'intent': "ordering a list of dictionaries `mylist` by elements 'weight' and 'factor'", 'snippet': "mylist.sort(key=lambda d: (d['weight'], d['factor']))"}
score: 0.824923917257411
{'intent': 'Ordering a list of dictionaries in python', 'snippet': "mylist.sort(key=lambda d: (d['weight'], d['factor']))"}

295. input: send data from python to javascript (json)
score: 0.6814186988211675
{'intent': 'Hacking JavaScript Array Into JSON With Python', 'snippet': 'print(json.dumps(result))'}
score: 0.6814186988211675
{'intent': 'hacking javascript array into json with python', 'snippet': 'print(json.dumps(result))'}
score: 0.6721262680914868
{'intent': 'Sending JSON request with Python', 'snippet': 'json.dumps(data).replace(\'"\', \'\')'}

296. input: is it a good idea to call a staticmethod in python on self rather than the classname itself
score: 0.9250568010981064
{'intent': 'Is it a good idea to call a staticmethod in python on self rather than the classname itself', 'snippet': 'self._bar()'}
score: 0.6859038949565759
{'intent': 'static properties in python', 'snippet': 'MyClass.__dict__'}
score: 0.6687837377628603
{'intent': 'static properties in python', 'snippet': 'mc = MyClass()'}

297. input: np.arange(len(df.columns)) // 2
score: 0.7475192483208085
{'intent': 'Sum of Every Two Columns in Pandas dataframe', 'snippet': 'np.arange(len(df.columns)) // 2'}
score: 0.6881432054252092
{'intent': 'create a dataframe `d` filled with zeros with indices from 0 to length of `data` and column names from `feature_list`', 'snippet': 'd = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)'}
score: 0.6881432054252092
{'intent': 'create a dataframe `d` filled with zeros with indices from 0 to length of `data` and column names from `feature_list`', 'snippet': 'd = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)'}

298. input: re.match('.*?([0-9]+)$', s).group(1)
score: 0.7850938540693417
{'intent': 'python regex: get end digits from a string', 'snippet': "re.match('.*?([0-9]+)$', s).group(1)"}
score: 0.7213259456773764
{'intent': 'How to re.sub() a optional matching group using regex in Python?', 'snippet': "re.sub('url((?:#[0-9]+)?)', 'new_url\\\\1', test2)"}
score: 0.7213259456773764
{'intent': 'how to re.sub() a optional matching group using regex in python?', 'snippet': "re.sub('url((?:#[0-9]+)?)', 'new_url\\\\1', test2)"}

299. input: send a non-ascii post request in python?
score: 0.8789891122105316
{'intent': 'Send a non-ASCII POST request in Python?', 'snippet': "print(prda.decode('utf-8'))"}
score: 0.7362134962800877
{'intent': 'python requests encoding post data', 'snippet': "headers = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}"}
score: 0.7362134962800877
{'intent': 'Python Requests encoding POST data', 'snippet': "headers = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}"}

300. input: for (letter, number) in list(d.items()):
    pass
score: 0.8009425243566509
{'intent': 'Iterating over dictionaries using for loops', 'snippet': 'for (letter, number) in list(d.items()):\n    pass'}
score: 0.8009425243566509
{'intent': 'Iterating over dictionaries using for loops', 'snippet': 'for (letter, number) in list(d.items()):\n    pass'}
score: 0.8009425243566509
{'intent': 'Iterating over dictionaries using for loops', 'snippet': 'for (letter, number) in list(d.items()):\n    pass'}

301. input: add tuple to a list of tuples
score: 0.7909016220334577
{'intent': 'Add tuple to a list of tuples', 'snippet': 'c = [tuple(x + b[i] for i, x in enumerate(y)) for y in a]'}
score: 0.778930008104811
{'intent': 'Convert tuple to list', 'snippet': 'tuple(l)'}
score: 0.775090322837904
{'intent': 'convert list to tuple in python', 'snippet': 'tuple(l)'}

302. input: can i sort text by its numeric value in python?
score: 0.915785443556196
{'intent': 'Can I sort text by its numeric value in Python?', 'snippet': "[('0', 10), ('1', 23), ('2.0', 321), ('2.1', 3231), ('3', 3), ('12.1.1', 2)]"}
score: 0.8586325997615063
{'intent': 'can i sort text by its numeric value in python?', 'snippet': "sorted(list(mydict.keys()), key=lambda a: map(int, a.split('.')))"}
score: 0.8586325997615063
{'intent': 'Can I sort text by its numeric value in Python?', 'snippet': "sorted(list(mydict.keys()), key=lambda a: map(int, a.split('.')))"}

303. input: python: how do i convert from binary to base 64 and back?
score: 0.9225086966401586
{'intent': 'Python: How do I convert from binary to base 64 and back?', 'snippet': "bin(int(s.decode('base64')))"}
score: 0.8684600314562771
{'intent': 'python: how do i convert from binary to base 64 and back?', 'snippet': "print(struct.pack('I', val).encode('base64'))"}
score: 0.7159380864886663
{'intent': 'using python to convert integer to binary', 'snippet': 'bin(0)'}

304. input: print(link.get('href'))
score: 0.8835772225804983
{'intent': 'How can I get href links from HTML using Python?', 'snippet': "print(link.get('href'))"}
score: 0.8835772225804983
{'intent': 'how can i get href links from html using python?', 'snippet': "print(link.get('href'))"}
score: 0.6861444203684061
{'intent': 'How can I get href links from HTML using Python?', 'snippet': "soup.findAll('a', attrs={'href': re.compile('^http://')})"}

305. input: downloaded filename with google app engine blobstore
score: 0.6476467031361448
{'intent': 'google app engine python download file', 'snippet': "self.response.headers['Content-Disposition'] = 'attachment; filename=fname.csv'"}
score: 0.6476467031361448
{'intent': 'google app engine python download file', 'snippet': "self.response.headers['Content-Disposition'] = 'attachment; filename=fname.csv'"}
score: 0.6246513190940615
{'intent': 'Upload files to Google cloud storage from appengine app', 'snippet': "upload_url = blobstore.create_upload_url('/upload', gs_bucket_name='my_bucket')"}

306. input: how to save an image using django imagefield?
score: 0.9713583013197116
{'intent': 'how to save an image using django imagefield?', 'snippet': 'img.save()'}
score: 0.9713583013197116
{'intent': 'How to save an image using django imageField?', 'snippet': 'img.save()'}
score: 0.9432735744435613
{'intent': 'How to save an image using django imageField?', 'snippet': "request.FILES['image']"}

307. input: last_index = len(list1) - 1
score: 0.9412068257559218
{'intent': 'How to obtain the last index of a list?', 'snippet': 'last_index = len(list1) - 1'}
score: 0.7766829576953362
{'intent': 'assign the index of the last occurence of `x` in list `s` to the variable `last`', 'snippet': 'last = len(s) - s[::-1].index(x) - 1'}
score: 0.7766829576953362
{'intent': 'assign the index of the last occurence of `x` in list `s` to the variable `last`', 'snippet': 'last = len(s) - s[::-1].index(x) - 1'}

308. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

309. input: get the sum of each second value from a list of tuple `structure`
score: 0.9402470377494782
{'intent': 'get the sum of each second value from a list of tuple `structure`', 'snippet': 'sum(x[1] for x in structure)'}
score: 0.860023625003059
{'intent': 'Sum the second value of each tuple in a list', 'snippet': 'sum(x[1] for x in structure)'}
score: 0.860023625003059
{'intent': 'Sum the second value of each tuple in a list', 'snippet': 'sum(x[1] for x in structure)'}

310. input: how to get http headers in flask?
score: 0.954475943905271
{'intent': 'How to get http headers in flask?', 'snippet': "request.headers['your-header-name']"}
score: 0.954475943905271
{'intent': 'how to get http headers in flask?', 'snippet': "request.headers['your-header-name']"}
score: 0.954475943905271
{'intent': 'How to get http headers in flask?', 'snippet': "request.headers['your-header-name']"}

311. input: how to initialize a two-dimensional array in python?
score: 0.8551487744512157
{'intent': 'how to initialise a 2d array in python?', 'snippet': '[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]'}
score: 0.8551487744512157
{'intent': 'How to initialise a 2D array in Python?', 'snippet': '[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]'}
score: 0.8408519385510664
{'intent': 'how to initialize a two-dimensional array in python?', 'snippet': '[[Foo() for x in range(10)] for y in range(10)]'}

312. input: how to extract frequency associated with fft values in python
score: 0.8739498117473499
{'intent': 'how to extract frequency associated with fft values in python', 'snippet': 'numpy.fft.fft([1, 2, 1, 0, 1, 2, 1, 0])'}
score: 0.5573014233983605
{'intent': 'how to get the fft of a numpy array to work?', 'snippet': 'np.fft.fft(xfiltered)'}
score: 0.5031048723764376
{'intent': 'how can i extract all values from a dictionary in python?', 'snippet': 'list(d.values())'}

313. input: how to annotate heatmap with text in matplotlib?
score: 0.9494726558865163
{'intent': 'how to annotate heatmap with text in matplotlib?', 'snippet': 'plt.show()'}
score: 0.7666455628831292
{'intent': 'Generate a heatmap in MatPlotLib using a scatter data set', 'snippet': 'plt.show()'}
score: 0.7666455628831292
{'intent': 'generate a heatmap in matplotlib using a scatter data set', 'snippet': 'plt.show()'}

314. input: read file "file.txt" line by line into a list `array`
score: 0.7485099045374715
{'intent': 'read a file line by line into a list', 'snippet': 'with open(fname) as f:\n    content = f.readlines()'}
score: 0.746278050465534
{'intent': 'read a file line by line into a list', 'snippet': "with open('filename') as f:\n    lines = f.readlines()"}
score: 0.7419377450679507
{'intent': "read file 'filename' line by line into a list `lines`", 'snippet': "with open('filename') as f:\n    lines = f.readlines()"}

315. input: pandas: create single size & sum columns after group by multiple columns
score: 0.867793491394195
{'intent': 'pandas: create single size & sum columns after group by multiple columns', 'snippet': "df.xs('size', axis=1, level=1)"}
score: 0.7454516244955511
{'intent': 'combining rows in pandas', 'snippet': 'df.groupby(df.index).sum()'}
score: 0.7454516244955511
{'intent': 'Combining rows in pandas', 'snippet': 'df.groupby(df.index).sum()'}

316. input: ax.scatter(XS, YS, ZS)
score: 0.6488843537860535
{'intent': 'Matplotlib 3D Scatter Plot with Colorbar', 'snippet': 'ax.scatter(xs, ys, zs, c=cs, marker=m)'}
score: 0.6488843537860535
{'intent': 'matplotlib 3d scatter plot with colorbar', 'snippet': 'ax.scatter(xs, ys, zs, c=cs, marker=m)'}
score: 0.6427866747406867
{'intent': 'matplotlib 3d scatter plot with colorbar', 'snippet': 'p = ax.scatter(xs, ys, zs, c=cs, marker=m)'}

317. input: lambda x, y: x + y
score: 0.8644171076270264
{'intent': 'Python lambda function', 'snippet': 'lambda x, y: x + y'}
score: 0.8644171076270264
{'intent': 'Python lambda function', 'snippet': 'lambda x, y: x + y'}
score: 0.8350467491946505
{'intent': 'lambda function that adds two operands', 'snippet': 'lambda x, y: x + y'}

318. input: how to write a twisted server that is also a client?
score: 0.7234261828145436
{'intent': 'Twisted server for multiple clients', 'snippet': 'reactor.run()'}
score: 0.7234261828145436
{'intent': 'twisted server for multiple clients', 'snippet': 'reactor.run()'}
score: 0.6844546095841622
{'intent': 'how to send the content in a list from server in twisted python?', 'snippet': 'client.transport.write(message)'}

319. input: get a list `cleaned` that contains all non-empty elements in list `your_list`
score: 0.9162976913108366
{'intent': 'get a list `cleaned` that contains all non-empty elements in list `your_list`', 'snippet': 'cleaned = [x for x in your_list if x]'}
score: 0.7378763793538596
{'intent': 'How to remove empty string in a list?', 'snippet': 'cleaned = [x for x in your_list if x]'}
score: 0.7378763793538596
{'intent': 'how to remove empty string in a list?', 'snippet': 'cleaned = [x for x in your_list if x]'}

320. input: faster way to search strings in big file with python
score: 0.6276810836247103
{'intent': 'fastest way to store large files in python', 'snippet': "gzip.GzipFile('output file name', 'wb')"}
score: 0.6276810836247103
{'intent': 'Fastest way to store large files in Python', 'snippet': "gzip.GzipFile('output file name', 'wb')"}
score: 0.5979896221288269
{'intent': 'fast string within list searching', 'snippet': "[['scorch', 'scorching'], ['dump', 'dumpster', 'dumpsters']]"}

321. input: f.writerow(['pk', 'model', 'codename', 'name', 'content_type'])
score: 0.660831862360309
{'intent': 'How can I convert JSON to CSV?', 'snippet': "f.writerow(['pk', 'model', 'codename', 'name', 'content_type'])"}
score: 0.5422560189615614
{'intent': "writing string 'text to write\\n' to file `f`", 'snippet': "f.write('text to write\\n')"}
score: 0.5422560189615614
{'intent': "writing string 'text to write\\n' to file `f`", 'snippet': "f.write('text to write\\n')"}

322. input: how can i make an animation with contourf()?
score: 0.8893112197696811
{'intent': 'How can I make an animation with contourf()?', 'snippet': 'pl.show()'}
score: 0.8104779383785017
{'intent': 'How can I make an animation with contourf()?', 'snippet': 'plt.show()'}
score: 0.8104779383785017
{'intent': 'How can I make an animation with contourf()?', 'snippet': 'plt.show()'}

323. input: df.groupby('ID').head(4)
score: 0.813376431862766
{'intent': 'extract the first four rows of the column `id` from a pandas dataframe `df`', 'snippet': "df.groupby('ID').head(4)"}
score: 0.813376431862766
{'intent': 'extract the first four rows of the column `ID` from a pandas dataframe `df`', 'snippet': "df.groupby('ID').head(4)"}
score: 0.8048961482713787
{'intent': 'How to subset a dataset in pandas dataframe?', 'snippet': "df.groupby('ID').head(4)"}

324. input: webbrowser open url `url`
score: 0.8925631808381522
{'intent': 'webbrowser open url `url`', 'snippet': 'webbrowser.open_new(url)'}
score: 0.8724436314113214
{'intent': "webbrowser open url 'http://example.com'", 'snippet': "webbrowser.open('http://example.com')"}
score: 0.8724436314113214
{'intent': "webbrowser open url 'http://example.com'", 'snippet': "webbrowser.open('http://example.com')"}

325. input: df2.rename_axis({'Student': 'Name'}, axis=1, inplace=True)
score: 0.8566121539449334
{'intent': 'Updating csv with data from a csv with different formatting', 'snippet': "df2.rename_axis({'Student': 'Name'}, axis=1, inplace=True)"}
score: 0.6866119791749263
{'intent': 'changing a specific column name in pandas dataframe', 'snippet': "df.rename(columns={'two': 'new_name'}, inplace=True)"}
score: 0.6224268974600503
{'intent': 'How do I rename columns in a python pandas dataframe?', 'snippet': "country_data_table.rename(columns={'value': country.name}, inplace=True)"}

326. input: python pandas drop columns based on max value of column
score: 0.9573841812503379
{'intent': 'python pandas drop columns based on max value of column', 'snippet': 'df.max()'}
score: 0.9417974446211226
{'intent': 'Python Pandas drop columns based on max value of column', 'snippet': 'df.columns[df.max() > 0]'}
score: 0.9417974446211226
{'intent': 'Python Pandas drop columns based on max value of column', 'snippet': 'df.columns[df.max() > 0]'}

327. input: mydic.update({i: o['name']})
score: 0.8170815712695463
{'intent': "update the dictionary `mydic` with dynamic keys `i` and values with key 'name' from dictionary `o`", 'snippet': "mydic.update({i: o['name']})"}
score: 0.7336532647138586
{'intent': 'update dictionary with dynamic keys and values in python', 'snippet': "mydic.update({i: o['name']})"}
score: 0.7336532647138586
{'intent': 'update dictionary with dynamic keys and values in python', 'snippet': "mydic.update({i: o['name']})"}

328. input: raise cherrypy.HTTPRedirect('/device')
score: 0.8559535091858365
{'intent': 'Static html Files in Cherrypy', 'snippet': "raise cherrypy.HTTPRedirect('/device')"}
score: 0.5785934573112628
{'intent': 'how do i configure the ip address with cherrypy?', 'snippet': "cherrypy.server.socket_host = '0.0.0.0'"}
score: 0.5785934573112628
{'intent': 'How do I configure the ip address with CherryPy?', 'snippet': "cherrypy.server.socket_host = '0.0.0.0'"}

329. input: ax.set_xlim([0, 100])
score: 0.649714822366065
{'intent': 'how to set xlim and ylim for a subplot in matplotlib', 'snippet': 'ax2.set_ylim([0, 5])'}
score: 0.649714822366065
{'intent': 'How to set xlim and ylim for a subplot in matplotlib', 'snippet': 'ax2.set_ylim([0, 5])'}
score: 0.64100613562099
{'intent': 'python/matplotlib - is there a way to make a discontinuous axis?', 'snippet': 'ax.set_xlim(0, 1)'}

330. input: can't execute an insert statement in a python script via mysqldb
score: 0.9029542716892545
{'intent': "Can't execute an INSERT statement in a Python script via MySQLdb", 'snippet': 'conn.commit()'}
score: 0.7642301604722764
{'intent': 'Problem with inserting into MySQL database from Python', 'snippet': 'conn.commit()'}
score: 0.7642301604722764
{'intent': 'problem with inserting into mysql database from python', 'snippet': 'conn.commit()'}

331. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

332. input: [(x.discard('') or x) for x in test]
score: 0.7831974305831997
{'intent': 'How to remove an element from a set?', 'snippet': "[(x.discard('') or x) for x in test]"}
score: 0.6137275799213116
{'intent': 'Python: Removing spaces from list objects', 'snippet': "hello = [x.strip(' ') for x in hello]"}
score: 0.5975636668877746
{'intent': 'string to list conversion in python', 'snippet': "[x.strip() for x in s.split(',')]"}

333. input: {'arg1': ['1', '4'], 'arg2': ['foobar']}
score: 0.6708087086507402
{'intent': 'How do you convert command line args in python to a dictionary?', 'snippet': "{'arg1': ['1', '4'], 'arg2': 'foobar'}"}
score: 0.6095622232841125
{'intent': 'using name of list as a string to access list', 'snippet': "x = {'0': [], '2': [], '16': []}"}
score: 0.6088748350610884
{'intent': 'tricky string matching', 'snippet': "['a', 'foobar', 'FooBar', 'baz', 'golf', 'CART', 'Foo']"}

334. input: performance loss after vectorization in numpy
score: 0.7978625032129454
{'intent': 'performance loss after vectorization in numpy', 'snippet': 'np.allclose(ans1, ans2)'}
score: 0.5945621786443286
{'intent': 'improving performance of operations on a numpy array', 'snippet': 'A.sum(axis=0, skipna=True)'}
score: 0.5945621786443286
{'intent': 'Improving performance of operations on a NumPy array', 'snippet': 'A.sum(axis=0, skipna=True)'}

335. input: db.commit()
score: 0.8053755677038471
{'intent': 'commit all the changes after executing a query.', 'snippet': 'dbb.commit()'}
score: 0.8053755677038471
{'intent': 'commit all the changes after executing a query.', 'snippet': 'dbb.commit()'}
score: 0.6958022176129341
{'intent': 'How can I insert data into a MySQL database?', 'snippet': 'db.commit()'}

336. input: eb = plt.errorbar(x, y, yerr=0.1, fmt='', color='b')
score: 0.7814743462372002
{'intent': 'make a line plot with errorbars, `ebar`, from data `x, y, err` and set color of the errorbars to `y` (yellow)', 'snippet': "ebar = plt.errorbar(x, y, yerr=err, ecolor='y')"}
score: 0.7814743462372002
{'intent': 'make a line plot with errorbars, `ebar`, from data `x, y, err` and set color of the errorbars to `y` (yellow)', 'snippet': "ebar = plt.errorbar(x, y, yerr=err, ecolor='y')"}
score: 0.6883493236683265
{'intent': 'How can I get the color of the last figure in matplotlib?', 'snippet': "ebar = plt.errorbar(x, y, yerr=err, ecolor='y')"}

337. input: convert hex string "0xff" to decimal
score: 0.8950852489105363
{'intent': 'convert hex string "0xff" to decimal', 'snippet': "int('0xff', 16)"}
score: 0.8437696244940898
{'intent': 'convert hex to decimal', 'snippet': "int('0xff', 16)"}
score: 0.817662768032011
{'intent': 'convert hex string "FFFF" to decimal', 'snippet': "int('FFFF', 16)"}

338. input: a[a != 0]
score: 0.5810414412918866
{'intent': 'get a list of indices of non zero elements in a list `a`', 'snippet': '[i for i, e in enumerate(a) if e != 0]'}
score: 0.5810414412918866
{'intent': 'get a list of indices of non zero elements in a list `a`', 'snippet': '[i for i, e in enumerate(a) if e != 0]'}
score: 0.5791315947588007
{'intent': 'Extract values not equal to 0 from numpy array `a`', 'snippet': 'a[a != 0]'}

339. input: get average for every three columns in `df` dataframe
score: 0.880033477001479
{'intent': 'Get average for every three columns in `df` dataframe', 'snippet': 'df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()'}
score: 0.8622010548003444
{'intent': 'find average of every three columns in pandas dataframe', 'snippet': 'pd.concat([df, res], axis=1)'}
score: 0.8622010548003444
{'intent': 'Find Average of Every Three Columns in Pandas dataframe', 'snippet': 'pd.concat([df, res], axis=1)'}

340. input: form['FORM1'] = ['Value1']
score: 0.7046708736765999
{'intent': 'How do you select choices in a form using Python?', 'snippet': "form['FORM1'] = ['Value1']"}
score: 0.5624493688679051
{'intent': 'How to obtain values of request variables using Python and Flask', 'snippet': "first_name = request.form.get('firstname')"}
score: 0.5624493688679051
{'intent': 'How to obtain values of request variables using Python and Flask', 'snippet': "first_name = request.form.get('firstname')"}

341. input: df.stack().groupby(level=0).first()
score: 0.8301697274713163
{'intent': 'first non-null value per row from a list of pandas columns', 'snippet': 'df.stack().groupby(level=0).first()'}
score: 0.8301697274713163
{'intent': 'First non-null value per row from a list of Pandas columns', 'snippet': 'df.stack().groupby(level=0).first()'}
score: 0.8301697274713163
{'intent': 'First non-null value per row from a list of Pandas columns', 'snippet': 'df.stack().groupby(level=0).first()'}

342. input: d2 = dict((k, f(v)) for k, v in list(d1.items()))
score: 0.9258947703004092
{'intent': 'Applying a function to values in dict', 'snippet': 'd2 = dict((k, f(v)) for k, v in list(d1.items()))'}
score: 0.8821048430771266
{'intent': 'Applying a function to values in dict', 'snippet': 'd2 = {k: f(v) for k, v in list(d1.items())}'}
score: 0.8821048430771266
{'intent': 'applying a function to values in dict', 'snippet': 'd2 = {k: f(v) for k, v in list(d1.items())}'}

343. input: [0, 0, 0, 0, 0, 0, 0, 0, 0],
score: 0.6158240988172627
{'intent': 'How to initialise a 2D array in Python?', 'snippet': '[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]'}
score: 0.6158240988172627
{'intent': 'how to initialise a 2d array in python?', 'snippet': '[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]'}
score: 0.6130750700558592
{'intent': 'List of non-zero elements in a list in Python', 'snippet': '[1, 1, 0, 0, 1, 0]'}

344. input: setting up scons to autolint
score: 0.6982563623032838
{'intent': 'Setting up SCons to Autolint', 'snippet': "env.Program('test', Glob('*.cpp'))"}
score: 0.552113722286918
{'intent': 'how to i get scons to invoke an external script?', 'snippet': "env.PDF('document.pdf', 'document.tex')"}
score: 0.552113722286918
{'intent': 'How to I get scons to invoke an external script?', 'snippet': "env.PDF('document.pdf', 'document.tex')"}

345. input: user.put()
score: 0.45105114976691413
{'intent': 'how are post and get variables handled in python?', 'snippet': "print(request.form['username'])"}
score: 0.45105114976691413
{'intent': 'How are POST and GET variables handled in Python?', 'snippet': "print(request.form['username'])"}
score: 0.44924357625468087
{'intent': 'how to create user from django shell', 'snippet': 'user.save()'}

346. input: os.path.join(dir_name, base_filename + '.' + filename_suffix)
score: 0.9266253395574592
{'intent': 'building full path filename in python,', 'snippet': "os.path.join(dir_name, base_filename + '.' + filename_suffix)"}
score: 0.9222526781456807
{'intent': 'building full path filename in python,', 'snippet': "os.path.join(dir_name, '.'.join((base_filename, filename_suffix)))"}
score: 0.9222526781456807
{'intent': 'building full path filename in python,', 'snippet': "os.path.join(dir_name, '.'.join((base_filename, filename_suffix)))"}

347. input: ['Alaska Alabama Arkansas American Samoa ', 'zona California Colorado']
score: 0.4714254929725375
{'intent': 'Python - convert string to list', 'snippet': "['Alaska Alabama Arkansas American Samoa ', 'zona California Colorado']"}
score: 0.2221893871350879
{'intent': 'getting every possible combination in a list', 'snippet': "['cat_dog', 'cat_fish', 'dog_fish']"}
score: 0.2221893871350879
{'intent': 'getting every possible combination in a list', 'snippet': "['cat_dog', 'cat_fish', 'dog_fish']"}

348. input: data_df['grade'] = pd.to_numeric(data_df['grade']).astype(int)
score: 0.8881327362123199
{'intent': "change data type of data in column 'grade' of dataframe `data_df` into float and then to int", 'snippet': "data_df['grade'] = data_df['grade'].astype(float).astype(int)"}
score: 0.8881327362123199
{'intent': "Change data type of data in column 'grade' of dataframe `data_df` into float and then to int", 'snippet': "data_df['grade'] = data_df['grade'].astype(float).astype(int)"}
score: 0.8639965040954197
{'intent': 'type conversion in python from int to float', 'snippet': "data_df['grade'] = data_df['grade'].astype(float).astype(int)"}

349. input: adding calculated column(s) to a dataframe in pandas
score: 0.7824809340814078
{'intent': 'adding calculated column(s) to a dataframe in pandas', 'snippet': "d['A'][1:] < d['C'][:-1]"}
score: 0.7824809340814078
{'intent': 'Adding calculated column(s) to a dataframe in pandas', 'snippet': "d['A'][1:] < d['C'][:-1]"}
score: 0.7811823102772917
{'intent': 'attach a calculated column to an existing dataframe', 'snippet': 'df.index'}

350. input: how to make a ssh connection with python?
score: 0.7336374085730141
{'intent': 'How to open an SSH tunnel using python?', 'snippet': "subprocess.call(['curl', 'http://localhost:2222'])"}
score: 0.7336374085730141
{'intent': 'how to open an ssh tunnel using python?', 'snippet': "subprocess.call(['curl', 'http://localhost:2222'])"}
score: 0.7140721662353565
{'intent': 'How to create a ssh tunnel using python and paramiko?', 'snippet': 'ssh.close()'}

351. input: determine the byte length of a utf-8 encoded string `s`
score: 0.8864254435209389
{'intent': 'Determine the byte length of a utf-8 encoded string `s`', 'snippet': "return len(s.encode('utf-8'))"}
score: 0.8115176069989809
{'intent': 'how can i determine the byte length of a utf-8 encoded string in python?', 'snippet': "len(s.encode('utf-8'))"}
score: 0.8115176069989809
{'intent': 'How can I determine the byte length of a utf-8 encoded string in Python?', 'snippet': "len(s.encode('utf-8'))"}

352. input: [x for d in thedict.values() for alist in d.values() for x in alist]
score: 0.7590287956538304
{'intent': 'python getting a list of value from list of dict', 'snippet': "[x['value'] for x in list_of_dicts]"}
score: 0.7590287956538304
{'intent': 'python getting a list of value from list of dict', 'snippet': "[x['value'] for x in list_of_dicts]"}
score: 0.7590287956538304
{'intent': 'python getting a list of value from list of dict', 'snippet': "[x['value'] for x in list_of_dicts]"}

353. input: sql alchemy - getting a list of tables
score: 0.6667554175811644
{'intent': 'sqlalchemy and flask, how to query many-to-many relationship', 'snippet': 'x = Dish.query.filter(Dish.restaurants.any(name=name)).all()'}
score: 0.6667554175811644
{'intent': 'SqlAlchemy and Flask, how to query many-to-many relationship', 'snippet': 'x = Dish.query.filter(Dish.restaurants.any(name=name)).all()'}
score: 0.662333580911618
{'intent': 'sqlalchemy select records of columns of table `my_table` in addition to current date column', 'snippet': 'print(select([my_table, func.current_date()]).execute())'}

354. input: how to create an immutable list in python?
score: 0.9101893334800589
{'intent': 'How to create an immutable list in Python?', 'snippet': 'y = list(x)'}
score: 0.8631770961983238
{'intent': 'How to create an immutable list in Python?', 'snippet': 'new_list = copy.deepcopy(old_list)'}
score: 0.7984918237736703
{'intent': 'How to make an immutable object in Python?', 'snippet': "Immutable = collections.namedtuple('Immutable', ['a', 'b'])"}

355. input: django httpresponseredirect with int parameter
score: 0.7975643628773875
{'intent': 'Django HttpResponseRedirect with int parameter', 'snippet': "url('^profile/(?P<user_id>\\\\d+)/$', '...', name='profile')"}
score: 0.7429144651348231
{'intent': 'how do i pass template context information when using httpresponseredirect in django?', 'snippet': '{{request.session.foo}}'}
score: 0.6868968010055287
{'intent': 'redirecting a user in a django template', 'snippet': "return HttpResponseRedirect('/path/')"}

356. input: how to apply standardization to svms in scikit-learn?
score: 0.9165193645384452
{'intent': 'How to apply standardization to SVMs in scikit-learn?', 'snippet': 'X_train = scaler.fit(X_train).transform(X_train)'}
score: 0.43889219630196974
{'intent': 'is it possible to tune parameters with grid search for custom kernels in scikit-learn?', 'snippet': 'model.fit(X_train, y_train)'}
score: 0.43889219630196974
{'intent': 'Is it possible to tune parameters with grid search for custom kernels in scikit-learn?', 'snippet': 'model.fit(X_train, y_train)'}

357. input: is there a function in python to split a word into a list?
score: 0.9812648871363105
{'intent': 'Is there a function in python to split a word into a list?', 'snippet': "list('Word to Split')"}
score: 0.9812648871363105
{'intent': 'Is there a function in python to split a word into a list?', 'snippet': "list('Word to Split')"}
score: 0.9290441216660645
{'intent': 'is there a function in python to split a word into a list?', 'snippet': "['W', 'o', 'r', 'd', ' ', 't', 'o', ' ', 'S', 'p', 'l', 'i', 't']"}

358. input: selenium (with python) how to modify an element css style
score: 0.8317123430786156
{'intent': 'Selenium (with python) how to modify an element css style', 'snippet': 'driver.execute_script("document.getElementById(\'lga\').style.display = \'none\';")'}
score: 0.7834643369575129
{'intent': 'Selenium (with python) how to modify an element css style', 'snippet': 'driver.execute_script("$(\'#copy_link\').css(\'visibility\', \'visible\');")'}
score: 0.7834643369575129
{'intent': 'selenium (with python) how to modify an element css style', 'snippet': 'driver.execute_script("$(\'#copy_link\').css(\'visibility\', \'visible\');")'}

359. input: '172.16.0.3', '25/Sep/2002:14:04:19 +0200', 'GET / HTTP/1.1', '401', '', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.1) Gecko/20020827'
score: 0.46992313980217504
{'intent': 'request http url `url`', 'snippet': 'r = requests.get(url)'}
score: 0.46992313980217504
{'intent': 'request http url `url`', 'snippet': 'r = requests.get(url)'}
score: 0.4531135292945727
{'intent': 'check the status code of url "http://www.stackoverflow.com"', 'snippet': "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"}

360. input: transform tuple to dict
score: 0.8210285229810913
{'intent': 'Transform tuple to dict', 'snippet': "dict((('a', 1), ('b', 2)))"}
score: 0.7850579254090722
{'intent': 'python tuple to dict', 'snippet': 'dict((y, x) for x, y in t)'}
score: 0.7280340289754925
{'intent': 'Converting a List of Tuples into a Dict in Python', 'snippet': "{'a': [1, 2, 3], 'c': [1], 'b': [1, 2]}"}

361. input: df.groupby([df.index.date, 'action']).count().plot(kind='bar')
score: 0.9087180656466296
{'intent': 'Plot number of occurrences from Pandas DataFrame', 'snippet': "df.groupby([df.index.date, 'action']).count().plot(kind='bar')"}
score: 0.8525148494172977
{'intent': 'plot number of occurrences from pandas dataframe', 'snippet': "df.groupby([df.index.date, 'action']).count()"}
score: 0.7357593200290005
{'intent': 'python pandas: plot histogram of dates?', 'snippet': "df.groupby([df.date.dt.year, df.date.dt.month]).count().plot(kind='bar')"}

362. input: g = df.groupby(df.index // 2)
score: 0.7979933217271122
{'intent': 'Perform function on pairs of rows in Pandas dataframe', 'snippet': 'g = df.groupby(df.index // 2)'}
score: 0.7164921900115283
{'intent': 'group multi-index pandas dataframe', 'snippet': "s.groupby(level=['first', 'second']).sum()"}
score: 0.7164921900115283
{'intent': 'group multi-index pandas dataframe', 'snippet': "s.groupby(level=['first', 'second']).sum()"}

363. input: remove lines in dataframe using a list in pandas
score: 0.8093392471448086
{'intent': 'Remove lines in dataframe using a list in Pandas', 'snippet': "df.query('field not in @ban_field')"}
score: 0.6730750430148915
{'intent': 'How do I remove rows from a dataframe?', 'snippet': 'df.drop(x[x].index)'}
score: 0.6730750430148915
{'intent': 'how do i remove rows from a dataframe?', 'snippet': 'df.drop(x[x].index)'}

364. input: set([1, 2, 3]) ^ set([3, 4, 5])
score: 0.8620307828646022
{'intent': 'create a set that is the exclusive or of [1, 2, 3] and [3, 4, 5]', 'snippet': 'set([1, 2, 3]) ^ set([3, 4, 5])'}
score: 0.7807395674443347
{'intent': 'Find non-common elements in lists', 'snippet': 'set([1, 2, 3]) ^ set([3, 4, 5])'}
score: 0.7807395674443347
{'intent': 'Find non-common elements in lists', 'snippet': 'set([1, 2, 3]) ^ set([3, 4, 5])'}

365. input: gca().xaxis.set_major_formatter(FuncFormatter(formatter))
score: 0.7469973699981565
{'intent': 'Matplotlib: -- how to show all digits on ticks?', 'snippet': 'gca().xaxis.set_major_formatter(FuncFormatter(formatter))'}
score: 0.6942475825006427
{'intent': 'matplotlib colorbar formatting', 'snippet': 'cb.ax.xaxis.set_major_formatter(plt.FuncFormatter(myfmt))'}
score: 0.6942475825006427
{'intent': 'matplotlib colorbar formatting', 'snippet': 'cb.ax.xaxis.set_major_formatter(plt.FuncFormatter(myfmt))'}

366. input: numpy: cartesian product of x and y array points into single array of 2d points
score: 0.8409377054640547
{'intent': 'Numpy: cartesian product of x and y array points into single array of 2D points', 'snippet': 'numpy.transpose([numpy.tile(x, len(y)), numpy.repeat(y, len(x))])'}
score: 0.7708383691186407
{'intent': 'cartesian product of `x` and `y` array points into single array of 2d points', 'snippet': 'numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)'}
score: 0.7708383691186407
{'intent': 'cartesian product of `x` and `y` array points into single array of 2d points', 'snippet': 'numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)'}

367. input: driver.find_element_by_id('foo').clear()
score: 0.7503082872150038
{'intent': "clear text from textarea 'foo' with selenium", 'snippet': "driver.find_element_by_id('foo').clear()"}
score: 0.7503082872150038
{'intent': "clear text from textarea 'foo' with selenium", 'snippet': "driver.find_element_by_id('foo').clear()"}
score: 0.7499853147617486
{'intent': 'if selenium textarea element `foo` is not empty, clear the field', 'snippet': "driver.find_element_by_id('foo').clear()"}

368. input: mixed.replace('\r\n', '\n').replace('\r', '\n')
score: 0.7435685258757783
{'intent': "normalize line ends in a string 'mixed'", 'snippet': "mixed.replace('\\r\\n', '\\n').replace('\\r', '\\n')"}
score: 0.7435685258757783
{'intent': "Normalize line ends in a string 'mixed'", 'snippet': "mixed.replace('\\r\\n', '\\n').replace('\\r', '\\n')"}
score: 0.6842667623196701
{'intent': "replace carriage return in string `somestring` with empty string ''", 'snippet': "somestring.replace('\\\\r', '')"}

369. input: how to return json dictionary in django ajax update
score: 0.661646419793571
{'intent': 'getting a json request in a view (using django)', 'snippet': "return HttpResponse('')"}
score: 0.661646419793571
{'intent': 'Getting a JSON request in a view (using Django)', 'snippet': "return HttpResponse('')"}
score: 0.6611802602544912
{'intent': 'how to json serialize __dict__ of a django model?', 'snippet': "return HttpResponse(json.dumps(data), content_type='application/json')"}

370. input: sum(1 for x in list(d.values()) if some_condition(x))
score: 0.789749531827401
{'intent': 'count the number of values in `d` dictionary that are predicate to function `some_condition`', 'snippet': 'sum(1 for x in list(d.values()) if some_condition(x))'}
score: 0.789749531827401
{'intent': 'count the number of values in `d` dictionary that are predicate to function `some_condition`', 'snippet': 'sum(1 for x in list(d.values()) if some_condition(x))'}
score: 0.7677562759404251
{'intent': 'summing only the numbers contained in a list', 'snippet': 'sum([x for x in list if isinstance(x, (int, float))])'}

371. input: t = sorted(list(a.items()), key=lambda x: x[1])
score: 0.8991193646285889
{'intent': 'sort a dictionary `a` by values that are list type', 'snippet': 't = sorted(list(a.items()), key=lambda x: x[1])'}
score: 0.8991193646285889
{'intent': 'sort a dictionary `a` by values that are list type', 'snippet': 't = sorted(list(a.items()), key=lambda x: x[1])'}
score: 0.8892702249504878
{'intent': 'Create a hierarchy from a dictionary of lists', 'snippet': 't = sorted(list(a.items()), key=lambda x: x[1])'}

372. input: how to remove \n from a list element?
score: 0.8362828326556709
{'intent': 'how to remove \\n from a list element?', 'snippet': '[i.strip() for i in l]'}
score: 0.8362828326556709
{'intent': 'How to remove \\n from a list element?', 'snippet': '[i.strip() for i in l]'}
score: 0.7898257731393925
{'intent': 'How to remove \\n from a list element?', 'snippet': 'map(lambda x: x.strip(), l)'}

373. input: rawbytes.decode('utf-8')
score: 0.7620150553477101
{'intent': 'decode string `content` to utf-8 code', 'snippet': "print(content.decode('utf8'))"}
score: 0.7620150553477101
{'intent': 'decode string `content` to UTF-8 code', 'snippet': "print(content.decode('utf8'))"}
score: 0.7550670309503631
{'intent': 'convert a raw string `raw_byte_string` into a normal string', 'snippet': "raw_byte_string.decode('unicode_escape')"}

374. input: python, pandas: how to sort dataframe by index
score: 0.8952237754401156
{'intent': 'Python, pandas: how to sort dataframe by index', 'snippet': 'df.sort_index(inplace=True)'}
score: 0.8442311425132242
{'intent': 'sorting pandas dataframe by order of another index', 'snippet': 'df2.reindex(df.index)'}
score: 0.8442311425132242
{'intent': 'Sorting Pandas Dataframe by order of another index', 'snippet': 'df2.reindex(df.index)'}

375. input: spawn a process to run python script `myscript.py` in c++
score: 0.9679131022248699
{'intent': 'Spawn a process to run python script `myscript.py` in C++', 'snippet': "system('python myscript.py')"}
score: 0.78638498495764
{'intent': 'How can I start a Python thread FROM C++?', 'snippet': "system('python myscript.py')"}
score: 0.78638498495764
{'intent': 'How can I start a Python thread FROM C++?', 'snippet': "system('python myscript.py')"}

376. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

377. input: is there a way to remove duplicate and continuous words/phrases in a string?
score: 0.7824344129586572
{'intent': 'is there a way to remove duplicate and continuous words/phrases in a string?', 'snippet': "re.sub('\\\\b(.+)(\\\\s+\\\\1\\\\b)+', '\\\\1', s)"}
score: 0.7824344129586572
{'intent': 'Is there a way to remove duplicate and continuous words/phrases in a string?', 'snippet': "re.sub('\\\\b(.+)(\\\\s+\\\\1\\\\b)+', '\\\\1', s)"}
score: 0.7788765603063537
{'intent': 'is there a way to remove duplicate and continuous words/phrases in a string?', 'snippet': "re.sub('\\\\b(.+)\\\\s+\\\\1\\\\b', '\\\\1', s)"}

378. input: finding range of a numpy array elements
score: 0.8246232950935775
{'intent': 'Finding range of a numpy array elements', 'snippet': 'r = np.ptp(a, axis=1)'}
score: 0.6996591051242187
{'intent': 'Numpy: How to check if array contains certain numbers?', 'snippet': 'numpy.array([(x in a) for x in b])'}
score: 0.6996591051242187
{'intent': 'Numpy: How to check if array contains certain numbers?', 'snippet': 'numpy.array([(x in a) for x in b])'}

379. input: soup.find_all('div', class_=re.compile('comment-'))
score: 0.9163545493555321
{'intent': 'Find all `div` tags whose classes has the value `comment-` in a beautiful soup object `soup`', 'snippet': "soup.find_all('div', class_=re.compile('comment-'))"}
score: 0.8990118316555001
{'intent': 'Python regular expression for Beautiful Soup', 'snippet': "soup.find_all('div', class_=re.compile('comment-'))"}
score: 0.8990118316555001
{'intent': 'Python regular expression for Beautiful Soup', 'snippet': "soup.find_all('div', class_=re.compile('comment-'))"}

380. input: print([s.replace('8', '') for s in lst])
score: 0.9193148513831464
{'intent': 'Removing character in list of strings', 'snippet': "print([s.replace('8', '') for s in lst])"}
score: 0.9193148513831464
{'intent': 'Removing character in list of strings', 'snippet': "print([s.replace('8', '') for s in lst])"}
score: 0.882816570910761
{'intent': 'delete all occureces of `8` in each string `s` in list `lst`', 'snippet': "print([s.replace('8', '') for s in lst])"}

381. input: convert a string to integer with decimal in python
score: 0.9472267131189311
{'intent': 'Convert a string to integer with decimal in Python', 'snippet': 'int(Decimal(s))'}
score: 0.9472267131189311
{'intent': 'convert a string to integer with decimal in python', 'snippet': 'int(Decimal(s))'}
score: 0.9472267131189311
{'intent': 'Convert a string to integer with decimal in Python', 'snippet': 'int(Decimal(s))'}

382. input: list of objects to json with python
score: 0.867844962149784
{'intent': 'list of objects to json with python', 'snippet': 'json_string = json.dumps(list_name, default=obj_dict)'}
score: 0.8676504889329649
{'intent': 'List of objects to JSON with Python', 'snippet': 'json_string = json.dumps([ob.__dict__ for ob in list_name])'}
score: 0.8676504889329649
{'intent': 'List of objects to JSON with Python', 'snippet': 'json_string = json.dumps([ob.__dict__ for ob in list_name])'}

383. input: opposite of melt in python pandas
score: 0.7495428021765266
{'intent': 'opposite of melt in python pandas', 'snippet': "origin.pivot(index='label', columns='type')['value']"}
score: 0.7495428021765266
{'intent': 'Opposite of melt in python pandas', 'snippet': "origin.pivot(index='label', columns='type')['value']"}
score: 0.6663668776025911
{'intent': 'Opposite of melt in python pandas', 'snippet': "origin.groupby(['label', 'type'])['value'].aggregate('mean').unstack()"}

384. input: get tuples from lists `lst` and `lst2` using list comprehension in python 2
score: 0.9354520851130699
{'intent': 'get tuples from lists `lst` and `lst2` using list comprehension in python 2', 'snippet': '[(lst[i], lst2[i]) for i in range(len(lst))]'}
score: 0.9122528324494328
{'intent': 'how to get tuples from lists using list comprehension in python', 'snippet': '[(lst[i], lst2[i]) for i in range(len(lst))]'}
score: 0.9122528324494328
{'intent': 'how to get tuples from lists using list comprehension in python', 'snippet': '[(lst[i], lst2[i]) for i in range(len(lst))]'}

385. input: is there a generator version of `string.split()` in python?
score: 0.9052110158010837
{'intent': 'Is there a generator version of `string.split()` in Python?', 'snippet': 'list(split_iter("A programmer\'s RegEx test."))'}
score: 0.9052110158010837
{'intent': 'is there a generator version of `string.split()` in python?', 'snippet': 'list(split_iter("A programmer\'s RegEx test."))'}
score: 0.8726960641878068
{'intent': 'Is there a generator version of `string.split()` in Python?', 'snippet': 'return (x.group(0) for x in re.finditer("[A-Za-z\']+", string))'}

386. input: check if string `str` is palindrome
score: 0.7842921471172026
{'intent': 'check if string `str` is palindrome', 'snippet': 'str(n) == str(n)[::-1]'}
score: 0.716327996847694
{'intent': 'How to check for palindrome using Python logic', 'snippet': 'str(n) == str(n)[::-1]'}
score: 0.716327996847694
{'intent': 'how to check for palindrome using python logic', 'snippet': 'str(n) == str(n)[::-1]'}

387. input: how can i allow django admin to set a field to null?
score: 0.8993226163833846
{'intent': 'How can I allow django admin to set a field to NULL?', 'snippet': 'super(MyModel, self).save(*args, **kwargs)'}
score: 0.669000905341561
{'intent': 'how to set null for integerfield instead of setting 0?', 'snippet': 'age = models.IntegerField(blank=True, null=True)'}
score: 0.6550996340066698
{'intent': "django-userena: adding extra non-null fields to a user's profile", 'snippet': 'start_year = models.IntegerField(max_length=4, blank=False, null=True)'}

388. input: Animals.objects.filter(name__startswith='A')
score: 0.7802150805662407
{'intent': 'How to get all children of queryset in django?', 'snippet': "Animals.objects.filter(name__startswith='A')"}
score: 0.7520012635251119
{'intent': 'How to get all children of queryset in django?', 'snippet': "Category.objects.filter(animal__name__startswith='A')"}
score: 0.6057620861655728
{'intent': 'in django, how can i filter or exclude multiple things?', 'snippet': "player.filter(name__in=['mike', 'charles'])"}

389. input: [0.01691603660583496, 0.016616106033325195, 0.016437053680419922]
score: 0.5628571558142572
{'intent': 'limit float 13.9499999 to two decimal points', 'snippet': "('%.2f' % 13.9499999)"}
score: 0.5628571558142572
{'intent': 'limit float 13.9499999 to two decimal points', 'snippet': "('%.2f' % 13.9499999)"}
score: 0.5573348801655661
{'intent': 'round number 32.268907563 up to 3 decimal points', 'snippet': 'round(32.268907563, 3)'}

390. input: equivalent of objects.latest() in app engine
score: 0.8656573697454609
{'intent': 'Equivalent of objects.latest() in App Engine', 'snippet': "MyObject.all().order('-time')"}
score: 0.8656573697454609
{'intent': 'equivalent of objects.latest() in app engine', 'snippet': "MyObject.all().order('-time')"}
score: 0.8439487100567535
{'intent': 'Equivalent of objects.latest() in App Engine', 'snippet': "MyObject.all().order('-time')[0]"}

391. input: get starred messages from gmail using imap4 and python
score: 0.9556519277092209
{'intent': 'Get starred messages from GMail using IMAP4 and python', 'snippet': "IMAP4.select('[Gmail]/Starred')"}
score: 0.5275893242430695
{'intent': 'How to send an email with Gmail as provider using Python?', 'snippet': 'server.starttls()'}
score: 0.5275893242430695
{'intent': 'how to send an email with gmail as provider using python?', 'snippet': 'server.starttls()'}

392. input: how does this function to remove duplicate characters from a string in python work?
score: 0.8437450808900513
{'intent': 'How does this function to remove duplicate characters from a string in python work?', 'snippet': "print(' '.join(set(s)))"}
score: 0.8437450808900513
{'intent': 'how does this function to remove duplicate characters from a string in python work?', 'snippet': "print(' '.join(set(s)))"}
score: 0.8437450808900513
{'intent': 'How does this function to remove duplicate characters from a string in python work?', 'snippet': "print(' '.join(set(s)))"}

393. input: 2d arrays in python
score: 0.8483730728774487
{'intent': 'Pythonic way to create a 2d array?', 'snippet': '[([0] * width) for y in range(height)]'}
score: 0.8483730728774487
{'intent': 'pythonic way to create a 2d array?', 'snippet': '[([0] * width) for y in range(height)]'}
score: 0.7893703931796388
{'intent': 'create 2d array in python using for loop results', 'snippet': '[[0, 0], [1, 10], [2, 20], [3, 30], [4, 40], [5, 50]]'}

394. input: df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()
score: 0.9350682549726339
{'intent': 'Summing across rows of Pandas Dataframe', 'snippet': "df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()"}
score: 0.9350682549726339
{'intent': 'Summing across rows of Pandas Dataframe', 'snippet': "df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()"}
score: 0.918455881342157
{'intent': 'sum the column `positions` along the  other columns `stock`, `same1`, `same2` in a pandas data frame `df`', 'snippet': "df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()"}

395. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

396. input: how do i join two dataframes based on values in selected columns?
score: 0.800171190900036
{'intent': 'How do I join two dataframes based on values in selected columns?', 'snippet': "pd.merge(a, b, on=['A', 'B'], how='outer')"}
score: 0.800171190900036
{'intent': 'How do I join two dataframes based on values in selected columns?', 'snippet': "pd.merge(a, b, on=['A', 'B'], how='outer')"}
score: 0.7792949676873564
{'intent': 'join two dataframes based on values in selected columns', 'snippet': "pd.merge(a, b, on=['A', 'B'], how='outer')"}

397. input: add multiple columns to a pandas dataframe quickly
score: 0.8069077888788836
{'intent': 'Add multiple columns to a Pandas dataframe quickly', 'snippet': 'df.ix[:5, :10]'}
score: 0.694646620898585
{'intent': 'how to initialize multiple columns to existing pandas dataframe', 'snippet': "df.reindex(columns=list['cd'])"}
score: 0.694646620898585
{'intent': 'how to initialize multiple columns to existing pandas DataFrame', 'snippet': "df.reindex(columns=list['cd'])"}

398. input: os.kill(12765, 0)
score: 0.6866033218798756
{'intent': 'kill a process with id `process.pid`', 'snippet': 'os.kill(process.pid, signal.SIGKILL)'}
score: 0.6721417725574471
{'intent': 'kill process with python', 'snippet': "os.system('path/to/my_script.sh')"}
score: 0.6721417725574471
{'intent': 'kill process with python', 'snippet': "os.system('path/to/my_script.sh')"}

399. input: os.path.dirname(sys.executable)
score: 0.755013459330652
{'intent': "How can I know python's path under windows?", 'snippet': 'os.path.dirname(sys.executable)'}
score: 0.755013459330652
{'intent': "how can i know python's path under windows?", 'snippet': 'os.path.dirname(sys.executable)'}
score: 0.755013459330652
{'intent': "How can I know python's path under windows?", 'snippet': 'os.path.dirname(sys.executable)'}

400. input: pd.crosstab(index=df['values'], columns=[df['convert_me'], df['age_col']])
score: 0.8658058714975801
{'intent': 'R dcast equivalent in python pandas', 'snippet': "pd.crosstab(index=df['values'], columns=[df['convert_me'], df['age_col']])"}
score: 0.60351651929806
{'intent': 'how to merge two columns together in pandas', 'snippet': "pd.melt(df, id_vars='year')['year', 'value']"}
score: 0.60351651929806
{'intent': 'How to merge two columns together in Pandas', 'snippet': "pd.melt(df, id_vars='year')['year', 'value']"}

401. input: np.array([0.0, pinf, ninf]) < 0
score: 0.8133148946918134
{'intent': 'how to remove positive infinity from numpy array...if it is already converted to a number?', 'snippet': 'np.array([0.0, pinf, ninf]) < 0'}
score: 0.7946432164734911
{'intent': 'how to remove positive infinity from numpy array...if it is already converted to a number?', 'snippet': 'np.array([fnan, pinf, ninf]) < 0'}
score: 0.7946432164734911
{'intent': 'how to remove positive infinity from numpy array...if it is already converted to a number?', 'snippet': 'np.array([fnan, pinf, ninf]) < 0'}

402. input: python: listen on two ports
score: 0.8280241480824493
{'intent': 'Python: Listen on two ports', 'snippet': 'time.sleep(1)'}
score: 0.7276966229600134
{'intent': 'how do i write a python http server to listen on multiple ports?', 'snippet': 'server.serve_forever()'}
score: 0.5740523341473404
{'intent': 'how to get the current port number in flask?', 'snippet': 'app.run(port=port)'}

403. input: window.after(1, lambda : window.focus_force())
score: 0.595896054496194
{'intent': 'Python get focused entry name', 'snippet': "print(('focus object class:', window2.focus_get().__class__))"}
score: 0.595896054496194
{'intent': 'Python get focused entry name', 'snippet': "print(('focus object class:', window2.focus_get().__class__))"}
score: 0.5885533167284847
{'intent': 'pyqt window focus', 'snippet': 'self.setWindowFlags(PyQt4.QtCore.Qt.WindowStaysOnTopHint)'}

404. input: correct way to escape a subprocess call in python
score: 0.8013356600635794
{'intent': 'Correct way to escape a subprocess call in python', 'snippet': "cmd = subprocess.Popen(['sed', '-n', '$=', filename], stdout=subprocess.PIPE)"}
score: 0.7540491886230373
{'intent': 'Calling an external command', 'snippet': 'from subprocess import call'}
score: 0.7253478679689838
{'intent': 'getting the output of a python subprocess', 'snippet': 'out = p.communicate()'}

405. input: how to iterate over a range of keys in a dictionary?
score: 0.8927571846890231
{'intent': 'how to iterate over a range of keys in a dictionary?', 'snippet': 'list(d.keys())'}
score: 0.8927571846890231
{'intent': 'How to iterate over a range of keys in a dictionary?', 'snippet': 'list(d.keys())'}
score: 0.7937179992258416
{'intent': 'how to iterate over a range of keys in a dictionary?', 'snippet': "[x for x in d if x not in ('Domain Source', 'Recommend Suppress')]"}

406. input: ax.legend()
score: 0.7979285266187801
{'intent': 'How to put the legend out of the plot', 'snippet': 'ax.legend()'}
score: 0.7122022244870221
{'intent': 'python matplotlib legend shows first entry of a list only', 'snippet': 'ax.legend()'}
score: 0.6514615040767443
{'intent': 'How do I write a Latex formula in the legend of a plot using Matplotlib inside a .py file?', 'snippet': 'ax.legend()'}

407. input: sort a list of dictionary values by 'date' in reverse order
score: 0.9008644038919402
{'intent': 'sorting a list of dictionary values by date in python', 'snippet': "your_list.sort(key=itemgetter('date'), reverse=True)"}
score: 0.8776499725209144
{'intent': "sort a list of dictionary values by 'date' in reverse order", 'snippet': "list.sort(key=lambda item: item['date'], reverse=True)"}
score: 0.8754327834050063
{'intent': 'sorting a list of dictionary values by date in python', 'snippet': "list.sort(key=lambda item: item['date'], reverse=True)"}

408. input: how do i sort a zipped list in python?
score: 0.9093719407919432
{'intent': 'How do I sort a zipped list in Python?', 'snippet': 'sorted(zipped, key=lambda x: x[1])'}
score: 0.9093719407919432
{'intent': 'How do I sort a zipped list in Python?', 'snippet': 'sorted(zipped, key=lambda x: x[1])'}
score: 0.9093719407919432
{'intent': 'how do i sort a zipped list in python?', 'snippet': 'sorted(zipped, key=lambda x: x[1])'}

409. input: generate the combinations of 3 from a set `{1, 2, 3, 4}`
score: 0.8586246638259339
{'intent': 'generate the combinations of 3 from a set `{1, 2, 3, 4}`', 'snippet': 'print(list(itertools.combinations({1, 2, 3, 4}, 3)))'}
score: 0.7050128068022078
{'intent': "What's the most memory efficient way to generate the combinations of a set in python?", 'snippet': 'print(list(itertools.combinations({1, 2, 3, 4}, 3)))'}
score: 0.7050128068022078
{'intent': "what's the most memory efficient way to generate the combinations of a set in python?", 'snippet': 'print(list(itertools.combinations({1, 2, 3, 4}, 3)))'}

410. input: ax.w_yaxis.set_ticklabels([])
score: 0.7383599501061622
{'intent': 'matplotlib: change yaxis tick labels', 'snippet': 'plt.draw()'}
score: 0.7383599501061622
{'intent': 'matplotlib: change yaxis tick labels', 'snippet': 'plt.draw()'}
score: 0.7035062425603444
{'intent': 'How to change the 3d axis settings in matplotlib', 'snippet': 'ax.w_yaxis.set_ticklabels([])'}

411. input: where does python root logger store a log?
score: 0.9353893481473754
{'intent': 'Where does Python root logger store a log?', 'snippet': 'logging.basicConfig(level=logging.WARNING)'}
score: 0.7137266902119674
{'intent': 'where to store a log file name in python?', 'snippet': "logging.debug('This is a message from another place.')"}
score: 0.7137266902119674
{'intent': 'where to store a log file name in python?', 'snippet': "logging.debug('This is a message from another place.')"}

412. input: AtB = A.stack(0).dot(twos).unstack()
score: 0.466295757309685
{'intent': 'How do I stack vectors of different lengths in NumPy?', 'snippet': 'ma.array(np.resize(b, a.shape[0]), mask=[False, False, True])'}
score: 0.466295757309685
{'intent': 'how do i stack vectors of different lengths in numpy?', 'snippet': 'ma.array(np.resize(b, a.shape[0]), mask=[False, False, True])'}
score: 0.45780035568131094
{'intent': 'how do i stack vectors of different lengths in numpy?', 'snippet': 'ma.vstack([a, ma.array(np.resize(b, a.shape[0]), mask=[False, False, True])])'}

413. input: python: removing spaces from list objects
score: 0.8779805147702807
{'intent': 'Python: Removing spaces from list objects', 'snippet': "hello = [x.strip(' ') for x in hello]"}
score: 0.7552508884070392
{'intent': 'Python: how to get rid of spaces in str(dict)?', 'snippet': "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"}
score: 0.7552508884070392
{'intent': 'python: how to get rid of spaces in str(dict)?', 'snippet': "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"}

414. input: str.decode('utf-8').replace('\u2022', '*').encode('utf-8')
score: 0.9332166961189419
{'intent': "replace unicode character '\\u2022' in string 'str' with '*'", 'snippet': "str.decode('utf-8').replace('\\u2022', '*').encode('utf-8')"}
score: 0.9223811721879583
{'intent': "replace unicode characters ''\\u2022' in string 'str' with '*'", 'snippet': "str.decode('utf-8').replace('\\u2022', '*')"}
score: 0.9223811721879583
{'intent': "replace unicode characters ''\\u2022' in string 'str' with '*'", 'snippet': "str.decode('utf-8').replace('\\u2022', '*')"}

415. input: pd.concat([df1, df2, df3], axis=1, keys=['df1', 'df2', 'df3'])
score: 0.8425315810357428
{'intent': 'Append Level to Column Index in python pandas', 'snippet': "pd.concat([df1, df2, df3], axis=1, keys=['df1', 'df2', 'df3'])"}
score: 0.8041142746821625
{'intent': 'Creating a pandas DataFrame from columns of other DataFrames with similar indexes', 'snippet': "pd.concat([df1['c'], df2['c']], axis=1, keys=['df1', 'df2'])"}
score: 0.8041142746821625
{'intent': 'creating a pandas dataframe from columns of other dataframes with similar indexes', 'snippet': "pd.concat([df1['c'], df2['c']], axis=1, keys=['df1', 'df2'])"}

416. input: creating a list of dictionaries in python
score: 0.8618338499017927
{'intent': 'How can I create an array/list of dictionaries in python?', 'snippet': 'dictlist = [dict() for x in range(n)]'}
score: 0.8618338499017927
{'intent': 'how can i create an array/list of dictionaries in python?', 'snippet': 'dictlist = [dict() for x in range(n)]'}
score: 0.8427841907829656
{'intent': 'creating a list of dictionaries in python', 'snippet': "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]"}

417. input: matplotlib: inset axes for multiple boxplots
score: 0.9298303585427684
{'intent': 'matplotlib: inset axes for multiple boxplots', 'snippet': 'plt.show()'}
score: 0.7797665061757997
{'intent': 'is there a way to make multiple horizontal boxplots in matplotlib?', 'snippet': 'plt.figure()'}
score: 0.7797665061757997
{'intent': 'Is there a way to make multiple horizontal boxplots in matplotlib?', 'snippet': 'plt.figure()'}

418. input: python - create list with numbers between 2 values?
score: 0.8682912558845609
{'intent': 'Python - Create list with numbers between 2 values?', 'snippet': 'list(range(11, 17))'}
score: 0.8682912558845609
{'intent': 'python - create list with numbers between 2 values?', 'snippet': 'list(range(11, 17))'}
score: 0.8682912558845609
{'intent': 'Python - Create list with numbers between 2 values?', 'snippet': 'list(range(11, 17))'}

419. input: dynamically escape % sign and brackets { } in a string
score: 0.7376889312185141
{'intent': 'dynamically escape % sign and brackets { } in a string', 'snippet': "s = s.replace('{', '{{').replace('}', '}}')"}
score: 0.5685325823891437
{'intent': 'Escaping quotes in string', 'snippet': 'replace(\'"\', \'\\\\"\')'}
score: 0.5685325823891437
{'intent': 'escaping quotes in string', 'snippet': 'replace(\'"\', \'\\\\"\')'}

420. input: cant connect to tor with python
score: 0.8507028119109852
{'intent': 'cant connect to TOR with python', 'snippet': "httplib.HTTPConnection('myip.dnsomatic.com').request('GET', '/')"}
score: 0.7171116521354681
{'intent': 'how to make urllib2 requests through tor in python?', 'snippet': "print(opener.open('http://www.google.com').read())"}
score: 0.5874630507689599
{'intent': 'connect to url in python', 'snippet': 'urllib.request.install_opener(opener)'}

421. input: new_list = [(x + 1) for x in my_list]
score: 0.8835527166532497
{'intent': 'Add 1 to each integer value in list `my_list`', 'snippet': 'new_list = [(x + 1) for x in my_list]'}
score: 0.8596897660128707
{'intent': 'How to add an integer to each element in a list?', 'snippet': 'new_list = [(x + 1) for x in my_list]'}
score: 0.8596897660128707
{'intent': 'How to add an integer to each element in a list?', 'snippet': 'new_list = [(x + 1) for x in my_list]'}

422. input: sorted(set(itertools.chain.from_iterable(sequences)))
score: 0.8677159882919543
{'intent': 'Remove duplicates elements from list `sequences` and sort it in ascending order', 'snippet': 'sorted(set(itertools.chain.from_iterable(sequences)))'}
score: 0.8677159882919543
{'intent': 'remove duplicates elements from list `sequences` and sort it in ascending order', 'snippet': 'sorted(set(itertools.chain.from_iterable(sequences)))'}
score: 0.8116613716065064
{'intent': 'Best / most pythonic way to get an ordered list of unique items', 'snippet': 'sorted(set(itertools.chain.from_iterable(sequences)))'}

423. input: method()
score: 0.5322559750683499
{'intent': "how do i access a object's method when the method's name is in a variable?", 'snippet': 'getattr(test, method)()'}
score: 0.5322559750683499
{'intent': "How do I access a object's method when the method's name is in a variable?", 'snippet': 'getattr(test, method)()'}
score: 0.5176542958912699
{'intent': "how do i access a object's method when the method's name is in a variable?", 'snippet': 'getattr(test, method)'}

424. input: df[df.iloc[0].replace('', np.nan).dropna().index]
score: 0.9284549067316694
{'intent': 'Find cells with data and use as index in dataframe', 'snippet': "df[df.iloc[0].replace('', np.nan).dropna().index]"}
score: 0.7368108644063203
{'intent': 'remove nan from pandas series', 'snippet': 's.dropna()'}
score: 0.7349064306567106
{'intent': 'How to drop rows of Pandas DataFrame whose value in certain columns is NaN', 'snippet': 'df.dropna(subset=[1])'}

425. input: DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()
score: 0.9118685427515306
{'intent': 'convert a pandas `df1` groupby object to dataframe', 'snippet': "DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()"}
score: 0.9075042035384403
{'intent': 'Converting a Pandas GroupBy object to DataFrame', 'snippet': "DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()"}
score: 0.9075042035384403
{'intent': 'Converting a Pandas GroupBy object to DataFrame', 'snippet': "DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()"}

426. input: python string to unicode
score: 0.8691786747552922
{'intent': 'python string to unicode', 'snippet': "str(a, 'unicode-escape')"}
score: 0.8497148158029817
{'intent': 'How do I convert unicode code to string in Python?', 'snippet': "print(text.decode('unicode-escape'))"}
score: 0.8497148158029817
{'intent': 'how do i convert unicode code to string in python?', 'snippet': "print(text.decode('unicode-escape'))"}

427. input: create a list that contain each line of a file
score: 0.7361040236983841
{'intent': "read file 'filename' line by line into a list `lines`", 'snippet': "with open('filename') as f:\n    lines = f.readlines()"}
score: 0.7232626081326868
{'intent': 'Creating List From File In Python', 'snippet': 'your_list = [int(i) for i in f.read().split()]'}
score: 0.7232626081326868
{'intent': 'creating list from file in python', 'snippet': 'your_list = [int(i) for i in f.read().split()]'}

428. input: numpy.array([[1, 2], [3, 4]])
score: 0.8875258044047489
{'intent': 'List of lists into numpy array', 'snippet': 'numpy.array([[1, 2], [3, 4]])'}
score: 0.8875258044047489
{'intent': 'List of lists into numpy array', 'snippet': 'numpy.array([[1, 2], [3, 4]])'}
score: 0.8875258044047489
{'intent': 'list of lists into numpy array', 'snippet': 'numpy.array([[1, 2], [3, 4]])'}

429. input: how to make subprocess called with call/popen inherit environment variables
score: 0.8110114511192176
{'intent': 'how to make subprocess called with call/Popen inherit environment variables', 'snippet': "subprocess.check_output(['newscript.sh'])"}
score: 0.7358400023896157
{'intent': 'how to get environment from a subprocess in python', 'snippet': "subprocess.Popen('proc2', env=env)"}
score: 0.7358400023896157
{'intent': 'How to get environment from a subprocess in Python', 'snippet': "subprocess.Popen('proc2', env=env)"}

430. input: python returning unique words from a list (case insensitive)
score: 0.8681138866280784
{'intent': 'Python returning unique words from a list (case insensitive)', 'snippet': "['We', 'are', 'one', 'the', 'world', 'UNIVERSE']"}
score: 0.6583792476580964
{'intent': 'check if all string elements in list `words` are upper-cased', 'snippet': 'print(all(word[0].isupper() for word in words))'}
score: 0.6583792476580964
{'intent': 'check if all string elements in list `words` are upper-cased', 'snippet': 'print(all(word[0].isupper() for word in words))'}

431. input: how to fetch a substring from text file in python?
score: 0.7550174364103914
{'intent': 'How to fetch a substring from text file in python?', 'snippet': "print(re.sub('.+ \\\\+(\\\\d+ ){3}', '', data))"}
score: 0.6936763608282074
{'intent': 'Extracting data from a text file with Python', 'snippet': "print('\\n'.join(to_search[NAME]))"}
score: 0.6936763608282074
{'intent': 'extracting data from a text file with python', 'snippet': "print('\\n'.join(to_search[NAME]))"}

432. input: mylist[:] = [s.replace(':', '') for s in mylist]
score: 0.796017458640209
{'intent': 'replace items in list, python', 'snippet': "yourlist = ['{}_{}_{}'.format(s.rsplit('_', 2)[0], x, y) for s in yourlist]"}
score: 0.7750641028925616
{'intent': 'Replace a string in list of lists', 'snippet': "example = [[x.replace('\\r\\n', '') for x in i] for i in example]"}
score: 0.7750641028925616
{'intent': 'replace a string in list of lists', 'snippet': "example = [[x.replace('\\r\\n', '') for x in i] for i in example]"}

433. input: np.where(np.diff(arr[:, (1)]))[0] + 1
score: 0.7377671386247732
{'intent': 'Python: Split NumPy array based on values in the array', 'snippet': 'np.where(np.diff(arr[:, (1)]))[0] + 1'}
score: 0.6793862421767374
{'intent': 'Python: Split NumPy array based on values in the array', 'snippet': 'np.diff(arr[:, (1)])'}
score: 0.6793862421767374
{'intent': 'python: split numpy array based on values in the array', 'snippet': 'np.diff(arr[:, (1)])'}

434. input: print(''.join(L))
score: 0.8129594789307577
{'intent': 'Pythonic way to print list items', 'snippet': "print(''.join([str(x) for x in l]))"}
score: 0.8129594789307577
{'intent': 'pythonic way to print list items', 'snippet': "print(''.join([str(x) for x in l]))"}
score: 0.8117410891572974
{'intent': 'Python printing without commas', 'snippet': "print(' '.join(map(str, l)))"}

435. input: don't show zero values on 2d heat map
score: 0.5847070806251609
{'intent': 'plotting a 2d heatmap with matplotlib', 'snippet': 'plt.show()'}
score: 0.5847070806251609
{'intent': 'plotting a 2d heatmap with matplotlib', 'snippet': 'plt.show()'}
score: 0.5847070806251609
{'intent': 'Plotting a 2D heatmap with Matplotlib', 'snippet': 'plt.show()'}

436. input: setattr(self, attr, group)
score: 0.8679545820017953
{'intent': 'assign value in `group` dynamically to class property `attr`', 'snippet': 'setattr(self, attr, group)'}
score: 0.7354663666507484
{'intent': 'How to dynamically assign values to class properties in Python?', 'snippet': 'setattr(self, attr, group)'}
score: 0.7354663666507484
{'intent': 'how to dynamically assign values to class properties in python?', 'snippet': 'setattr(self, attr, group)'}

437. input: dict((m.get(k, k), v) for k, v in list(d.items()))
score: 0.8500156153269609
{'intent': 'One-line expression to map dictionary to another', 'snippet': 'dict([(m.get(k, k), v) for k, v in list(d.items())])'}
score: 0.8500156153269609
{'intent': 'one-line expression to map dictionary to another', 'snippet': 'dict([(m.get(k, k), v) for k, v in list(d.items())])'}
score: 0.8438273784911066
{'intent': 'One-line expression to map dictionary to another', 'snippet': 'dict((m.get(k, k), v) for k, v in list(d.items()))'}

438. input: print('there are {0:<10} students and {1:<10} teachers'.format(scnt, tcnt))
score: 0.8221200234981539
{'intent': 'str.format() -> how to left-justify', 'snippet': "print('there are {0:<10} students and {1:<10} teachers'.format(scnt, tcnt))"}
score: 0.4796991575627528
{'intent': "print multiple arguments 'name' and 'score'.", 'snippet': "print('Total score for {} is {}'.format(name, score))"}
score: 0.4796991575627528
{'intent': "print multiple arguments 'name' and 'score'.", 'snippet': "print('Total score for {} is {}'.format(name, score))"}

439. input: ['Afghanistan', 'Japan', 'United Arab Emirates']
score: 0.2764286827837015
{'intent': 'Getting an element from tuple of tuples in python', 'snippet': "[x for x in COUNTRIES if x[0] == 'AS'][0][1]"}
score: 0.27038527742376783
{'intent': 'getting an element from tuple of tuples in python', 'snippet': "[x[1] for x in COUNTRIES if x[0] == 'AS'][0]"}
score: 0.27038527742376783
{'intent': 'Getting an element from tuple of tuples in python', 'snippet': "[x[1] for x in COUNTRIES if x[0] == 'AS'][0]"}

440. input: how can i "divide" words with regular expressions?
score: 0.7647304600651706
{'intent': 'how can i "divide" words with regular expressions?', 'snippet': "print(re.match('[^/]+', text).group(0))"}
score: 0.7647304600651706
{'intent': 'How can I "divide" words with regular expressions?', 'snippet': "print(re.match('[^/]+', text).group(0))"}
score: 0.6227967838690589
{'intent': 'Determining the unmatched portion of a string using a regex in Python', 'snippet': "re.split('(\\\\W+)', 'Words, words, words.')"}

441. input: pd.to_numeric(df['y'], errors='coerce')
score: 0.7628591741665044
{'intent': 'pandas: change data type of columns', 'snippet': "pd.to_numeric(s, errors='ignore')"}
score: 0.7520904891588588
{'intent': 'How to set a cell to NaN in a pandas dataframe', 'snippet': "pd.to_numeric(df['y'], errors='coerce')"}
score: 0.7082872768200283
{'intent': 'Pandas: change data type of columns', 'snippet': "df.apply(lambda x: pd.to_numeric(x, errors='ignore'))"}

442. input: cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))
score: 0.9387759421191528
{'intent': 'Execute a sql statement using variables `var1`, `var2` and `var3`', 'snippet': "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))"}
score: 0.9387759421191528
{'intent': 'execute a sql statement using variables `var1`, `var2` and `var3`', 'snippet': "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))"}
score: 0.8988199204347037
{'intent': "insert variables `(var1, var2, var3)` into sql statement 'insert into table values (?, ?, ?)'", 'snippet': "cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))"}

443. input: how to convert integer value to array of four bytes in python
score: 0.8748388464838449
{'intent': 'how to convert integer value to array of four bytes in python', 'snippet': "struct.unpack('4b', struct.pack('I', 100))"}
score: 0.8748388464838449
{'intent': 'How to convert integer value to array of four bytes in python', 'snippet': "struct.unpack('4b', struct.pack('I', 100))"}
score: 0.8498959237525383
{'intent': 'How to convert integer value to array of four bytes in python', 'snippet': "tuple(struct.pack('!I', number))"}

444. input: how to capitalize the first letter of each word in a string (python)?
score: 0.8767000965319866
{'intent': 'how to capitalize the first letter of each word in a string (python)?', 'snippet': '"""they\'re bill\'s friends from the UK""".title()'}
score: 0.73251711776954
{'intent': 'code to detect all words that start with a capital letter in a string', 'snippet': 'print([word for word in words if word[0].isupper()])'}
score: 0.73251711776954
{'intent': 'Code to detect all words that start with a capital letter in a string', 'snippet': 'print([word for word in words if word[0].isupper()])'}

445. input: how to put the legend out of the plot
score: 0.8214223725607177
{'intent': 'How to put the legend out of the plot', 'snippet': 'ax.legend()'}
score: 0.7763358628284899
{'intent': 'How to put the legend out of the plot', 'snippet': 'plt.show()'}
score: 0.6149286195937733
{'intent': 'Pandas (python) plot() without a legend', 'snippet': 'df.plot(legend=False)'}

446. input: python: how to sort array of dicts by two fields?
score: 0.8619018251241315
{'intent': 'Python: how to sort array of dicts by two fields?', 'snippet': "ws.sort(key=lambda datum: (datum['date'], datum['type'], datum['location']))"}
score: 0.7786507619475965
{'intent': 'sorting a list of dicts by dict values', 'snippet': 'sorted(a, key=dict.values, reverse=True)'}
score: 0.7786507619475965
{'intent': 'Sorting a list of dicts by dict values', 'snippet': 'sorted(a, key=dict.values, reverse=True)'}

447. input: how do i give focus to a python tkinter text widget?
score: 0.935409991910499
{'intent': 'How do I give focus to a python Tkinter text widget?', 'snippet': 'root.mainloop()'}
score: 0.8545391246788785
{'intent': 'make tkinter widget take focus', 'snippet': 'root.mainloop()'}
score: 0.8545391246788785
{'intent': 'Make Tkinter widget take focus', 'snippet': 'root.mainloop()'}

448. input: (x * x for x in range(10))
score: 0.7895838797127523
{'intent': 'Python: print a generator expression?', 'snippet': '(x * x for x in range(10))'}
score: 0.7101180349247102
{'intent': 'Python: Lambda function in List Comprehensions', 'snippet': '[(x * x) for x in range(10)]'}
score: 0.6975575733945955
{'intent': 'Python: Lambda function in List Comprehensions', 'snippet': '[lambda x: (x * x for x in range(10))]'}

449. input: self.button.clicked.connect(self.calluser)
score: 0.6596479525146861
{'intent': 'How to pass arguments to functions by the click of button in PyQt?', 'snippet': 'self.button.clicked.connect(self.calluser)'}
score: 0.5543949057105733
{'intent': 'PyQt dialog - How to make it quit after pressing a button?', 'snippet': 'btn.clicked.connect(self.close)'}
score: 0.5543949057105733
{'intent': 'pyqt dialog - how to make it quit after pressing a button?', 'snippet': 'btn.clicked.connect(self.close)'}

450. input: [i for i in range(10) if i % 2 == 0]
score: 0.743105793453533
{'intent': 'Show me some cool python list comprehensions', 'snippet': '[i for i in range(10) if i % 2 == 0]'}
score: 0.6882085536783704
{'intent': 'loop through 0 to 10 with step 2', 'snippet': 'for i in range(0, 10, 2):\n    pass'}
score: 0.6882085536783704
{'intent': 'loop through 0 to 10 with step 2', 'snippet': 'for i in range(0, 10, 2):\n    pass'}

451. input: confusing with the usage of regex in python
score: 0.7569430444252199
{'intent': 'confusing with the usage of regex in python', 'snippet': "re.findall('[a-z]*', '123abc789')"}
score: 0.7569430444252199
{'intent': 'Confusing with the usage of regex in Python', 'snippet': "re.findall('[a-z]*', '123abc789')"}
score: 0.7524102806465403
{'intent': 'Confusing with the usage of regex in Python', 'snippet': "re.search('[a-z]*', '1234')"}

452. input: how can i get an email message's text content using python?
score: 0.9136878075362425
{'intent': "How can I get an email message's text content using python?", 'snippet': 'msg.get_payload()'}
score: 0.9097813888332608
{'intent': "how can i get an email message's text content using python?", 'snippet': 'print(part.get_payload())'}
score: 0.6832738633912365
{'intent': 'parsing email with python', 'snippet': "print(msg['Subject'])"}

453. input: pattern = '6 of\\s+(\\S+)\\s+fans'
score: 0.7789052010836841
{'intent': 'Wildcard matching a string in Python regex search', 'snippet': "pattern = '6 of\\\\s+(\\\\S+)\\\\s+fans'"}
score: 0.7576540357236006
{'intent': 'wildcard matching a string in python regex search', 'snippet': "pattern = '6 of\\\\s+(.+?)\\\\s+fans'"}
score: 0.7576540357236006
{'intent': 'Wildcard matching a string in Python regex search', 'snippet': "pattern = '6 of\\\\s+(.+?)\\\\s+fans'"}

454. input: arrange labels for plots on multiple panels to be in one line in matplotlib
score: 0.9011847564418033
{'intent': 'arrange labels for plots on multiple panels to be in one line in matplotlib', 'snippet': 'ax.yaxis.set_label_coords(0.5, 0.5)'}
score: 0.9011847564418033
{'intent': 'arrange labels for plots on multiple panels to be in one line in matplotlib', 'snippet': 'ax.yaxis.set_label_coords(0.5, 0.5)'}
score: 0.8889461850336846
{'intent': 'arrange labels for plots on multiple panels to be in one line in matplotlib', 'snippet': 'ax.yaxis.set_major_formatter(formatter)'}

455. input: how do i plot multiple x or y axes in matplotlib?
score: 0.9108815165884087
{'intent': 'How do I plot multiple X or Y axes in matplotlib?', 'snippet': 'plt.show()'}
score: 0.9108815165884087
{'intent': 'How do I plot multiple X or Y axes in matplotlib?', 'snippet': 'plt.show()'}
score: 0.9108815165884087
{'intent': 'how do i plot multiple x or y axes in matplotlib?', 'snippet': 'plt.show()'}

456. input: pandas: how to do multiple groupby-apply operations
score: 0.8588848236044724
{'intent': 'pandas: how to do multiple groupby-apply operations', 'snippet': "df.groupby(level=0).agg(['sum', 'count', 'std'])"}
score: 0.8588848236044724
{'intent': 'pandas: how to do multiple groupby-apply operations', 'snippet': "df.groupby(level=0).agg(['sum', 'count', 'std'])"}
score: 0.8246189748584324
{'intent': 'how to get multiple conditional operations after a pandas groupby?', 'snippet': "return df.groupby('A').apply(my_func)"}

457. input: df[last_row.argsort()]
score: 0.8645749299046985
{'intent': 'Python pandas order column according to the values in a row', 'snippet': 'df[last_row.argsort()]'}
score: 0.6957167480057584
{'intent': 'How to select the last column of dataframe', 'snippet': 'df[df.columns[-1]]'}
score: 0.6719842744560723
{'intent': 'return dataframe `df` with last row dropped', 'snippet': 'df.ix[:-1]'}

458. input: sorted(list(dictionary.items()), key=operator.itemgetter(1))
score: 0.9193073950527904
{'intent': 'Sorting the content of a dictionary by the value and by the key', 'snippet': 'sorted(list(d.items()), key=operator.itemgetter(1, 0))'}
score: 0.9173594660319704
{'intent': 'sort dictionary `dictionary` in ascending order by its values', 'snippet': 'sorted(list(dictionary.items()), key=operator.itemgetter(1))'}
score: 0.9173594660319704
{'intent': 'sort dictionary `dictionary` in ascending order by its values', 'snippet': 'sorted(list(dictionary.items()), key=operator.itemgetter(1))'}

459. input: changing file permission in python
score: 0.8118950921854194
{'intent': 'Changing file permission in python', 'snippet': "subprocess.call(['chmod', '0444', 'path'])"}
score: 0.8118950921854194
{'intent': 'changing file permission in python', 'snippet': "subprocess.call(['chmod', '0444', 'path'])"}
score: 0.7533488372071411
{'intent': 'Changing file permission in python', 'snippet': 'os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)'}

460. input: p.Series([1, 3, 5, 10, 12, 20, 21, 25]).hist(bins=3, range=(0, 30)).figure
score: 0.6760500664543745
{'intent': 'How to choose bins in matplotlib histogram', 'snippet': 'plt.hist(x, bins=list(range(-4, 5)))'}
score: 0.620188398376829
{'intent': 'how to count values in a certain range in a numpy array?', 'snippet': 'numpy.histogram(a, bins=(25, 100))'}
score: 0.595566712680987
{'intent': 'Matplotlib: How to make two histograms have the same bin width?', 'snippet': 'plt.hist(b, bins)'}

461. input: difflib.SequenceMatcher(None, file1.read(), file2.read())
score: 0.9134521041283811
{'intent': 'compare contents  at filehandles `file1` and `file2` using difflib', 'snippet': 'difflib.SequenceMatcher(None, file1.read(), file2.read())'}
score: 0.9134521041283811
{'intent': 'compare contents  at filehandles `file1` and `file2` using difflib', 'snippet': 'difflib.SequenceMatcher(None, file1.read(), file2.read())'}
score: 0.8916971594631891
{'intent': 'Comparing two .txt files using difflib in Python', 'snippet': 'difflib.SequenceMatcher(None, file1.read(), file2.read())'}

462. input: understanding list comprehension for flattening list of lists in python
score: 0.9267659675270694
{'intent': 'understanding list comprehension for flattening list of lists in python', 'snippet': '[item for sublist in list_of_lists for item in sublist]'}
score: 0.9267659675270694
{'intent': 'understanding list comprehension for flattening list of lists in python', 'snippet': '[item for sublist in list_of_lists for item in sublist]'}
score: 0.9188552658534647
{'intent': 'understanding list comprehension for flattening list of lists in python', 'snippet': '[(item for sublist in list_of_lists) for item in sublist]'}

463. input: execute a put request to the url `url`
score: 0.5998920249968649
{'intent': 'Execute a put request to the url `url`', 'snippet': 'response = requests.put(url, data=json.dumps(data), headers=headers)'}
score: 0.5487077050584905
{'intent': 'Simple URL GET/POST function', 'snippet': 'r = requests.get(url)'}
score: 0.544045101546544
{'intent': 'Simple URL GET/POST function', 'snippet': 'r = requests.get(url, params=payload)'}

464. input: [int(i) for i in str_list]
score: 0.8873499739710269
{'intent': 'What is the easiest way to convert list with str into list with int?', 'snippet': '[int(i) for i in str_list]'}
score: 0.8873499739710269
{'intent': 'What is the easiest way to convert list with str into list with int?', 'snippet': '[int(i) for i in str_list]'}
score: 0.8600883124867528
{'intent': 'convert list of strings `str_list` into list of integers', 'snippet': '[int(i) for i in str_list]'}

465. input: how do i format a number with a variable number of digits in python?
score: 0.8916219853722939
{'intent': 'How do I format a number with a variable number of digits in Python?', 'snippet': '"""{num:0{width}}""".format(num=123, width=6)'}
score: 0.8808326346552144
{'intent': 'how do i format a number with a variable number of digits in python?', 'snippet': '"""12344""".zfill(10)'}
score: 0.8612560174661932
{'intent': 'How do I format a number with a variable number of digits in Python?', 'snippet': '"""One hundred and twenty three with three leading zeros {0:06}.""".format(123)'}

466. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

467. input: x11 forwarding with paramiko
score: 0.8378942476643534
{'intent': 'x11 forwarding with paramiko', 'snippet': "ssh_client.connect('server', username='username', password='password')"}
score: 0.81114798210977
{'intent': 'x11 forwarding with paramiko', 'snippet': 'ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())'}
score: 0.81114798210977
{'intent': 'x11 forwarding with paramiko', 'snippet': 'ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())'}

468. input: how to put the legend out of the plot
score: 0.8214223725607177
{'intent': 'How to put the legend out of the plot', 'snippet': 'ax.legend()'}
score: 0.7763358628284899
{'intent': 'How to put the legend out of the plot', 'snippet': 'plt.show()'}
score: 0.6149286195937733
{'intent': 'Pandas (python) plot() without a legend', 'snippet': 'df.plot(legend=False)'}

469. input: return [x for x in l if x % 2 == 0]
score: 0.6567018624766183
{'intent': 'Python: remove odd number from a list', 'snippet': 'return [x for x in l if x % 2 == 0]'}
score: 0.6490604719120789
{'intent': 'Python list comprehension - simple', 'snippet': '[(x * 2 if x % 2 == 0 else x) for x in a_list]'}
score: 0.6490604719120789
{'intent': 'python list comprehension - simple', 'snippet': '[(x * 2 if x % 2 == 0 else x) for x in a_list]'}

470. input: how to get the size of tar.gz in (mb) file in python
score: 0.9515642120515366
{'intent': 'How to get the size of tar.gz in (MB) file in python', 'snippet': "os.path.getsize('large.tar.gz') >> 20"}
score: 0.8723599961403876
{'intent': 'How to get the size of tar.gz in (MB) file in python', 'snippet': "os.path.getsize('flickrapi-1.2.tar.gz')"}
score: 0.8723599961403876
{'intent': 'how to get the size of tar.gz in (mb) file in python', 'snippet': "os.path.getsize('flickrapi-1.2.tar.gz')"}

471. input: sum of outer product of corresponding lists in two arrays - numpy
score: 0.8344878683642543
{'intent': 'sum of outer product of corresponding lists in two arrays - numpy', 'snippet': "np.einsum('ik,il->i', x, e)"}
score: 0.8344878683642543
{'intent': 'Sum of outer product of corresponding lists in two arrays - NumPy', 'snippet': "np.einsum('ik,il->i', x, e)"}
score: 0.820802997374358
{'intent': 'Sum of outer product of corresponding lists in two arrays - NumPy', 'snippet': "[np.einsum('i,j->', x[n], e[n]) for n in range(len(x))]"}

472. input: join two dataframes based on values in selected columns
score: 0.779769905893752
{'intent': 'How do I join two dataframes based on values in selected columns?', 'snippet': "pd.merge(a, b, on=['A', 'B'], how='outer')"}
score: 0.779769905893752
{'intent': 'How do I join two dataframes based on values in selected columns?', 'snippet': "pd.merge(a, b, on=['A', 'B'], how='outer')"}
score: 0.7695155181328814
{'intent': 'join two dataframes based on values in selected columns', 'snippet': "pd.merge(a, b, on=['A', 'B'], how='outer')"}

473. input: hex string to character in python
score: 0.8753973358379503
{'intent': 'Python: How to convert a string containing hex bytes to a hex string', 'snippet': "s.decode('hex')"}
score: 0.8753973358379503
{'intent': 'python: how to convert a string containing hex bytes to a hex string', 'snippet': "s.decode('hex')"}
score: 0.8753973358379503
{'intent': 'Python: How to convert a string containing hex bytes to a hex string', 'snippet': "s.decode('hex')"}

474. input: passing the '+' character in a post request in python
score: 0.8914709718861047
{'intent': "passing the '+' character in a post request in python", 'snippet': 'f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))'}
score: 0.8914709718861047
{'intent': "Passing the '+' character in a POST request in Python", 'snippet': 'f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))'}
score: 0.8914709718861047
{'intent': "Passing the '+' character in a POST request in Python", 'snippet': 'f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))'}

475. input: how do i specify a range of unicode characters
score: 0.7245302465562007
{'intent': 'how do i specify a range of unicode characters in a regular-expression in python?', 'snippet': '"""[\\\\u00d8-\\\\u00f6]"""'}
score: 0.7245302465562007
{'intent': 'How do I specify a range of unicode characters in a regular-expression in python?', 'snippet': '"""[\\\\u00d8-\\\\u00f6]"""'}
score: 0.7178052175425389
{'intent': 'How do I specify a range of unicode characters', 'snippet': "re.compile('[\\\\u0020-\\\\u00d7ff]', re.DEBUG)"}

476. input: find the index of sub string 'world' in `x`
score: 0.9138445838469132
{'intent': "find the index of sub string 'World' in `x`", 'snippet': "x.find('World')"}
score: 0.7081304472243226
{'intent': "find the index of sub string 'aloha' in `x`", 'snippet': "x.find('Aloha')"}
score: 0.7081304472243226
{'intent': "find the index of sub string 'Aloha' in `x`", 'snippet': "x.find('Aloha')"}

477. input: Model.query.filter(Model.columnName.contains('sub_string'))
score: 0.8969197476513627
{'intent': 'SQLAlchemy query where a column contains a substring', 'snippet': "Model.query.filter(Model.columnName.contains('sub_string'))"}
score: 0.6587404067492195
{'intent': 'Filter queryset for all objects in Django model `MyModel` where texts length are greater than `254`', 'snippet': "MyModel.objects.filter(text__regex='^.{254}.*')"}
score: 0.6587404067492195
{'intent': 'filter queryset for all objects in django model `mymodel` where texts length are greater than `254`', 'snippet': "MyModel.objects.filter(text__regex='^.{254}.*')"}

478. input: re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)
score: 0.9015653402360941
{'intent': 'find all occurrences of the pattern \'\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|"[^"]*"|\\\\S+\' within `strs`', 'snippet': 're.findall(\'\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|"[^"]*"|\\\\S+\', strs)'}
score: 0.8467295288008589
{'intent': 'Python splitting string by parentheses', 'snippet': 're.findall(\'\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|"[^"]*"|\\\\S+\', strs)'}
score: 0.8467295288008589
{'intent': 'python splitting string by parentheses', 'snippet': 're.findall(\'\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|"[^"]*"|\\\\S+\', strs)'}

479. input: how to plot a wav file
score: 0.7893145160893577
{'intent': 'How to plot a wav file', 'snippet': 'plt.show()'}
score: 0.7893145160893577
{'intent': 'how to plot a wav file', 'snippet': 'plt.show()'}
score: 0.7893145160893577
{'intent': 'How to plot a wav file', 'snippet': 'plt.show()'}

480. input: check if `x` is an integer
score: 0.8913508096752082
{'intent': 'check if `x` is an integer', 'snippet': '(type(x) == int)'}
score: 0.8805042176064695
{'intent': 'check if `x` is an integer', 'snippet': 'isinstance(x, int)'}
score: 0.8591349879734302
{'intent': 'Checking whether a variable is an integer', 'snippet': '(type(x) == int)'}

481. input: df2['group2']
score: 0.6466424176761347
{'intent': 'reshape pandas dataframe from rows to columns', 'snippet': "gb = df2.groupby('Name')"}
score: 0.6462944418781286
{'intent': 'Perform function on pairs of rows in Pandas dataframe', 'snippet': 'g = df.groupby(df.index // 2)'}
score: 0.6312629328946374
{'intent': 'Reshape pandas dataframe from rows to columns', 'snippet': "df2.groupby('Name').apply(tgrp)"}

482. input: eval('add')(x, y)
score: 0.772950170428548
{'intent': 'How to convert a string to a function in python?', 'snippet': "eval('add')(x, y)"}
score: 0.6174356296268452
{'intent': 'how to convert a string to a function in python?', 'snippet': "eval('add(3,4)', {'__builtins__': None}, dispatcher)"}
score: 0.6174356296268452
{'intent': 'How to convert a string to a function in python?', 'snippet': "eval('add(3,4)', {'__builtins__': None}, dispatcher)"}

483. input: python: how to get pid by process name?
score: 0.8919223420139767
{'intent': 'Python: How to get PID by process name?', 'snippet': "get_pid('java')"}
score: 0.8808691366132668
{'intent': 'Python: How to get PID by process name?', 'snippet': "get_pid('chrome')"}
score: 0.8808691366132668
{'intent': 'python: how to get pid by process name?', 'snippet': "get_pid('chrome')"}

484. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

485. input: creating a timer in python
score: 0.8700136464941475
{'intent': 'how to make a timer program in python', 'snippet': 'time.sleep(1)'}
score: 0.8700136464941475
{'intent': 'How to make a timer program in Python', 'snippet': 'time.sleep(1)'}
score: 0.8700136464941475
{'intent': 'how to make a timer program in python', 'snippet': 'time.sleep(1)'}

486. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

487. input: difference between these array shapes in numpy
score: 0.8265707342623452
{'intent': 'Difference between these array shapes in numpy', 'snippet': 'np.squeeze(np.array([[1], [2], [3]])).shape'}
score: 0.7661351786555175
{'intent': 'Numpy array dimensions', 'snippet': 'a.shape'}
score: 0.7661351786555175
{'intent': 'Numpy array dimensions', 'snippet': 'a.shape'}

488. input: how to use sprite groups in pygame
score: 0.896191478980388
{'intent': 'How to use sprite groups in pygame', 'snippet': 'gems = pygame.sprite.Group()'}
score: 0.6522849501416093
{'intent': 'how to implement jump in pygame without sprites?', 'snippet': 'pygame.init()'}
score: 0.6274129614530024
{'intent': 'how to implement jump in pygame without sprites?', 'snippet': 'pygame.display.flip()'}

489. input: sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
score: 0.866423556848686
{'intent': 'Python [Errno 98] Address already in use', 'snippet': 'sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)'}
score: 0.8526405605305326
{'intent': 'Enable the SO_REUSEADDR socket option in socket object `s` to fix the error `only one usage of each socket address is normally permitted`', 'snippet': 's.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)'}
score: 0.8526405605305326
{'intent': 'enable the so_reuseaddr socket option in socket object `s` to fix the error `only one usage of each socket address is normally permitted`', 'snippet': 's.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)'}

490. input: sqlalchemy add child in one-to-many relationship
score: 0.8920509992737127
{'intent': 'sqlalchemy add child in one-to-many relationship', 'snippet': 'session.commit()'}
score: 0.8689533239870131
{'intent': 'sqlalchemy add child in one-to-many relationship', 'snippet': "parent = relationship('Parent', backref=backref('children', lazy='noload'))"}
score: 0.8689533239870131
{'intent': 'sqlalchemy add child in one-to-many relationship', 'snippet': "parent = relationship('Parent', backref=backref('children', lazy='noload'))"}

491. input: x_file = open(os.path.join(direct, '5_1.txt'), 'r')
score: 0.9576729413613438
{'intent': "open file '5_1.txt' in directory `direct`", 'snippet': "x_file = open(os.path.join(direct, '5_1.txt'), 'r')"}
score: 0.8363895987044735
{'intent': 'how to read a file in other directory in python', 'snippet': "x_file = open(os.path.join(direct, '5_1.txt'), 'r')"}
score: 0.8363895987044735
{'intent': 'how to read a file in other directory in python', 'snippet': "x_file = open(os.path.join(direct, '5_1.txt'), 'r')"}

492. input: image embossing in python with pil -- adding depth, azimuth, etc
score: 0.8758083384141984
{'intent': 'Image embossing in Python with PIL -- adding depth, azimuth, etc', 'snippet': 'ImageFilter.EMBOSS.filterargs = (3, 3), 1, 128, (-1, 0, 0, 0, 1, 0, 0, 0, 0)'}
score: 0.607379888813914
{'intent': 'python pil: how to draw an ellipse in the middle of an image?', 'snippet': 'im.show()'}
score: 0.5724772312059173
{'intent': 'How to find subimage using the PIL library?', 'snippet': 'print(np.unravel_index(result.argmax(), result.shape))'}

493. input: get the dimensions of numpy array `a`
score: 0.9024523989600537
{'intent': 'get the dimensions of numpy array `a`', 'snippet': 'a.shape'}
score: 0.9024523989600537
{'intent': 'get the dimensions of numpy array `a`', 'snippet': 'a.shape'}
score: 0.9024523989600537
{'intent': 'get the dimensions of numpy array `a`', 'snippet': 'a.shape'}

494. input: how to spawn new independent process in python
score: 0.802851021727026
{'intent': 'how to spawn new independent process in python', 'snippet': "Popen(['nohup', 'script.sh'], stdout=devnull, stderr=devnull)"}
score: 0.6113008372855004
{'intent': 'How to start a background process in Python?', 'snippet': "os.system('some_command &')"}
score: 0.6113008372855004
{'intent': 'how to start a background process in python?', 'snippet': "os.system('some_command &')"}

495. input: format current date to pattern '{%y-%m-%d %h:%m:%s}'
score: 0.8591784018266881
{'intent': "format current date to pattern '{%Y-%m-%d %H:%M:%S}'", 'snippet': "time.strftime('{%Y-%m-%d %H:%M:%S}')"}
score: 0.8010268283959682
{'intent': "formate current date and time to a string using pattern '%y-%m-%d %h:%m:%s'", 'snippet': "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')"}
score: 0.8010268283959682
{'intent': "Formate current date and time to a string using pattern '%Y-%m-%d %H:%M:%S'", 'snippet': "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')"}

496. input: pandas: how do i split multiple lists in columns into multiple rows?
score: 0.7647588595698408
{'intent': 'Splitting a list in a Pandas cell into multiple columns', 'snippet': 'pd.concat([df[0].apply(pd.Series), df[1]], axis=1)'}
score: 0.6818994565878647
{'intent': 'splitting dictionary/list inside a pandas column into separate columns', 'snippet': "pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)"}
score: 0.6818994565878647
{'intent': 'Splitting dictionary/list inside a Pandas Column into Separate Columns', 'snippet': "pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)"}

497. input: converting json string to dictionary not list
score: 0.8209653164909048
{'intent': 'Converting JSON String to Dictionary Not List', 'snippet': 'json1_data = json.loads(json1_str)[0]'}
score: 0.7614323661082061
{'intent': 'Converting a String into Dictionary python', 'snippet': 'json.loads(s)'}
score: 0.7614323661082061
{'intent': 'converting a string into dictionary python', 'snippet': 'json.loads(s)'}

498. input: webbrowser.open('mailto:test@example.com?subject=Hello World')
score: 0.8239455664354058
{'intent': "How to open the user's preferred mail application on Linux?", 'snippet': "webbrowser.open('mailto:test@example.com?subject=Hello World')"}
score: 0.6319791207199892
{'intent': "webbrowser open url 'http://example.com'", 'snippet': "webbrowser.open('http://example.com')"}
score: 0.6319791207199892
{'intent': "webbrowser open url 'http://example.com'", 'snippet': "webbrowser.open('http://example.com')"}

499. input: convert a binary '-0b1110' to a float number
score: 0.9423295084840763
{'intent': 'How can I convert a binary to a float number', 'snippet': "float(int('-0b1110', 0))"}
score: 0.9423295084840763
{'intent': 'How can I convert a binary to a float number', 'snippet': "float(int('-0b1110', 0))"}
score: 0.9423295084840763
{'intent': 'how can i convert a binary to a float number', 'snippet': "float(int('-0b1110', 0))"}

500. input: exec(compile(open('file.py').read(), 'file.py', 'exec'))
score: 0.9438320070583482
{'intent': "execute file 'filename.py'", 'snippet': "exec(compile(open('filename.py').read(), 'filename.py', 'exec'))"}
score: 0.9438320070583482
{'intent': "execute file 'filename.py'", 'snippet': "exec(compile(open('filename.py').read(), 'filename.py', 'exec'))"}
score: 0.9107971876331715
{'intent': 'how to execute a file within the python interpreter?', 'snippet': "exec(compile(open('filename.py').read(), 'filename.py', 'exec'))"}

501. input: matplotlib: specify format of floats for tick lables
score: 0.8577925541942073
{'intent': 'Matplotlib: Specify format of floats for tick lables', 'snippet': "ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))"}
score: 0.7061367316470886
{'intent': 'matplotlib: how to force integer tick labels?', 'snippet': 'plt.show()'}
score: 0.7045050965350439
{'intent': 'mark ticks in latex in matplotlib', 'snippet': 'plt.show()'}

502. input: np.mgrid[0:5, 0:5].transpose(1, 2, 0).reshape(-1, 2)
score: 0.8307481175885276
{'intent': 'Access all elements at given x, y position in 3-dimensional numpy array', 'snippet': 'np.mgrid[0:5, 0:5].transpose(1, 2, 0).reshape(-1, 2)'}
score: 0.6910302798700042
{'intent': 'Reshaping array into a square array Python', 'snippet': 'x.reshape(2, 2, 5).transpose(1, 0, 2)'}
score: 0.6910302798700042
{'intent': 'reshaping array into a square array python', 'snippet': 'x.reshape(2, 2, 5).transpose(1, 0, 2)'}

503. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

504. input: how to sort a dataframe in python pandas by two or more columns?
score: 0.8877284042533717
{'intent': 'How to sort a dataFrame in python pandas by two or more columns?', 'snippet': "df1.sort(['a', 'b'], ascending=[True, False], inplace=True)"}
score: 0.8877284042533717
{'intent': 'how to sort a dataframe in python pandas by two or more columns?', 'snippet': "df1.sort(['a', 'b'], ascending=[True, False], inplace=True)"}
score: 0.8877284042533717
{'intent': 'How to sort a dataFrame in python pandas by two or more columns?', 'snippet': "df1.sort(['a', 'b'], ascending=[True, False], inplace=True)"}

505. input: order of operations in a dictionary comprehension
score: 0.7273798880529385
{'intent': 'Order of operations in a dictionary comprehension', 'snippet': 'my_dict = {x[0]: x[1:] for x in my_list}'}
score: 0.5622820202929754
{'intent': 'iterate over a dictionary `foo` in sorted order', 'snippet': 'for (k, v) in sorted(foo.items()):\n    pass'}
score: 0.5622820202929754
{'intent': 'iterate over a dictionary `foo` in sorted order', 'snippet': 'for (k, v) in sorted(foo.items()):\n    pass'}

506. input: how to print with inline if statement?
score: 0.5796244081757358
{'intent': 'How to make print statement one line in python?', 'snippet': "print('If a hippo ways 2000 pounds, gives birth to a 100 pound calf and ' + 'then eats a 50 pound meal how much does she weigh?')"}
score: 0.5796244081757358
{'intent': 'how to make print statement one line in python?', 'snippet': "print('If a hippo ways 2000 pounds, gives birth to a 100 pound calf and ' + 'then eats a 50 pound meal how much does she weigh?')"}
score: 0.5676804236691481
{'intent': 'how to make print statement one line in python?', 'snippet': "print('If a hippo ways 2000 pounds, gives birth to a 100 pound calf and then eats a 50 pound meal how much does she weigh?')"}

507. input: get array values in python
score: 0.7739898529149871
{'intent': 'get array values in python', 'snippet': '[(1, 3), (3, 4), (4, None)]'}
score: 0.7215485903915972
{'intent': 'JSON in Python: How do I get specific parts of an array?', 'snippet': '[1505]'}
score: 0.7215485903915972
{'intent': 'json in python: how do i get specific parts of an array?', 'snippet': '[1505]'}

508. input: how to de-import a python module?
score: 0.8159805915083927
{'intent': 'How to de-import a Python module?', 'snippet': "delete_module('psyco', ['Psycho', 'KillerError'])"}
score: 0.7806677583068087
{'intent': 'import a module in python', 'snippet': '__init__.py'}
score: 0.7806677583068087
{'intent': 'Import a module in Python', 'snippet': '__init__.py'}

509. input: replace occurrences of two whitespaces or more with one whitespace ' ' in string `s`
score: 0.8391170453470943
{'intent': "replace occurrences of two whitespaces or more with one whitespace ' ' in string `s`", 'snippet': "re.sub(' +', ' ', s)"}
score: 0.7583228837785441
{'intent': 'How to strip all whitespace from string', 'snippet': "s.replace(' ', '')"}
score: 0.7583228837785441
{'intent': 'how to strip all whitespace from string', 'snippet': "s.replace(' ', '')"}

510. input: numpy.sort(arr, axis=0)
score: 0.8790883081954517
{'intent': 'sort rows of numpy matrix `arr` in ascending order according to all column values', 'snippet': 'numpy.sort(arr, axis=0)'}
score: 0.8727957876306437
{'intent': 'sort numpy matrix row values in ascending order', 'snippet': 'numpy.sort(arr, axis=0)'}
score: 0.8727957876306437
{'intent': 'Sort numpy matrix row values in ascending order', 'snippet': 'numpy.sort(arr, axis=0)'}

511. input: get the non-masked values of array `m`
score: 0.9370810387463526
{'intent': 'get the non-masked values of array `m`', 'snippet': 'm[~m.mask]'}
score: 0.7050450757268576
{'intent': 'Finding missing values in a numpy array', 'snippet': 'm[~m.mask]'}
score: 0.7050450757268576
{'intent': 'finding missing values in a numpy array', 'snippet': 'm[~m.mask]'}

512. input: soup.find_all('div', class_='stylelistrow')
score: 0.9556751451501926
{'intent': 'How to find elements by class', 'snippet': "soup.find_all('div', class_='stylelistrow')"}
score: 0.9425327086209042
{'intent': 'how to find elements by class', 'snippet': "soup.find_all('div', class_='stylelistrowone stylelistrowtwo')"}
score: 0.9425327086209042
{'intent': 'How to find elements by class', 'snippet': "soup.find_all('div', class_='stylelistrowone stylelistrowtwo')"}

513. input: anchor or lock text to a marker in matplotlib
score: 0.9294247437016996
{'intent': 'anchor or lock text to a marker in matplotlib', 'snippet': 'plt.show()'}
score: 0.8691098701006101
{'intent': 'Anchor or lock text to a marker in Matplotlib', 'snippet': "ax.annotate(str(y), xy=(x, y), xytext=(-5.0, -5.0), textcoords='offset points')"}
score: 0.6782566802722071
{'intent': 'matplotlib: Set markers for individual points on a line', 'snippet': 'plt.show()'}

514. input: get creation time of file `file`
score: 0.8967585436781376
{'intent': 'get creation time of file `file`', 'snippet': 'time.ctime(os.path.getctime(file))'}
score: 0.8742547607318658
{'intent': 'get the creation time of file `file`', 'snippet': "print(('created: %s' % time.ctime(os.path.getctime(file))))"}
score: 0.8742547607318658
{'intent': 'get the creation time of file `file`', 'snippet': "print(('created: %s' % time.ctime(os.path.getctime(file))))"}

515. input: how to convert the following string in python?
score: 0.727093466458137
{'intent': 'how to convert the following string in python?', 'snippet': "print('/'.join(new))"}
score: 0.727093466458137
{'intent': 'How to convert the following string in python?', 'snippet': "print('/'.join(new))"}
score: 0.7252886204057631
{'intent': 'string to list conversion in python', 'snippet': "[x.strip() for x in s.split(',')]"}

516. input: split string `s` based on white spaces
score: 0.8064201778357265
{'intent': 'split string `s` based on white spaces', 'snippet': "re.findall('\\\\s+|\\\\S+', s)"}
score: 0.7484279264310147
{'intent': 'Split string on whitespace in Python', 'snippet': "re.split('\\\\s+', s)"}
score: 0.7484279264310147
{'intent': 'split string on whitespace in python', 'snippet': "re.split('\\\\s+', s)"}

517. input: get element at index 0 of each list in column 'value' of dataframe `df`
score: 0.9238610062847712
{'intent': "get element at index 0 of each list in column 'value' of dataframe `df`", 'snippet': "df['value'] = df['value'].str.get(0)"}
score: 0.8070760600276766
{'intent': 'get index values of pandas dataframe `df` as list', 'snippet': 'df.index.values.tolist()'}
score: 0.7967234210458286
{'intent': 'Get index values of Pandas DataFrame as list?', 'snippet': 'df.index.values.tolist()'}

518. input: python - removing vertical bar lines from histogram
score: 0.912282029469919
{'intent': 'Python - Removing vertical bar lines from histogram', 'snippet': 'plt.show()'}
score: 0.6404662658725253
{'intent': 'python: plotting a histogram with a function line on top', 'snippet': 'plt.show()'}
score: 0.6404662658725253
{'intent': 'python: plotting a histogram with a function line on top', 'snippet': 'plt.show()'}

519. input: print(re.sub('(.+)(?<=\\1)', '(\\g<0>)', test))
score: 0.8039129102923834
{'intent': 'Impossible lookbehind with a backreference', 'snippet': "print(re.sub('(.+)(?<=\\\\1)', '(\\\\g<0>)', test))"}
score: 0.7843282281838
{'intent': 'impossible lookbehind with a backreference', 'snippet': "print(re.sub('(.)(?<=\\\\1)', '(\\\\g<0>)', test))"}
score: 0.7843282281838
{'intent': 'Impossible lookbehind with a backreference', 'snippet': "print(re.sub('(.)(?<=\\\\1)', '(\\\\g<0>)', test))"}

520. input: plt.figure(figsize=(1, 1))
score: 0.7429469921608356
{'intent': 'Python Matplotlib - Impose shape dimensions with Imsave', 'snippet': 'plt.figure(figsize=(1, 1))'}
score: 0.7221667971467992
{'intent': 'change figure size to 3 by 4 in matplotlib', 'snippet': 'plt.figure(figsize=(3, 4))'}
score: 0.7221667971467992
{'intent': 'change figure size to 3 by 4 in matplotlib', 'snippet': 'plt.figure(figsize=(3, 4))'}

521. input: efficient calculation on a pandas dataframe
score: 0.6538576501041192
{'intent': 'Efficient calculation on a pandas dataframe', 'snippet': "C = pd.merge(C, A, on=['Canal', 'Gerencia'])"}
score: 0.6239023234746943
{'intent': 'efficiently applying a function to a grouped pandas dataframe in parallel', 'snippet': "df.set_index('key', inplace=True)"}
score: 0.6239023234746943
{'intent': 'Efficiently applying a function to a grouped pandas DataFrame in parallel', 'snippet': "df.set_index('key', inplace=True)"}

522. input: python: confusions with urljoin
score: 0.8883663169040259
{'intent': 'python: confusions with urljoin', 'snippet': "urljoin('http://some', 'thing')"}
score: 0.8818524870006884
{'intent': 'python: confusions with urljoin', 'snippet': "urljoin('some', 'thing')"}
score: 0.8445962832363095
{'intent': 'Python: confusions with urljoin', 'snippet': "urljoin('http://some/more/', '/thing')"}

523. input: put request to rest api using python
score: 0.8706271329882642
{'intent': 'PUT Request to REST API using Python', 'snippet': 'response = requests.put(url, data=json.dumps(data), headers=headers)'}
score: 0.8706271329882642
{'intent': 'PUT Request to REST API using Python', 'snippet': 'response = requests.put(url, data=json.dumps(data), headers=headers)'}
score: 0.8498616292201042
{'intent': 'making a request to a restful api using python', 'snippet': 'response = requests.post(url, data=data)'}

524. input: how do i use py2app?
score: 0.6026874540795297
{'intent': "taking a screenshot with pyglet [fix'd]", 'snippet': 'pyglet.app.run()'}
score: 0.6026874540795297
{'intent': "Taking a screenshot with Pyglet [Fix'd]", 'snippet': 'pyglet.app.run()'}
score: 0.5936158953269361
{'intent': "Run 'test2.py' file with python location 'path/to/python' and arguments 'neededArgumetGoHere' as a subprocess", 'snippet': "call(['path/to/python', 'test2.py', 'neededArgumetGoHere'])"}

525. input: ax.plot(x, y, z, label='parametric curve')
score: 0.6935108842113792
{'intent': 'matplotlib (mplot3d) - how to increase the size of an axis (stretch) in a 3D Plot?', 'snippet': "ax.plot(x, y, z, label='parametric curve')"}
score: 0.6508595881608011
{'intent': '3D plot with Matplotlib', 'snippet': "ax.set_ylabel('Y')"}
score: 0.6508595881608011
{'intent': '3d plot with matplotlib', 'snippet': "ax.set_ylabel('Y')"}

526. input: how do you get the text from an html 'datacell' using beautifulsoup
score: 0.9190267243786608
{'intent': "How do you get the text from an HTML 'datacell' using BeautifulSoup", 'snippet': "headerRows[0][10].findNext('b').string"}
score: 0.9101849429282485
{'intent': "how do you get the text from an html 'datacell' using beautifulsoup", 'snippet': "''.join([s.string for s in s.findAll(text=True)])"}
score: 0.9101849429282485
{'intent': "How do you get the text from an HTML 'datacell' using BeautifulSoup", 'snippet': "''.join([s.string for s in s.findAll(text=True)])"}

527. input: os.environ.get('DEBUSSY', 'Not Set')
score: 0.8674947751157873
{'intent': 'How to set environment variables in Python', 'snippet': "os.environ.get('DEBUSSY', 'Not Set')"}
score: 0.8549002125743611
{'intent': "set environment variable 'DEBUSSY' equal to 1", 'snippet': "os.environ['DEBUSSY'] = '1'"}
score: 0.8549002125743611
{'intent': "set environment variable 'debussy' equal to 1", 'snippet': "os.environ['DEBUSSY'] = '1'"}

528. input: indices = [i for i, x in enumerate(my_list) if x == 'whatever']
score: 0.8384776846819741
{'intent': 'How to find all occurrences of an element in a list?', 'snippet': "indices = [i for i, x in enumerate(my_list) if x == 'whatever']"}
score: 0.8384776846819741
{'intent': 'How to find all occurrences of an element in a list?', 'snippet': "indices = [i for i, x in enumerate(my_list) if x == 'whatever']"}
score: 0.8384776846819741
{'intent': 'How to find all occurrences of an element in a list?', 'snippet': "indices = [i for i, x in enumerate(my_list) if x == 'whatever']"}

529. input: how to get all children of queryset in django?
score: 0.857858321060923
{'intent': 'How to get all children of queryset in django?', 'snippet': "Animals.objects.filter(name__startswith='A')"}
score: 0.8399397027874864
{'intent': 'How to get all children of queryset in django?', 'snippet': "Category.objects.filter(animal__name__startswith='A')"}
score: 0.7320714836828107
{'intent': 'how do i query objects of all children of a node with django mptt?', 'snippet': 'Student.objects.filter(studentgroup__level__pk=1)'}

530. input: how to get the index of dictionary with the highest value in a list of dictionary
score: 0.8895573695588841
{'intent': 'how to get the index of dictionary with the highest value in a list of dictionary', 'snippet': "max(lst, key=lambda d: d['score'])"}
score: 0.8859782351105343
{'intent': 'how to get the index of dictionary with the highest value in a list of dictionary', 'snippet': "max(lst, key=lambda x: x['score'])"}
score: 0.8859782351105343
{'intent': 'how to get the index of dictionary with the highest value in a list of dictionary', 'snippet': "max(lst, key=lambda x: x['score'])"}

531. input: driver.find_element_by_xpath("//option[@value='" + state + "']").click()
score: 0.9285989596045534
{'intent': 'Using a variable in xpath in Python Selenium', 'snippet': 'driver.find_element_by_xpath("//option[@value=\'" + state + "\']").click()'}
score: 0.9285989596045534
{'intent': 'using a variable in xpath in python selenium', 'snippet': 'driver.find_element_by_xpath("//option[@value=\'" + state + "\']").click()'}
score: 0.9285989596045534
{'intent': 'Using a variable in xpath in Python Selenium', 'snippet': 'driver.find_element_by_xpath("//option[@value=\'" + state + "\']").click()'}

532. input: accessing json elements
score: 0.6151796932230894
{'intent': 'accessing json elements', 'snippet': "print(wjdata['data']['current_condition'][0]['temp_C'])"}
score: 0.5936374380040683
{'intent': 'Accessing JSON elements', 'snippet': "wjdata = json.load(urllib.request.urlopen('url'))"}
score: 0.5859345267593695
{'intent': "pull a value with key 'name' from a json object `item`", 'snippet': "print(item['name'])"}

533. input: create dataframe `males` containing data of dataframe `df` where column `gender` is equal to 'male' and column `year` is equal to 2014
score: 0.9441013541755473
{'intent': "create dataframe `males` containing data of dataframe `df` where column `Gender` is equal to 'Male' and column `Year` is equal to 2014", 'snippet': "males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]"}
score: 0.7255248410493923
{'intent': 'how do you filter pandas dataframes by multiple columns', 'snippet': "males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]"}
score: 0.7255248410493923
{'intent': 'how do you filter pandas dataframes by multiple columns', 'snippet': "males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]"}

534. input: changing marker's size in matplotlib
score: 0.8615630169708619
{'intent': "Changing marker's size in matplotlib", 'snippet': "scatter(x, y, s=500, color='green', marker='h')"}
score: 0.8615630169708619
{'intent': "Changing marker's size in matplotlib", 'snippet': "scatter(x, y, s=500, color='green', marker='h')"}
score: 0.748878671028026
{'intent': 'matplotlib change marker size to 500', 'snippet': "scatter(x, y, s=500, color='green', marker='h')"}

535. input: python datetime formatting without zero-padding
score: 0.8805851021453197
{'intent': 'python datetime formatting without zero-padding', 'snippet': "mydatetime.strftime('%-m/%d/%Y %-I:%M%p')"}
score: 0.8413085848511752
{'intent': 'Python datetime formatting without zero-padding', 'snippet': '"""{d.month}/{d.day}/{d.year}""".format(d=datetime.datetime.now())'}
score: 0.7207507434551612
{'intent': 'Parsing non-zero padded timestamps in Python', 'snippet': "datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')"}

536. input: re.compile('.\\A|.\\A*|.\\A+')
score: 0.8647625367069904
{'intent': 'regular expression syntax for not to match anything', 'snippet': "re.compile('.\\\\A|.\\\\A*|.\\\\A+')"}
score: 0.8001290886056432
{'intent': 'regular expression syntax for "match nothing"?', 'snippet': "re.compile('.\\\\A|.\\\\A*|.\\\\A+')"}
score: 0.8001290886056432
{'intent': 'Regular expression syntax for "match nothing"?', 'snippet': "re.compile('.\\\\A|.\\\\A*|.\\\\A+')"}

537. input: sampling random floats on a range in numpy
score: 0.89267248381095
{'intent': 'sampling random floats on a range in numpy', 'snippet': 'np.random.uniform(5, 10, [2, 3])'}
score: 0.6755305455109576
{'intent': 'create list `randomlist` with 10 random floating point numbers between 0.0 and 1.0', 'snippet': 'randomList = [random.random() for _ in range(10)]'}
score: 0.6755305455109576
{'intent': 'create list `randomList` with 10 random floating point numbers between 0.0 and 1.0', 'snippet': 'randomList = [random.random() for _ in range(10)]'}

538. input: [word for word in l if word.isalnum()]
score: 0.5253717392991027
{'intent': 'Code to detect all words that start with a capital letter in a string', 'snippet': 'print([word for word in words if word[0].isupper()])'}
score: 0.5253717392991027
{'intent': 'code to detect all words that start with a capital letter in a string', 'snippet': 'print([word for word in words if word[0].isupper()])'}
score: 0.5192263307376115
{'intent': 'Python list-comprehension for words that do not consist solely of digits', 'snippet': '[word for word in words if any(not char.isdigit() for char in word)]'}

539. input: how to read integers from a file that are 24bit and little endian using python?
score: 0.9034210856647856
{'intent': 'how to read integers from a file that are 24bit and little endian using python?', 'snippet': "struct.unpack('<I', bytes + '\\x00')"}
score: 0.9034210856647856
{'intent': 'How to read integers from a file that are 24bit and little endian using Python?', 'snippet': "struct.unpack('<I', bytes + '\\x00')"}
score: 0.8725633841719251
{'intent': 'How to read integers from a file that are 24bit and little endian using Python?', 'snippet': "struct.unpack('<i', bytes + ('\\x00' if bytes[2] < '\\x80' else '\\xff'))"}

540. input: divide the members of a list `conversions` by the corresponding members of another list `trials`
score: 0.8452181207196247
{'intent': 'divide the members of a list `conversions` by the corresponding members of another list `trials`', 'snippet': '[(c / t) for c, t in zip(conversions, trials)]'}
score: 0.6943230199257
{'intent': 'how do i divide the members of a list by the corresponding members of another list in python?', 'snippet': '[(c / t) for c, t in zip(conversions, trials)]'}
score: 0.6943230199257
{'intent': 'How do I divide the members of a list by the corresponding members of another list in Python?', 'snippet': '[(c / t) for c, t in zip(conversions, trials)]'}

541. input: how do i include unicode strings in python doctests?
score: 0.9560977030110533
{'intent': 'How do I include unicode strings in Python doctests?', 'snippet': 'doctest.testmod()'}
score: 0.8586948096542527
{'intent': 'how do i include unicode strings in python doctests?', 'snippet': "mylen('\\xe1\\xe9\\xed\\xf3\\xfa')"}
score: 0.8586948096542527
{'intent': 'How do I include unicode strings in Python doctests?', 'snippet': "mylen('\\xe1\\xe9\\xed\\xf3\\xfa')"}

542. input: add line based on slope and intercept in matplotlib?
score: 0.910127647549646
{'intent': 'add line based on slope and intercept in matplotlib?', 'snippet': 'plt.show()'}
score: 0.69931329849791
{'intent': 'Python: How to find the slope of a graph drawn using matplotlib?', 'snippet': 'plt.show()'}
score: 0.69931329849791
{'intent': 'python: how to find the slope of a graph drawn using matplotlib?', 'snippet': 'plt.show()'}

543. input: align values in array `b` to the order of corresponding values in array `a`
score: 0.7910980223415395
{'intent': 'align values in array `b` to the order of corresponding values in array `a`', 'snippet': 'a[np.in1d(a, b)]'}
score: 0.6482087941866082
{'intent': 'Align numpy array according to another array', 'snippet': 'a[np.in1d(a, b)]'}
score: 0.6482087941866082
{'intent': 'Align numpy array according to another array', 'snippet': 'a[np.in1d(a, b)]'}

544. input: how to get around "single '}' encountered in format string" when using .format and formatting in printing
score: 0.8223953969252851
{'intent': 'how to get around "Single \'}\' encountered in format string" when using .format and formatting in printing', 'snippet': "print('{0:<15}{1:<15}{2:<8}'.format('1', '2', '3'))"}
score: 0.8206850183461305
{'intent': 'how to get around "Single \'}\' encountered in format string" when using .format and formatting in printing', 'snippet': "print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))"}
score: 0.8206850183461305
{'intent': 'how to get around "single \'}\' encountered in format string" when using .format and formatting in printing', 'snippet': "print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))"}

545. input: convert unicode string `s` into string literals
score: 0.7907903757653258
{'intent': 'decode unicode string `s` into a readable unicode literal', 'snippet': "s.decode('unicode_escape')"}
score: 0.7907903757653258
{'intent': 'decode unicode string `s` into a readable unicode literal', 'snippet': "s.decode('unicode_escape')"}
score: 0.7886903754364994
{'intent': 'convert unicode string `s` into string literals', 'snippet': "print(s.encode('unicode_escape'))"}

546. input: writing bits to a binary file
score: 0.7691255188126062
{'intent': 'Writing bits to a binary file', 'snippet': "f.write(struct.pack('i', int(bits[::-1], 2)))"}
score: 0.7323892506319517
{'intent': 'how to read bits from a file?', 'snippet': 'sys.stdout.write(chr(x))'}
score: 0.6899974933058075
{'intent': 'Convert bytes to bits in python', 'snippet': 'c.bin[2:]'}

547. input: [re.split('_(?:f?or|and)_', s) for s in l]
score: 0.8585661467060807
{'intent': 'Splitting a string based on a certain set of words', 'snippet': "[re.split('_(?:f?or|and)_', s) for s in l]"}
score: 0.8585661467060807
{'intent': 'Splitting a string based on a certain set of words', 'snippet': "[re.split('_(?:f?or|and)_', s) for s in l]"}
score: 0.8414377541579763
{'intent': 'Split a string `l` by multiple words `for` or `or` or `and`', 'snippet': "[re.split('_(?:f?or|and)_', s) for s in l]"}

548. input: re.findall('-(?!aa|bb)([^-]+)', string)
score: 0.917015689700122
{'intent': "regular expression matching all but 'aa' and 'bb'", 'snippet': "re.findall('-(?!aa|bb)([^-]+)', string)"}
score: 0.916414967477015
{'intent': 'Regular expression matching all but a string', 'snippet': "re.findall('-(?!aa|bb)([^-]+)', string)"}
score: 0.916414967477015
{'intent': 'Regular expression matching all but a string', 'snippet': "re.findall('-(?!aa|bb)([^-]+)', string)"}

549. input: sorting a dictionary by value then key
score: 0.8582829471564046
{'intent': 'Sort a Python dictionary by value', 'snippet': 'sorted(dict1, key=dict1.get)'}
score: 0.8520021031379417
{'intent': 'Sort a Python dictionary by value', 'snippet': 'sorted(list(x.items()), key=operator.itemgetter(1))'}
score: 0.8449514333504393
{'intent': 'Python: How to sort a dictionary by key', 'snippet': 'sorted(iter(result.items()), key=lambda key_value: key_value[0])'}

550. input: plt.yscale('log', nonposy='clip')
score: 0.8257156978368044
{'intent': 'plot a data logarithmically in y axis', 'snippet': "plt.yscale('log', nonposy='clip')"}
score: 0.8257156978368044
{'intent': 'plot a data logarithmically in y axis', 'snippet': "plt.yscale('log', nonposy='clip')"}
score: 0.8225895638498801
{'intent': 'Logarithmic y-axis bins in python', 'snippet': "plt.yscale('log', nonposy='clip')"}

551. input: check if all elements in a list 'lst' are the same type 'int'
score: 0.9358084601347494
{'intent': "check if all elements in a list 'lst' are the same type 'int'", 'snippet': 'all(isinstance(x, int) for x in lst)'}
score: 0.8484722374163256
{'intent': 'Python check if all elements of a list are the same type', 'snippet': 'all(isinstance(x, int) for x in lst)'}
score: 0.8484722374163256
{'intent': 'python check if all elements of a list are the same type', 'snippet': 'all(isinstance(x, int) for x in lst)'}

552. input: remove punctuation from unicode formatted strings
score: 0.6998759533871004
{'intent': 'best way to strip punctuation from a string in python', 'snippet': 's.translate(None, string.punctuation)'}
score: 0.6998759533871004
{'intent': 'Best way to strip punctuation from a string in Python', 'snippet': 's.translate(None, string.punctuation)'}
score: 0.6998759533871004
{'intent': 'Best way to strip punctuation from a string in Python', 'snippet': 's.translate(None, string.punctuation)'}

553. input: how to validate domain of email address in form?
score: 0.5687889944893365
{'intent': 'check for a valid domain name in a string?', 'snippet': '"""^(?=.{4,255}$)([a-zA-Z0-9][a-zA-Z0-9-]{,61}[a-zA-Z0-9]\\\\.)+[a-zA-Z0-9]{2,5}$"""'}
score: 0.5687889944893365
{'intent': 'Check for a valid domain name in a string?', 'snippet': '"""^(?=.{4,255}$)([a-zA-Z0-9][a-zA-Z0-9-]{,61}[a-zA-Z0-9]\\\\.)+[a-zA-Z0-9]{2,5}$"""'}
score: 0.5520938270520277
{'intent': 'Check for a valid domain name in a string?', 'snippet': '"""[a-zA-Z\\\\d-]{,63}(\\\\.[a-zA-Z\\\\d-]{,63})*"""'}

554. input: os.environ['PYTHON_EGG_CACHE'] = path
score: 0.5719557804019634
{'intent': 'Create broken symlink with Python', 'snippet': "os.symlink('/usr/bin/python', '/tmp/subdir/python')"}
score: 0.5719557804019634
{'intent': 'create broken symlink with python', 'snippet': "os.symlink('/usr/bin/python', '/tmp/subdir/python')"}
score: 0.5606633535168549
{'intent': 'set environment variable in python script', 'snippet': "os.environ['LD_LIBRARY_PATH'] = 'my_path'"}

555. input: print(sorted(xs, key=len))
score: 0.894605492370638
{'intent': 'sort list `xs` based on the length of its elements', 'snippet': 'print(sorted(xs, key=len))'}
score: 0.8244541871593787
{'intent': 'Sorting Python list based on the length of the string', 'snippet': 'print(sorted(xs, key=len))'}
score: 0.8244541871593787
{'intent': 'Sorting Python list based on the length of the string', 'snippet': 'print(sorted(xs, key=len))'}

556. input: setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')
score: 0.9445435498048536
{'intent': 'set text color as `red` and background color as `#A3C1DA` in qpushbutton', 'snippet': "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')"}
score: 0.9359919647980578
{'intent': 'how to change qpushbutton text and background color', 'snippet': "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')"}
score: 0.9359919647980578
{'intent': 'How to change QPushButton text and background color', 'snippet': "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')"}

557. input: df2[['abuse', 'nff']].plot(kind='bar', stacked=True)
score: 0.9177717742124726
{'intent': 'Pandas - Plotting a stacked Bar Chart', 'snippet': "df2[['abuse', 'nff']].plot(kind='bar', stacked=True)"}
score: 0.7677487379733166
{'intent': 'Horizontal stacked bar chart in Matplotlib', 'snippet': "df2.plot(kind='bar', stacked=True)"}
score: 0.7677487379733166
{'intent': 'horizontal stacked bar chart in matplotlib', 'snippet': "df2.plot(kind='bar', stacked=True)"}

558. input: data.to_csv('path_with_file_name')
score: 0.6445008765319618
{'intent': 'Reading Multiple CSV Files into Python Pandas Dataframe', 'snippet': 'frame = pd.read_csv(path, names=columns)'}
score: 0.6445008765319618
{'intent': 'reading multiple csv files into python pandas dataframe', 'snippet': 'frame = pd.read_csv(path, names=columns)'}
score: 0.6410080660624793
{'intent': 'Python MySQL CSV export to json strange encoding', 'snippet': "data.to_csv('path_with_file_name')"}

559. input: applying regex to a pandas dataframe
score: 0.81516036953515
{'intent': 'applying regex to a pandas dataframe', 'snippet': "df['Season'].apply(split_it)"}
score: 0.81516036953515
{'intent': 'applying regex to a pandas dataframe', 'snippet': "df['Season'].apply(split_it)"}
score: 0.7856076478487002
{'intent': 'applying regex to a pandas dataframe', 'snippet': "df['Season'].str[:4].astype(int)"}

560. input: """\\xc3\\x85a""".encode('utf-8').decode('unicode_escape')
score: 0.8694083434211414
{'intent': "encode `u'X\\xc3\\xbcY\\xc3\\x9f'` as unicode and decode with utf-8", 'snippet': "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')"}
score: 0.8694083434211414
{'intent': "encode `u'x\\xc3\\xbcy\\xc3\\x9f'` as unicode and decode with utf-8", 'snippet': "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')"}
score: 0.8485519478784016
{'intent': 'convert and escape string "\\\\xc3\\\\x85あ" to UTF-8 code', 'snippet': '"""\\\\xc3\\\\x85あ""".encode(\'utf-8\').decode(\'unicode_escape\')'}

561. input: python lists with scandinavic letters
score: 0.8747547732527073
{'intent': 'Python lists with scandinavic letters', 'snippet': "['Hello', 'world']"}
score: 0.8162447380909342
{'intent': 'python lists with scandinavic letters', 'snippet': "['Hello', 'w\\xc3\\xb6rld']"}
score: 0.8162447380909342
{'intent': 'Python lists with scandinavic letters', 'snippet': "['Hello', 'w\\xc3\\xb6rld']"}

562. input: re.sub('[^A-Z]', '', s)
score: 0.7703981357997807
{'intent': 'remove uppercased characters in string `s`', 'snippet': "re.sub('[^A-Z]', '', s)"}
score: 0.7703981357997807
{'intent': 'remove uppercased characters in string `s`', 'snippet': "re.sub('[^A-Z]', '', s)"}
score: 0.7455037186737331
{'intent': 'How to extract all UPPER from a string? Python', 'snippet': "re.sub('[^A-Z]', '', s)"}

563. input: ax.plot(x, y, 'k^')
score: 0.8328905600875418
{'intent': 'How do I plot multiple X or Y axes in matplotlib?', 'snippet': "ax.plot(x, y, 'k^')"}
score: 0.6289418778165184
{'intent': '3D plot with Matplotlib', 'snippet': "ax.set_xlabel('X')"}
score: 0.6289418778165184
{'intent': '3d plot with matplotlib', 'snippet': "ax.set_xlabel('X')"}

564. input: s.split(':')[-2:]
score: 0.8225176713384037
{'intent': 'extract last two fields from split', 'snippet': "s.split(':')[-2:]"}
score: 0.8113745682631024
{'intent': 'Dot notation string manipulation', 'snippet': "s.split('.')[-1]"}
score: 0.8113745682631024
{'intent': 'dot notation string manipulation', 'snippet': "s.split('.')[-1]"}

565. input: image transformation in opencv
score: 0.821397006036046
{'intent': 'Image transformation in OpenCV', 'snippet': "cv2.imwrite('warped.png', warped)"}
score: 0.6721322602833402
{'intent': 'crop image with corrected distortion in opencv (python)', 'snippet': "img = cv2.imread('Undistorted.jpg', 0)"}
score: 0.6721322602833402
{'intent': 'Crop image with corrected distortion in OpenCV (Python)', 'snippet': "img = cv2.imread('Undistorted.jpg', 0)"}

566. input: python: extract numbers from a string
score: 0.8126500316341786
{'intent': 'Python: Extract numbers from a string', 'snippet': '[int(s) for s in str.split() if s.isdigit()]'}
score: 0.8076082311646273
{'intent': 'extract number from string - python', 'snippet': 'int(str1.split()[0])'}
score: 0.8076082311646273
{'intent': 'Extract Number from String - Python', 'snippet': 'int(str1.split()[0])'}

567. input: how to replace the nth element of multi dimension lists in python?
score: 0.9133729954606872
{'intent': 'How to replace the nth element of multi dimension lists in Python?', 'snippet': "[[1, 2, 3], [4, 5], ['X'], [7, 8, 9, 10]]"}
score: 0.8826654034539042
{'intent': 'how to replace the nth element of multi dimension lists in python?', 'snippet': "a = [['0', '0'], ['0', '0'], ['0', '0']]"}
score: 0.8826654034539042
{'intent': 'How to replace the nth element of multi dimension lists in Python?', 'snippet': "a = [['0', '0'], ['0', '0'], ['0', '0']]"}

568. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

569. input: list(chain.from_iterable(zip(list_a, list_b)))
score: 0.9239160816685781
{'intent': 'Interleaving Lists in Python', 'snippet': 'list(chain.from_iterable(zip(list_a, list_b)))'}
score: 0.7987949503776575
{'intent': 'merge lists `list_a` and `list_b` into a list of tuples', 'snippet': 'zip(list_a, list_b)'}
score: 0.7987949503776575
{'intent': 'merge lists `list_a` and `list_b` into a list of tuples', 'snippet': 'zip(list_a, list_b)'}

570. input: new_list = [(a, new_b) for a, b in tuple_list]
score: 0.7658205281496677
{'intent': 'Iterate a list of tuples', 'snippet': 'tuple_list = [(a, some_process(b)) for a, b in tuple_list]'}
score: 0.7576433010168709
{'intent': 'Appending tuples to lists', 'snippet': 'b.append((a[0][0], a[0][2]))'}
score: 0.7535817762932402
{'intent': 'Python: converting list of lists to tuples of tuples', 'snippet': 'tuple_of_tuples = tuple(tuple(x) for x in list_of_lists)'}

571. input: set(['a', 'b', 'c', 'd'])
score: 0.7271419980542939
{'intent': "get unique values from the list `['a', 'b', 'c', 'd']`", 'snippet': "set(['a', 'b', 'c', 'd'])"}
score: 0.700921696494999
{'intent': 'a list > a list of lists', 'snippet': "[['1', 'a', 'b'], ['2', 'c', 'd'], ['3', '123', 'e'], ['4']]"}
score: 0.700921696494999
{'intent': 'a list > a list of lists', 'snippet': "[['1', 'a', 'b'], ['2', 'c', 'd'], ['3', '123', 'e'], ['4']]"}

572. input: greedy match with negative lookahead in a regular expression
score: 0.7471726345268148
{'intent': 'Greedy match with negative lookahead in a regular expression', 'snippet': "re.findall('[a-zA-Z]+\\\\b(?!\\\\()', 'movav(x/2, 2)*movsum(y, 3)*z')"}
score: 0.5842381475713463
{'intent': 'Regular expression matching all but a string', 'snippet': "res = re.findall('-(?!(?:aa|bb)-)(\\\\w+)(?=-)', s)"}
score: 0.5842381475713463
{'intent': 'regular expression matching all but a string', 'snippet': "res = re.findall('-(?!(?:aa|bb)-)(\\\\w+)(?=-)', s)"}

573. input: df.groupby('id').agg(lambda x: x.tolist())
score: 0.9267498594084245
{'intent': "group rows of pandas dataframe `df` with same 'id'", 'snippet': "df.groupby('id').agg(lambda x: x.tolist())"}
score: 0.842581797859496
{'intent': 'concatenate rows of pandas dataframe with same id', 'snippet': "df.groupby('id').agg(lambda x: x.tolist())"}
score: 0.842581797859496
{'intent': 'Concatenate rows of pandas DataFrame with same id', 'snippet': "df.groupby('id').agg(lambda x: x.tolist())"}

574. input: df_row_merged = pd.concat([df_a, df_b], ignore_index=True)
score: 0.8518493647238284
{'intent': 'how to combine two data frames in python pandas', 'snippet': 'df_row_merged = pd.concat([df_a, df_b], ignore_index=True)'}
score: 0.7634212479316056
{'intent': 'concatenate dataframe `df1` with `df2` whilst removing duplicates', 'snippet': 'pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)'}
score: 0.7634212479316056
{'intent': 'concatenate dataframe `df1` with `df2` whilst removing duplicates', 'snippet': 'pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)'}

575. input: wn.synsets('small')
score: 0.46175790746808926
{'intent': 'how do i print out just the word itself in a wordnet synset using python nltk?', 'snippet': "[synset.name.split('.')[0] for synset in wn.synsets('dog')]"}
score: 0.46175790746808926
{'intent': 'How do I print out just the word itself in a WordNet synset using Python NLTK?', 'snippet': "[synset.name.split('.')[0] for synset in wn.synsets('dog')]"}
score: 0.4044254533742937
{'intent': 'wxpython: making something expand', 'snippet': 'self.SetSizer(sizer)'}

576. input: df.set_index(s.index).sort()
score: 0.8811901565318849
{'intent': 'Custom sorting in pandas dataframe', 'snippet': 'df.set_index(s.index).sort()'}
score: 0.8489417079914947
{'intent': 'Python, pandas: how to sort dataframe by index', 'snippet': 'df.sort_index(inplace=True)'}
score: 0.813222082264569
{'intent': 'update index after sorting data-frame', 'snippet': 'df2.reset_index(drop=True)'}

577. input: Entry.objects.filter(name='name', title='title').exists()
score: 0.8485845619801986
{'intent': "Django check if an object with criteria `name` equal to 'name' and criteria `title` equal to 'title' exists in model `Entry`", 'snippet': "Entry.objects.filter(name='name', title='title').exists()"}
score: 0.7530724172146805
{'intent': 'How to check if something exists in a postgresql database using django?', 'snippet': "Entry.objects.filter(name='name', title='title').exists()"}
score: 0.7530724172146805
{'intent': 'How to check if something exists in a postgresql database using django?', 'snippet': "Entry.objects.filter(name='name', title='title').exists()"}

578. input: a['x'].apply(lambda x, y: x + y, args=(100,))
score: 0.8227850383732751
{'intent': 'Add 100 to each element of column "x" in dataframe `a`', 'snippet': "a['x'].apply(lambda x, y: x + y, args=(100,))"}
score: 0.8153035086592944
{'intent': 'python pandas: apply a function with arguments to a series. Update', 'snippet': "a['x'].apply(lambda x, y: x + y, args=(100,))"}
score: 0.8153035086592944
{'intent': 'python pandas: apply a function with arguments to a series. update', 'snippet': "a['x'].apply(lambda x, y: x + y, args=(100,))"}

579. input: how to sort a python dict by value
score: 0.9161372304063382
{'intent': 'sort dict by value python', 'snippet': 'sorted(data.values())'}
score: 0.9161372304063382
{'intent': 'sort dict by value python', 'snippet': 'sorted(data.values())'}
score: 0.9161372304063382
{'intent': 'sort dict by value python', 'snippet': 'sorted(data.values())'}

580. input: df['a'].values.tolist()
score: 0.9065635814272817
{'intent': "pandas dataframe `df` column 'a' to list", 'snippet': "df['a'].values.tolist()"}
score: 0.9065635814272817
{'intent': "pandas dataframe `df` column 'a' to list", 'snippet': "df['a'].values.tolist()"}
score: 0.8874702125051069
{'intent': 'Pandas DataFrame to list', 'snippet': "df['a'].values.tolist()"}

581. input: get date from dataframe `df` column 'dates' to column 'just_date'
score: 0.9352846811962309
{'intent': "get date from dataframe `df` column 'dates' to column 'just_date'", 'snippet': "df['just_date'] = df['dates'].dt.date"}
score: 0.7573026727489699
{'intent': 'Keep only date part when using pandas.to_datetime', 'snippet': "df['just_date'] = df['dates'].dt.date"}
score: 0.7573026727489699
{'intent': 'keep only date part when using pandas.to_datetime', 'snippet': "df['just_date'] = df['dates'].dt.date"}

582. input: text_widget.bind('<1>', lambda event: text_widget.focus_set())
score: 0.7686029339243178
{'intent': 'How to disable input to a Text widget but allow programatic input?', 'snippet': "text_widget.bind('<1>', lambda event: text_widget.focus_set())"}
score: 0.7205601100826113
{'intent': 'How do I give focus to a python Tkinter text widget?', 'snippet': 'root.mainloop()'}
score: 0.6876223547987377
{'intent': 'how to bind self events in tkinter text widget after it will binded by text widget?', 'snippet': 'root.mainloop()'}

583. input: fit a curve using matplotlib on loglog scale
score: 0.9357667597000923
{'intent': 'Fit a curve using matplotlib on loglog scale', 'snippet': 'plt.show()'}
score: 0.715307371814268
{'intent': 'Plot logarithmic axes with matplotlib in python', 'snippet': "ax.set_yscale('log')"}
score: 0.715307371814268
{'intent': 'plot logarithmic axes with matplotlib in python', 'snippet': "ax.set_yscale('log')"}

584. input: how to modify matplotlib legend after it has been created?
score: 0.9205699956643352
{'intent': 'How to modify matplotlib legend after it has been created?', 'snippet': 'pylab.show()'}
score: 0.7936610368048553
{'intent': 'how to make custom legend in matplotlib', 'snippet': 'plt.show()'}
score: 0.7936610368048553
{'intent': 'How to make custom legend in matplotlib', 'snippet': 'plt.show()'}

585. input: split string `hello` into a string of letters seperated by `,`
score: 0.8493501348600995
{'intent': 'Split string `Hello` into a string of letters seperated by `,`', 'snippet': '""",""".join(\'Hello\')'}
score: 0.7521096279335462
{'intent': 'how to split a word into letters in python', 'snippet': '""",""".join(\'Hello\')'}
score: 0.7521096279335462
{'intent': 'How to split a word into letters in Python', 'snippet': '""",""".join(\'Hello\')'}

586. input: create a list `listofzeros` of `n` zeros
score: 0.9180956564670285
{'intent': 'create a list `listofzeros` of `n` zeros', 'snippet': 'listofzeros = [0] * n'}
score: 0.8532702006036906
{'intent': 'List of zeros in python', 'snippet': 'listofzeros = [0] * n'}
score: 0.8532702006036906
{'intent': 'List of zeros in python', 'snippet': 'listofzeros = [0] * n'}

587. input: how can i filter a date of a datetimefield in django?
score: 0.9104568702281092
{'intent': 'How can I filter a date of a DateTimeField in Django?', 'snippet': 'YourModel.objects.filter(datetime_published=datetime(2008, 3, 27))'}
score: 0.8105247737171783
{'intent': 'django filter by datetime on a range of dates', 'snippet': 'queryset.filter(created_at__gte=datetime.date.today())'}
score: 0.7974475022548376
{'intent': 'django filter by datetime on a range of dates', 'snippet': 'queryset.filter(created_at__range=(start_date, end_date))'}

588. input: subtracting dates with python
score: 0.8253925721962774
{'intent': 'Subtracting Dates With Python', 'snippet': 'datetime.datetime.combine(birthdate, datetime.time())'}
score: 0.6233841058233972
{'intent': 'subtract time from datetime.time object', 'snippet': 'current_time = (datetime.now() - timedelta(seconds=10)).time()'}
score: 0.6124158701699907
{'intent': 'How can I compare a date and a datetime in Python?', 'snippet': 'datetime.datetime(d.year, d.month, d.day)'}

589. input: re.sub('\\.[^.]+$', '', s)
score: 0.8636835914853969
{'intent': 'dot notation string manipulation', 'snippet': "re.sub('\\\\.[^.]+$', '', s)"}
score: 0.8636835914853969
{'intent': 'Dot notation string manipulation', 'snippet': "re.sub('\\\\.[^.]+$', '', s)"}
score: 0.8636835914853969
{'intent': 'Dot notation string manipulation', 'snippet': "re.sub('\\\\.[^.]+$', '', s)"}

590. input: screen_height = root.winfo_screenheight()
score: 0.7449668280583724
{'intent': 'How to get the screen size in Tkinter?', 'snippet': 'screen_height = root.winfo_screenheight()'}
score: 0.5808375825577874
{'intent': 'How to get the resolution of a monitor in Pygame?', 'snippet': 'pygame.display.set_mode((0, 0), pygame.FULLSCREEN)'}
score: 0.5808375825577874
{'intent': 'How to get the resolution of a monitor in Pygame?', 'snippet': 'pygame.display.set_mode((0, 0), pygame.FULLSCREEN)'}

591. input: A = np.array(sorted(A, key=tuple))
score: 0.8791303974520025
{'intent': 'sort numpy float array `A` column by column', 'snippet': 'A = np.array(sorted(A, key=tuple))'}
score: 0.8791303974520025
{'intent': 'sort numpy float array `a` column by column', 'snippet': 'A = np.array(sorted(A, key=tuple))'}
score: 0.8776830677314414
{'intent': 'Sort NumPy float array column by column', 'snippet': 'A = np.array(sorted(A, key=tuple))'}

592. input: sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))
score: 0.9263764665389499
{'intent': "sort list of date strings 'd'", 'snippet': "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))"}
score: 0.9262654860407646
{'intent': 'Sort list of date strings', 'snippet': "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))"}
score: 0.9262654860407646
{'intent': 'Sort list of date strings', 'snippet': "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))"}

593. input: [[[flatten[int(i * 2)]]] for i in range(int(len(flatten) / 2))]
score: 0.6210196002182922
{'intent': 'Convert a list of strings to either int or float', 'snippet': '[(int(i) if i.isdigit() else float(i)) for i in s]'}
score: 0.6210196002182922
{'intent': 'convert a list of strings to either int or float', 'snippet': '[(int(i) if i.isdigit() else float(i)) for i in s]'}
score: 0.6147175971030558
{'intent': 'flatten list `x`', 'snippet': 'x = [i[0] for i in x]'}

594. input: django filter by datetime on a range of dates
score: 0.8896071560518665
{'intent': 'django filter by datetime on a range of dates', 'snippet': 'queryset.filter(created_at__range=(start_date, end_date))'}
score: 0.8896071560518665
{'intent': 'django filter by datetime on a range of dates', 'snippet': 'queryset.filter(created_at__range=(start_date, end_date))'}
score: 0.868134121852906
{'intent': 'django filter by datetime on a range of dates', 'snippet': 'queryset.filter(created_at__gte=datetime.date.today())'}

595. input: conn.execute('INSERT INTO table (ColName) VALUES (?);', [','.join(list)])
score: 0.8574002421875392
{'intent': 'Insert list into my database using Python', 'snippet': "conn.execute('INSERT INTO table (ColName) VALUES (?);', [','.join(list)])"}
score: 0.6854512282938778
{'intent': "insert variables `(var1, var2, var3)` into sql statement 'INSERT INTO table VALUES (?, ?, ?)'", 'snippet': "cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))"}
score: 0.6854512282938778
{'intent': "insert variables `(var1, var2, var3)` into sql statement 'insert into table values (?, ?, ?)'", 'snippet': "cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))"}

596. input: """This     is a     string""".split()
score: 0.7891859025799115
{'intent': 'split string "This     is a     string" into words that does not contain whitespaces', 'snippet': '"""This     is a     string""".split()'}
score: 0.7834856720828732
{'intent': 'split string "this is a string" into words that do not contain whitespaces', 'snippet': '"""This is a string""".split()'}
score: 0.7834856720828732
{'intent': 'split string "This is a string" into words that do not contain whitespaces', 'snippet': '"""This is a string""".split()'}

597. input: plt.axes().set_aspect('equal')
score: 0.7880718256107352
{'intent': 'I want to plot perpendicular vectors in Python', 'snippet': "plt.axes().set_aspect('equal')"}
score: 0.7161571022885225
{'intent': 'I want to plot perpendicular vectors in Python', 'snippet': "ax.set_aspect('equal')"}
score: 0.7161571022885225
{'intent': 'i want to plot perpendicular vectors in python', 'snippet': "ax.set_aspect('equal')"}

598. input: plt.hist(x, bins=list(range(-4, 5)))
score: 0.82129543631468
{'intent': 'How to choose bins in matplotlib histogram', 'snippet': 'plt.hist(x, bins=list(range(-4, 5)))'}
score: 0.6150939296463933
{'intent': 'matplotlib: how to make two histograms have the same bin width?', 'snippet': 'plt.hist(b, bins)'}
score: 0.6150939296463933
{'intent': 'Matplotlib: How to make two histograms have the same bin width?', 'snippet': 'plt.hist(b, bins)'}

599. input: create kml from csv in python
score: 0.9333369828535939
{'intent': 'Create kml from csv in Python', 'snippet': 'f.close()'}
score: 0.5378925526313358
{'intent': 'creating a dictionary from a csv file', 'snippet': "{'123': {'Foo': '456', 'Bar': '789'}, 'abc': {'Foo': 'def', 'Bar': 'ghi'}}"}
score: 0.5378925526313358
{'intent': 'Creating a dictionary from a CSV file', 'snippet': "{'123': {'Foo': '456', 'Bar': '789'}, 'abc': {'Foo': 'def', 'Bar': 'ghi'}}"}

600. input: find an element in a list of tuples
score: 0.8270431199895243
{'intent': 'Find an element in a list of tuples', 'snippet': '[item for item in a if 1 in item]'}
score: 0.8270431199895243
{'intent': 'Find an element in a list of tuples', 'snippet': '[item for item in a if 1 in item]'}
score: 0.8177763661882649
{'intent': 'Find an element in a list of tuples', 'snippet': '[item for item in a if item[0] == 1]'}

601. input: initializing a list to a known number of elements in python
score: 0.783294144057755
{'intent': 'Initializing a list to a known number of elements in Python', 'snippet': 'verts = [[(0) for x in range(100)] for y in range(10)]'}
score: 0.7251289130526257
{'intent': 'python initializing a list of lists', 'snippet': 'x = [[] for i in range(3)]'}
score: 0.7251289130526257
{'intent': 'Python initializing a list of lists', 'snippet': 'x = [[] for i in range(3)]'}

602. input: how do i convert unicode code to string in python?
score: 0.9178557983820183
{'intent': 'how do i convert unicode code to string in python?', 'snippet': "print(text.decode('unicode-escape'))"}
score: 0.9178557983820183
{'intent': 'How do I convert unicode code to string in Python?', 'snippet': "print(text.decode('unicode-escape'))"}
score: 0.8734074658684687
{'intent': 'python string to unicode', 'snippet': "str(a, 'unicode-escape')"}

603. input: global_dict['baz'] = 'world'
score: 0.7707698616284755
{'intent': 'Using a global dictionary with threads in Python', 'snippet': "global_dict['baz'] = 'world'"}
score: 0.6494564449847384
{'intent': "create dictionary from list of variables 'foo' and 'bar' already defined", 'snippet': "dict((k, globals()[k]) for k in ('foo', 'bar'))"}
score: 0.645275778686972
{'intent': 'Is it possible to define global variables in a function in Python', 'snippet': "globals()['something'] = 'bob'"}

604. input: get output of python script from within python script
score: 0.8259237018618233
{'intent': 'get output of python script from within python script', 'snippet': 'print(proc.communicate()[0])'}
score: 0.8259237018618233
{'intent': 'Get output of python script from within python script', 'snippet': 'print(proc.communicate()[0])'}
score: 0.8259237018618233
{'intent': 'Get output of python script from within python script', 'snippet': 'print(proc.communicate()[0])'}

605. input: return [v for k, v in self.items() if v == value]
score: 0.7873851561133146
{'intent': 'Finding key from value in Python dictionary:', 'snippet': 'return [v for k, v in self.items() if v == value]'}
score: 0.677481533231139
{'intent': 'Finding key from value in Python dictionary:', 'snippet': '[k for k, v in d.items() if v == desired_value]'}
score: 0.677481533231139
{'intent': 'Finding key from value in Python dictionary:', 'snippet': '[k for k, v in d.items() if v == desired_value]'}

606. input: {(x ** 2) for x in range(100)}
score: 0.7294045984319426
{'intent': 'create dict of squared int values in range of 100', 'snippet': '{(x ** 2) for x in range(100)}'}
score: 0.7294045984319426
{'intent': 'create dict of squared int values in range of 100', 'snippet': '{(x ** 2) for x in range(100)}'}
score: 0.7058455195358145
{'intent': 'Is there a Python dict without values?', 'snippet': '{(x ** 2) for x in range(100)}'}

607. input: import a nested module `c.py` within `b` within `a` with importlib
score: 0.9750176081398055
{'intent': 'import a nested module `c.py` within `b` within `a` with importlib', 'snippet': "importlib.import_module('.c', 'a.b')"}
score: 0.7955030682070258
{'intent': "import a module 'a.b.c' with importlib.import_module in python 2", 'snippet': "importlib.import_module('a.b.c')"}
score: 0.7955030682070258
{'intent': "import a module 'a.b.c' with importlib.import_module in python 2", 'snippet': "importlib.import_module('a.b.c')"}

608. input: sum the product of each two items at the same index of list `a` and list `b`
score: 0.8615249190269564
{'intent': 'sum the product of each two items at the same index of list `a` and list `b`', 'snippet': 'sum(i * j for i, j in zip(a, b))'}
score: 0.835582790112688
{'intent': 'sum the products of each two elements at the same index of list `a` and list `b`', 'snippet': 'list(x * y for x, y in list(zip(a, b)))'}
score: 0.835582790112688
{'intent': 'sum the products of each two elements at the same index of list `a` and list `b`', 'snippet': 'list(x * y for x, y in list(zip(a, b)))'}

609. input: print(' '.join(sorted(set(words), key=words.index)))
score: 0.9119680510782201
{'intent': 'Keep only unique words in list of words `words` and join into string', 'snippet': "print(' '.join(sorted(set(words), key=words.index)))"}
score: 0.8380239688911301
{'intent': 'How can I remove duplicate words in a string with Python?', 'snippet': "print(' '.join(sorted(set(words), key=words.index)))"}
score: 0.8380239688911301
{'intent': 'How can I remove duplicate words in a string with Python?', 'snippet': "print(' '.join(sorted(set(words), key=words.index)))"}

610. input: re.split('(?<!\\d),(?! )|(?<=\\d),(?![\\d ])', s)
score: 0.7921158051984699
{'intent': "use regular expression '((\\\\d)(?:[()]*\\\\2*[()]*)*)' to split string `s`", 'snippet': "[i[0] for i in re.findall('((\\\\d)(?:[()]*\\\\2*[()]*)*)', s)]"}
score: 0.7921158051984699
{'intent': "use regular expression '((\\\\d)(?:[()]*\\\\2*[()]*)*)' to split string `s`", 'snippet': "[i[0] for i in re.findall('((\\\\d)(?:[()]*\\\\2*[()]*)*)', s)]"}
score: 0.7761620518892416
{'intent': 'Context dependent split of a string in python', 'snippet': "re.split('(?<!\\\\d),(?! )|(?<=\\\\d),(?![\\\\d ])', s)"}

611. input: convert dictionaries into string python
score: 0.789448731625385
{'intent': 'convert dictionaries into string python', 'snippet': '""", """.join(\'{} {}\'.format(k, v) for k, v in list(d.items()))'}
score: 0.789448731625385
{'intent': 'convert dictionaries into string python', 'snippet': '""", """.join(\'{} {}\'.format(k, v) for k, v in list(d.items()))'}
score: 0.7830413441725146
{'intent': 'convert a list of dictionaries `listofdict into a dictionary of dictionaries', 'snippet': "dict((d['name'], d) for d in listofdict)"}

612. input: fig.savefig('test.pdf')
score: 0.7009679318716031
{'intent': 'How to save Pandas pie plot to a file', 'snippet': "fig.savefig('~/Desktop/myplot.pdf')"}
score: 0.7009679318716031
{'intent': 'how to save pandas pie plot to a file', 'snippet': "fig.savefig('~/Desktop/myplot.pdf')"}
score: 0.6536697867225729
{'intent': 'Save matplotlib file to a directory', 'snippet': "fig.savefig('Sub Directory/graph.png')"}

613. input: function to close the window in tkinter
score: 0.9039799357385435
{'intent': 'Function to close the window in Tkinter', 'snippet': 'self.root.destroy()'}
score: 0.9039799357385435
{'intent': 'Function to close the window in Tkinter', 'snippet': 'self.root.destroy()'}
score: 0.8718730859630779
{'intent': 'how to close a tkinter window by pressing a button?', 'snippet': 'window.destroy()'}

614. input: how do i get the user agent with flask?
score: 0.8671470681725137
{'intent': 'How do I get the user agent with Flask?', 'snippet': "request.headers.get('User-Agent')"}
score: 0.8671470681725137
{'intent': 'how do i get the user agent with flask?', 'snippet': "request.headers.get('User-Agent')"}
score: 0.5724477447715143
{'intent': 'Flask instanciation app = Flask()', 'snippet': 'app = Flask(__name__)'}

615. input: replacing the empty strings in a string
score: 0.802477273553821
{'intent': 'Replacing the empty strings in a string', 'snippet': "string2.replace('', string1)"}
score: 0.7320838672445052
{'intent': 'Replacing the empty strings in a string', 'snippet': "string2.replace('', string1)[len(string1):-len(string1)]"}
score: 0.7320838672445052
{'intent': 'Replacing the empty strings in a string', 'snippet': "string2.replace('', string1)[len(string1):-len(string1)]"}

616. input: is it possible to serve a static html page at the root of a django project?
score: 0.9405647515354162
{'intent': 'Is it possible to serve a static html page at the root of a django project?', 'snippet': "url('^$', TemplateView.as_view(template_name='your_template.html'))"}
score: 0.9405647515354162
{'intent': 'Is it possible to serve a static html page at the root of a django project?', 'snippet': "url('^$', TemplateView.as_view(template_name='your_template.html'))"}
score: 0.8241034378959778
{'intent': "serve a static html page 'your_template.html' at the root of a django project", 'snippet': "url('^$', TemplateView.as_view(template_name='your_template.html'))"}

617. input: how can i assign a new class attribute via __dict__ in python?
score: 0.9188775923182501
{'intent': 'How can I assign a new class attribute via __dict__ in python?', 'snippet': 'setattr(test, attr_name, 10)'}
score: 0.7426420712550861
{'intent': 'In python, how do I cast a class object to a dict', 'snippet': 'dict(my_object)'}
score: 0.7426420712550861
{'intent': 'in python, how do i cast a class object to a dict', 'snippet': 'dict(my_object)'}

618. input: open('file.txt', 'w').close()
score: 0.8000948416039662
{'intent': 'how to erase the file contents of text file in python?', 'snippet': "open('file.txt', 'w').close()"}
score: 0.8000948416039662
{'intent': 'How to erase the file contents of text file in Python?', 'snippet': "open('file.txt', 'w').close()"}
score: 0.8000948416039662
{'intent': 'How to erase the file contents of text file in Python?', 'snippet': "open('file.txt', 'w').close()"}

619. input: os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))
score: 0.7035880189996121
{'intent': 'How to get only the last part of a path in Python?', 'snippet': "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"}
score: 0.7035880189996121
{'intent': 'how to get only the last part of a path in python?', 'snippet': "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"}
score: 0.7035880189996121
{'intent': 'How to get only the last part of a path in Python?', 'snippet': "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"}

620. input: r = int(''.join(map(str, x)))
score: 0.8347076416298403
{'intent': 'convert a list of integers into a single integer', 'snippet': "r = int(''.join(map(str, x)))"}
score: 0.8347076416298403
{'intent': 'convert a list of integers into a single integer', 'snippet': "r = int(''.join(map(str, x)))"}
score: 0.784921979251132
{'intent': 'How to convert a list of multiple integers into a single integer?', 'snippet': "r = int(''.join(map(str, x)))"}

621. input: dict((itm.split('=')[0], itm.split('=')[1]) for itm in qstring.split('&'))
score: 0.791503634336235
{'intent': 'python: how to convert a query string to json string?', 'snippet': "dict((itm.split('=')[0], itm.split('=')[1]) for itm in qstring.split('&'))"}
score: 0.6544057349685495
{'intent': 'convert string to dict using list comprehension in python', 'snippet': "dict([x.split('=') for x in s.split()])"}
score: 0.6544057349685495
{'intent': 'convert string to dict using list comprehension in python', 'snippet': "dict([x.split('=') for x in s.split()])"}

622. input: how can i disable logging while running unit tests in python django?
score: 0.972647597751416
{'intent': 'How can I disable logging while running unit tests in Python Django?', 'snippet': 'logging.disable(logging.NOTSET)'}
score: 0.9713636888353177
{'intent': 'How can I disable logging while running unit tests in Python Django?', 'snippet': 'logging.disable(logging.CRITICAL)'}
score: 0.9713636888353177
{'intent': 'How can I disable logging while running unit tests in Python Django?', 'snippet': 'logging.disable(logging.CRITICAL)'}

623. input: [''.join(l) for l in list_of_lists]
score: 0.8642555111632388
{'intent': "'List of lists' to 'list' without losing empty lists from the original list of lists", 'snippet': "[''.join(l) for l in list_of_lists]"}
score: 0.8642555111632388
{'intent': "'List of lists' to 'list' without losing empty lists from the original list of lists", 'snippet': "[''.join(l) for l in list_of_lists]"}
score: 0.8347958644068543
{'intent': "convert a list of lists `list_of_lists` into a list of strings keeping empty sub-lists as empty string ''", 'snippet': "[''.join(l) for l in list_of_lists]"}

624. input: functools.reduce(np.logical_or, (x, y, z))
score: 0.9201697868434124
{'intent': 'Numpy `logical_or` for more than two arguments', 'snippet': 'functools.reduce(np.logical_or, (x, y, z))'}
score: 0.863978308851372
{'intent': 'numpy `logical_or` for more than two arguments', 'snippet': 'np.logical_or.reduce((x, y, z))'}
score: 0.6217176369637365
{'intent': 'selecting rows from a numpy ndarray', 'snippet': 'test[numpy.logical_or.reduce([(test[:, (1)] == x) for x in wanted])]'}

625. input: tex.delete('1.0', END)
score: 0.6443789101005604
{'intent': 'how to clear/delete the Textbox in tkinter python on Ubuntu', 'snippet': "tex.delete('1.0', END)"}
score: 0.6443789101005604
{'intent': 'how to clear/delete the Textbox in tkinter python on Ubuntu', 'snippet': "tex.delete('1.0', END)"}
score: 0.6037705469735704
{'intent': 'clear the textbox `text` in tkinter', 'snippet': "tex.delete('1.0', END)"}

626. input: requests.post('http://httpbin.org/post', json={'test': 'cheers'})
score: 0.9307077320709325
{'intent': "execute a post request to url `http://httpbin.org/post` with json data `{'test': 'cheers'}`", 'snippet': "requests.post('http://httpbin.org/post', json={'test': 'cheers'})"}
score: 0.9307077320709325
{'intent': "Execute a post request to url `http://httpbin.org/post` with json data `{'test': 'cheers'}`", 'snippet': "requests.post('http://httpbin.org/post', json={'test': 'cheers'})"}
score: 0.9173413940707213
{'intent': 'Post JSON using Python Requests', 'snippet': "requests.post('http://httpbin.org/post', json={'test': 'cheers'})"}

627. input: tuple digits to number conversion
score: 0.7812939461757865
{'intent': 'tuple digits to number conversion', 'snippet': "float(str(a[0]) + '.' + str(a[1]))"}
score: 0.7812939461757865
{'intent': 'tuple digits to number conversion', 'snippet': "float(str(a[0]) + '.' + str(a[1]))"}
score: 0.7665340673463583
{'intent': 'tuple digits to number conversion', 'snippet': "float('{0}.{1}'.format(*a))"}

628. input: """string"""
score: 0.528555173169836
{'intent': 'string formatting options: pros and cons', 'snippet': "'This is a string: %s' % 'abc'"}
score: 0.5178961977524393
{'intent': 'python, format string', 'snippet': '"""{} %s {}""".format(\'foo\', \'bar\')'}
score: 0.5178961977524393
{'intent': 'python, format string', 'snippet': '"""{} %s {}""".format(\'foo\', \'bar\')'}

629. input: df['period'] = df.apply(period, axis=1)
score: 0.7853932156229784
{'intent': 'Adding a new column in data frame after calculation on time', 'snippet': "df['period'] = df.apply(period, axis=1)"}
score: 0.6480485467287418
{'intent': 'Convert a column of timestamps into periods in pandas', 'snippet': "df[1] = df[0].dt.to_period('M')"}
score: 0.6480485467287418
{'intent': 'convert a column of timestamps into periods in pandas', 'snippet': "df[1] = df[0].dt.to_period('M')"}

630. input: df1.iloc[[1, 3, 5], [1, 3]]
score: 0.7331412981108518
{'intent': 'How to get column by number in Pandas?', 'snippet': 'df1.iloc[[1, 3, 5], [1, 3]]'}
score: 0.7318971184253077
{'intent': 'Select Pandas rows based on list index', 'snippet': 'df.iloc[([1, 3]), :]'}
score: 0.7318971184253077
{'intent': 'select pandas rows based on list index', 'snippet': 'df.iloc[([1, 3]), :]'}

631. input: pdb.set_trace()
score: 0.7993325193743643
{'intent': 'How to set pdb break condition from within source code?', 'snippet': 'pdb.set_trace()'}
score: 0.7993325193743643
{'intent': 'how to set pdb break condition from within source code?', 'snippet': 'pdb.set_trace()'}
score: 0.7893484772326491
{'intent': 'watch for a variable change in python', 'snippet': 'pdb.set_trace()'}

632. input: how to convert unicode text to normal text
score: 0.7861626034334052
{'intent': 'How to convert unicode text to normal text', 'snippet': "elems[0].getText().encode('utf-8')"}
score: 0.7861626034334052
{'intent': 'How to convert unicode text to normal text', 'snippet': "elems[0].getText().encode('utf-8')"}
score: 0.6421425700297676
{'intent': 'how to convert unicode accented characters to pure ascii without accents?', 'snippet': "unicodedata.normalize('NFD', myfoo).encode('ascii', 'ignore')"}

633. input: how to draw vertical lines on a given plot in matplotlib?
score: 0.7949438067586496
{'intent': 'Is it possible to draw a plot vertically with python matplotlib?', 'snippet': 'plt.show()'}
score: 0.7932245633086306
{'intent': 'Matplotlib: Vertical lines in scatter plot', 'snippet': 'plt.show()'}
score: 0.7541605779699526
{'intent': 'drawing lines between two plots in matplotlib', 'snippet': 'plt.show()'}

634. input: mercury(1, 1, 2)
score: 0.5220253837707078
{'intent': 'Defining a global function in a Python script', 'snippet': 'mercury(1, 1, 2)'}
score: 0.315374461578105
{'intent': 'finding a eulerian tour', 'snippet': 'graph = [(1, 2), (2, 3), (3, 1), (3, 4), (4, 3)]'}
score: 0.315374461578105
{'intent': 'Finding a Eulerian Tour', 'snippet': 'graph = [(1, 2), (2, 3), (3, 1), (3, 4), (4, 3)]'}

635. input: how to create single python dict from a list of dicts by summing values with common keys?
score: 0.9222435758133534
{'intent': 'How to create single Python dict from a list of dicts by summing values with common keys?', 'snippet': 'dict((key, sum(d[key] for d in dictList)) for key in dictList[0])'}
score: 0.9222435758133534
{'intent': 'How to create single Python dict from a list of dicts by summing values with common keys?', 'snippet': 'dict((key, sum(d[key] for d in dictList)) for key in dictList[0])'}
score: 0.8200134811898503
{'intent': 'create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`', 'snippet': 'dict((key, sum(d[key] for d in dictList)) for key in dictList[0])'}

636. input: np.einsum('ij,jk,kl,lm', S0, Sx, Sy, Sz)
score: 0.6838826234583923
{'intent': 'How to fold/accumulate a numpy matrix product (dot)?', 'snippet': "np.einsum('ij,jk,kl,lm', S0, Sx, Sy, Sz)"}
score: 0.5777786616597445
{'intent': 'outer product of each column of a 2d `X` array to form a 3d array `X`', 'snippet': "np.einsum('ij,kj->jik', X, X)"}
score: 0.5777786616597445
{'intent': 'outer product of each column of a 2d `x` array to form a 3d array `x`', 'snippet': "np.einsum('ij,kj->jik', X, X)"}

637. input: how to convert upper case letters to lower case
score: 0.7754886050664755
{'intent': 'convert string to lowercase', 'snippet': 's.lower()'}
score: 0.7535543362000263
{'intent': 'convert string `s` to lowercase', 'snippet': 's.lower()'}
score: 0.7535543362000263
{'intent': 'convert string `s` to lowercase', 'snippet': 's.lower()'}

638. input: round(3.0005, 3)
score: 0.8391765000001951
{'intent': 'round number 3.0005 up to 3 decimal places', 'snippet': 'round(3.0005, 3)'}
score: 0.8216866693518016
{'intent': 'round number 2.0005 up to 3 decimal places', 'snippet': 'round(2.0005, 3)'}
score: 0.8216866693518016
{'intent': 'round number 2.0005 up to 3 decimal places', 'snippet': 'round(2.0005, 3)'}

639. input: spawn subprocess that expects console input without blocking?
score: 0.8594206875136441
{'intent': 'Spawn subprocess that expects console input without blocking?', 'snippet': 'p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)'}
score: 0.6446669282270014
{'intent': 'multiple pipes in subprocess', 'snippet': 'p.wait()'}
score: 0.6446669282270014
{'intent': 'Multiple pipes in subprocess', 'snippet': 'p.wait()'}

640. input: python 3 map/lambda method with 2 inputs
score: 0.7398195173251365
{'intent': 'how to do multiple arguments to map function where one remains the same in python?', 'snippet': 'map(lambda x: x + 2, [1, 2, 3])'}
score: 0.7398195173251365
{'intent': 'How to do multiple arguments to map function where one remains the same in python?', 'snippet': 'map(lambda x: x + 2, [1, 2, 3])'}
score: 0.6245845429818531
{'intent': 'How to do multiple arguments to map function where one remains the same in python?', 'snippet': '[add(x, 2) for x in [1, 2, 3]]'}

641. input: redirecting stdio from a command in os.system() in python
score: 0.8868604539249111
{'intent': 'Redirecting stdio from a command in os.system() in Python', 'snippet': "os.system(cmd + '> /dev/null 2>&1')"}
score: 0.7930346794165387
{'intent': 'Python: How to Redirect Output with Subprocess?', 'snippet': 'os.system(my_cmd)'}
score: 0.7930346794165387
{'intent': 'Python: How to Redirect Output with Subprocess?', 'snippet': 'os.system(my_cmd)'}

642. input: how to format a floating number to fixed width in python
score: 0.917102084828761
{'intent': 'How to format a floating number to fixed width in Python', 'snippet': "print('{:10.4f}'.format(x))"}
score: 0.7749186942744362
{'intent': 'python precision in string formatting with float numbers', 'snippet': "format(38.2551994324, '.32f')"}
score: 0.7749186942744362
{'intent': 'Python precision in string formatting with float numbers', 'snippet': "format(38.2551994324, '.32f')"}

643. input: ax.contour(x, y, z, levels, cmap=cmap, norm=norm, antialiased=True)
score: 0.7473544232052783
{'intent': 'Matplotlib: filled contour plot with transparent colors', 'snippet': 'ax.contour(x, y, z, levels, cmap=cmap, norm=norm, antialiased=True)'}
score: 0.5327098379303618
{'intent': 'Creating your own contour in opencv using python', 'snippet': 'cv2.waitKey(0)'}
score: 0.5327098379303618
{'intent': 'creating your own contour in opencv using python', 'snippet': 'cv2.waitKey(0)'}

644. input: importing files in python from __init__.py
score: 0.9748177632399873
{'intent': 'Importing files in Python from __init__.py', 'snippet': '__init__.py'}
score: 0.8807099321021961
{'intent': 'Python: How to import other Python files', 'snippet': '__init__.py'}
score: 0.8644683099568728
{'intent': 'python: import a file from a subdirectory', 'snippet': '__init__.py'}

645. input: removing duplicates of a list of sets
score: 0.8495307353391581
{'intent': 'Removing duplicates in lists', 'snippet': 'list(set(t))'}
score: 0.829316029076003
{'intent': 'removing duplicates of a list of sets', 'snippet': '[set(item) for item in set(frozenset(item) for item in L)]'}
score: 0.829316029076003
{'intent': 'removing duplicates of a list of sets', 'snippet': '[set(item) for item in set(frozenset(item) for item in L)]'}

646. input: sorting while preserving order in python
score: 0.806771370309205
{'intent': 'sorting while preserving order in python', 'snippet': 'a_order, a_sorted = zip(*sorted(enumerate(a), key=lambda item: item[1]))'}
score: 0.7811611187039329
{'intent': 'sorting while preserving order in python', 'snippet': 'sorted(enumerate(a), key=lambda x: x[1])'}
score: 0.7811611187039329
{'intent': 'Sorting while preserving order in python', 'snippet': 'sorted(enumerate(a), key=lambda x: x[1])'}

647. input: filtering all rows with nat in a column in dataframe python
score: 0.9363724860074271
{'intent': 'Filtering all rows with NaT in a column in Dataframe python', 'snippet': 'df.query(\'b == "NaT"\')'}
score: 0.8858080097652927
{'intent': 'filtering all rows with nat in a column in dataframe python', 'snippet': "df.drop(['TMP'], axis=1, inplace=True)"}
score: 0.6154925196745685
{'intent': 'filter columns of only zeros from a pandas data frame', 'snippet': 'df.apply(lambda x: np.all(x == 0))'}

648. input: summarizing a dictionary of arrays in python
score: 0.7983264984258858
{'intent': 'Summarizing a dictionary of arrays in Python', 'snippet': 'heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))'}
score: 0.7983264984258858
{'intent': 'Summarizing a dictionary of arrays in Python', 'snippet': 'heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))'}
score: 0.7895995000601952
{'intent': 'summarizing a dictionary of arrays in python', 'snippet': 'OrderedDict(heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1])))'}

649. input: [item for item in lis if item[1] not in seen and not seen.add(item[1])]
score: 0.6503038473618765
{'intent': 'check if list `li` is empty', 'snippet': 'if (len(li) == 0):\n    pass'}
score: 0.6503038473618765
{'intent': 'check if list `li` is empty', 'snippet': 'if (len(li) == 0):\n    pass'}
score: 0.6478619754807106
{'intent': 'check if list item contains items from another list', 'snippet': '[item for item in my_list if any(x in item for x in bad)]'}

650. input: matplotlib colorbarbase: delete color separators
score: 0.8229432570080473
{'intent': 'Matplotlib ColorbarBase: delete color separators', 'snippet': "mpl.use('WXAgg')"}
score: 0.7428705969308009
{'intent': 'Set Colorbar Range in matplotlib', 'snippet': 'plt.colorbar()'}
score: 0.7428705969308009
{'intent': 'set colorbar range in matplotlib', 'snippet': 'plt.colorbar()'}

651. input: sum(isinstance(x, int) for x in a)
score: 0.7898459197583021
{'intent': 'count the number of integers in list `a`', 'snippet': 'sum(isinstance(x, int) for x in a)'}
score: 0.7898459197583021
{'intent': 'count the number of integers in list `a`', 'snippet': 'sum(isinstance(x, int) for x in a)'}
score: 0.7218304427335609
{'intent': 'summing only the numbers contained in a list', 'snippet': 'sum([x for x in list if isinstance(x, (int, float))])'}

652. input: re.findall('(\\b[A-Z\xc3\x9c\xc3\x96\xc3\x84][a-z.-]+\\b)', words, re.UNICODE)
score: 0.8441404339585161
{'intent': 'Python regex for unicode capitalized words', 'snippet': "re.findall('(\\\\b[A-Z\\xc3\\x9c\\xc3\\x96\\xc3\\x84][a-z.-]+\\\\b)', words, re.UNICODE)"}
score: 0.7203468081923111
{'intent': 'match zero-or-more instances of lower case alphabet characters in a string `f233op `', 'snippet': "re.findall('([a-z])*', 'f233op')"}
score: 0.7203468081923111
{'intent': 'match zero-or-more instances of lower case alphabet characters in a string `f233op `', 'snippet': "re.findall('([a-z])*', 'f233op')"}

653. input: closing python comand subprocesses
score: 0.7286883239404051
{'intent': 'kill a running subprocess call', 'snippet': 'process.terminate()'}
score: 0.6919535134858246
{'intent': 'python, subprocess: reading output from subprocess', 'snippet': 'p.stdin.flush()'}
score: 0.6919535134858246
{'intent': 'python, subprocess: reading output from subprocess', 'snippet': 'p.stdin.flush()'}

654. input: server.serve_forever()
score: 0.7346806723737542
{'intent': 'How to set up Python server side with javascript client side', 'snippet': 'server.serve_forever()'}
score: 0.6914945011925976
{'intent': 'One line ftp server in python', 'snippet': 'server.serve_forever()'}
score: 0.6691957202328329
{'intent': 'multithreaded web server in python', 'snippet': 'server.serve_forever()'}

655. input: root.title('ttk.Notebook')
score: 0.7752747622515848
{'intent': 'Notebook widget in Tkinter', 'snippet': "root.title('ttk.Notebook')"}
score: 0.5407771390676503
{'intent': 'change tkinter frame title', 'snippet': 'root.mainloop()'}
score: 0.5237298370285247
{'intent': 'how to set the program title in python', 'snippet': "os.system('title Yet Another Title')"}

656. input: fig.savefig('temp.png')
score: 0.7659516368874877
{'intent': 'How to save a figure remotely with pylab?', 'snippet': "fig.savefig('temp.png')"}
score: 0.6953276943958497
{'intent': "Save plot `plt` as png file 'filename.png'", 'snippet': "plt.savefig('filename.png')"}
score: 0.6927709109174851
{'intent': 'save matplotlib file to a directory', 'snippet': "fig.savefig('Sub Directory/graph.png')"}

657. input: globals()['var'] = 'an object'
score: 0.8204891236911116
{'intent': 'Insert variable into global namespace from within a function?', 'snippet': "globals()['var'] = 'an object'"}
score: 0.7772028487674152
{'intent': 'define global variable `something` with value `bob`', 'snippet': "globals()['something'] = 'bob'"}
score: 0.7772028487674152
{'intent': 'define global variable `something` with value `bob`', 'snippet': "globals()['something'] = 'bob'"}

658. input: max(list(MyCount.keys()), key=int)
score: 0.8698114867064615
{'intent': 'get max key in dictionary `MyCount`', 'snippet': 'max(list(MyCount.keys()), key=int)'}
score: 0.8698114867064615
{'intent': 'get max key in dictionary `mycount`', 'snippet': 'max(list(MyCount.keys()), key=int)'}
score: 0.8540689377029888
{'intent': 'Get max key in dictionary', 'snippet': 'max(list(MyCount.keys()), key=int)'}

659. input: subprocess.call(['java', '-jar', 'Blender.jar'])
score: 0.897175255138208
{'intent': "execute a jar file 'Blender.jar' using subprocess", 'snippet': "subprocess.call(['java', '-jar', 'Blender.jar'])"}
score: 0.8691174067882208
{'intent': 'python: how can i execute a jar file through a python script', 'snippet': "subprocess.call(['java', '-jar', 'Blender.jar'])"}
score: 0.8691174067882208
{'intent': 'Python: How can I execute a jar file through a python script', 'snippet': "subprocess.call(['java', '-jar', 'Blender.jar'])"}

660. input: a[[0, 1], [1, 2], [2, 2]]
score: 0.7022039776917475
{'intent': 'get element at index 0 of first row and element at index 1 of second row in array `A`', 'snippet': 'A[[0, 1], [0, 1]]'}
score: 0.7022039776917475
{'intent': 'get element at index 0 of first row and element at index 1 of second row in array `a`', 'snippet': 'A[[0, 1], [0, 1]]'}
score: 0.6623037596059478
{'intent': 'Subsetting a 2D numpy array', 'snippet': 'a[[1, 2, 3], [1, 2, 3]]'}

661. input: os.system('cls')
score: 0.6773778381526443
{'intent': 'What OS am I running on', 'snippet': 'import platform\nplatform.system()'}
score: 0.6547788650337536
{'intent': 'get os name', 'snippet': 'import platform\nplatform.system()'}
score: 0.6547788650337536
{'intent': 'get os name', 'snippet': 'import platform\nplatform.system()'}

662. input: [1, 2, 3]
score: 0.5703526431825576
{'intent': 'check if 3 is inside list `[1, 2, 3]`', 'snippet': '3 in [1, 2, 3]'}
score: 0.5703526431825576
{'intent': 'check if 3 is inside list `[1, 2, 3]`', 'snippet': '3 in [1, 2, 3]'}
score: 0.5607007463270594
{'intent': 'store integer 3, 4, 1 and 2 in a list', 'snippet': '[3, 4, 1, 2]'}

663. input: run command 'command -flags arguments &' on command line tools as separate processes
score: 0.8227103425913457
{'intent': "run command 'command -flags arguments &' on command line tools as separate processes", 'snippet': "subprocess.call('command -flags arguments &', shell=True)"}
score: 0.7223580561910805
{'intent': "subprocess run command 'start command -flags arguments' through the shell", 'snippet': "subprocess.call('start command -flags arguments', shell=True)"}
score: 0.7223580561910805
{'intent': "subprocess run command 'start command -flags arguments' through the shell", 'snippet': "subprocess.call('start command -flags arguments', shell=True)"}

664. input: python: split string by list of separators
score: 0.8638288259279778
{'intent': 'Python: Split string by list of separators', 'snippet': "[s.strip() for s in re.split(',|;', string)]"}
score: 0.8638288259279778
{'intent': 'python: split string by list of separators', 'snippet': "[s.strip() for s in re.split(',|;', string)]"}
score: 0.8600186289289404
{'intent': 'Python: Split string by list of separators', 'snippet': "[t.strip() for s in string.split(',') for t in s.split(';')]"}

665. input: how to set xlim and ylim for a subplot in matplotlib
score: 0.9139885463151979
{'intent': 'how to set xlim and ylim for a subplot in matplotlib', 'snippet': 'ax2.set_ylim([0, 5])'}
score: 0.9139885463151979
{'intent': 'How to set xlim and ylim for a subplot in matplotlib', 'snippet': 'ax2.set_ylim([0, 5])'}
score: 0.7473511944366357
{'intent': 'python, matplotlib, subplot: how to set the axis range?', 'snippet': 'pylab.ylim([0, 1000])'}

666. input: """Abc""".translate(maketrans('abcABC', 'defDEF'))
score: 0.8119128693986398
{'intent': 'replace a string `Abc` in case sensitive way using maketrans', 'snippet': '"""Abc""".translate(maketrans(\'abcABC\', \'defDEF\'))'}
score: 0.7789946234919221
{'intent': 'case sensitive string replacement in python', 'snippet': '"""Abc""".translate(maketrans(\'abcABC\', \'defDEF\'))'}
score: 0.7789946234919221
{'intent': 'case sensitive string replacement in Python', 'snippet': '"""Abc""".translate(maketrans(\'abcABC\', \'defDEF\'))'}

667. input: [next(it) for _ in range(n)]
score: 0.7927727608928382
{'intent': 'create a list containing the `n` next values of generator `it`', 'snippet': '[next(it) for _ in range(n)]'}
score: 0.7927727608928382
{'intent': 'create a list containing the `n` next values of generator `it`', 'snippet': '[next(it) for _ in range(n)]'}
score: 0.7568785099603358
{'intent': 'How to get the n next values of a generator in a list (python)', 'snippet': '[next(it) for _ in range(n)]'}

668. input: dic['Test']['class'] = {'section': 5}
score: 0.7753987826534763
{'intent': "add dictionary `{'class': {'section': 5}}` to key 'Test' of dictionary `dic`", 'snippet': "dic['Test'].update({'class': {'section': 5}})"}
score: 0.7753987826534763
{'intent': "add dictionary `{'class': {'section': 5}}` to key 'test' of dictionary `dic`", 'snippet': "dic['Test'].update({'class': {'section': 5}})"}
score: 0.6442653757729027
{'intent': 'adding new key inside a new key and assigning value in python dictionary', 'snippet': "dic['Test'].update({'class': {'section': 5}})"}

669. input: convert a number to a list of integers
score: 0.7497525336254552
{'intent': 'How to convert a list of multiple integers into a single integer?', 'snippet': 'x = [1, 3, 5]'}
score: 0.7497525336254552
{'intent': 'how to convert a list of multiple integers into a single integer?', 'snippet': 'x = [1, 3, 5]'}
score: 0.7241619924786367
{'intent': 'how to convert strings numbers to integers in a list?', 'snippet': 'changed_list = [(int(f) if f.isdigit() else f) for f in original_list]'}

670. input: how to detect if computer is contacted to the internet with python?
score: 0.5654862808518698
{'intent': 'how can i check the data transfer on a network interface in python?', 'snippet': 'time.sleep(5)'}
score: 0.5654862808518698
{'intent': 'How can I check the data transfer on a network interface in python?', 'snippet': 'time.sleep(5)'}
score: 0.5509248032146797
{'intent': 'network pinging with python', 'snippet': "os.system('ping -c 5 www.examplesite.com')"}

671. input: im = scipy.misc.imread('flower.png', flatten=True).astype(np.uint8)
score: 0.8057365367809077
{'intent': 'Image erosion and dilation with Scipy', 'snippet': "im = scipy.misc.imread('flower.png', flatten=True).astype(np.uint8)"}
score: 0.6158721822373809
{'intent': 'Saving a Numpy array as an image', 'snippet': "scipy.misc.imsave('outfile.jpg', image_array)"}
score: 0.6158721822373809
{'intent': 'saving a numpy array as an image', 'snippet': "scipy.misc.imsave('outfile.jpg', image_array)"}

672. input: throw a value error with message 'a very specific bad thing happened', 'foo', 'bar', 'baz'
score: 0.9126154648566134
{'intent': "throw a value error with message 'A very specific bad thing happened', 'foo', 'bar', 'baz'", 'snippet': "raise ValueError('A very specific bad thing happened')"}
score: 0.7851944973828334
{'intent': "manually throw/raise a `ValueError` exception with the message 'A very specific bad thing happened'", 'snippet': "raise ValueError('A very specific bad thing happened')"}
score: 0.7851944973828334
{'intent': "manually throw/raise a `valueerror` exception with the message 'a very specific bad thing happened'", 'snippet': "raise ValueError('A very specific bad thing happened')"}

673. input: print('[{0}, {1}, {2}]'.format(1, 2, 3))
score: 0.9009826877350617
{'intent': 'String formatting in Python', 'snippet': "print('[{0}, {1}, {2}]'.format(1, 2, 3))"}
score: 0.9009826877350617
{'intent': 'String formatting in Python', 'snippet': "print('[{0}, {1}, {2}]'.format(1, 2, 3))"}
score: 0.9004835361536474
{'intent': 'display `1 2 3` as a list of string', 'snippet': "print('[{0}, {1}, {2}]'.format(1, 2, 3))"}

674. input: python list sort in descending order
score: 0.8661650102554035
{'intent': 'Python list sort in descending order', 'snippet': 'sorted(timestamp, reverse=True)'}
score: 0.8154987785392622
{'intent': 'Python - how to sort a list of numerical values in ascending order', 'snippet': 'sorted([10, 3, 2])'}
score: 0.8154987785392622
{'intent': 'python - how to sort a list of numerical values in ascending order', 'snippet': 'sorted([10, 3, 2])'}

675. input: check if string `b` is a number
score: 0.8483690009951451
{'intent': 'check if string `b` is a number', 'snippet': 'b.isdigit()'}
score: 0.8089491922594612
{'intent': 'check if a string is a number', 'snippet': 'b.isdigit()'}
score: 0.7115736967080104
{'intent': 'function to check if a string is a number', 'snippet': 'isdigit()'}

676. input: inserting json into mysql using python
score: 0.9155420575454852
{'intent': 'inserting json into mysql using python', 'snippet': "db.execute('INSERT INTO json_col VALUES %s', json_value)"}
score: 0.9155420575454852
{'intent': 'Inserting JSON into MySQL using Python', 'snippet': "db.execute('INSERT INTO json_col VALUES %s', json_value)"}
score: 0.9155420575454852
{'intent': 'Inserting JSON into MySQL using Python', 'snippet': "db.execute('INSERT INTO json_col VALUES %s', json_value)"}

677. input: plt.gca().xaxis.set_major_formatter(DateFormatter('%H:%M:%S'))
score: 0.8256638859480026
{'intent': "Plotting dates on the x-axis with Python's matplotlib", 'snippet': "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))"}
score: 0.8256638859480026
{'intent': "plotting dates on the x-axis with python's matplotlib", 'snippet': "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d/%Y'))"}
score: 0.7758677946672415
{'intent': 'dates along x-axis of quadmesh', 'snippet': "ax.xaxis.set_major_formatter(dates.DateFormatter('%H:%M'))"}

678. input: """{:20,.2f}""".format(1.8446744073709552e+19)
score: 0.7753713657642841
{'intent': 'Currency formatting in Python', 'snippet': '"""{:20,.2f}""".format(1.8446744073709552e+19)'}
score: 0.7127614233362003
{'intent': 'display a decimal in scientific notation', 'snippet': '"""{:.2E}""".format(Decimal(\'40800000000.00000000000000\'))'}
score: 0.6842818189191683
{'intent': 'Convert float to comma-separated string', 'snippet': '"""{0:,.2f}""".format(24322.34)'}

679. input: upload binary file `myfile.txt` with ftplib
score: 0.8822420287613857
{'intent': 'upload binary file `myfile.txt` with ftplib', 'snippet': "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))"}
score: 0.8380560979026961
{'intent': 'how to upload binary file with ftplib in python?', 'snippet': "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))"}
score: 0.8380560979026961
{'intent': 'How to upload binary file with ftplib in Python?', 'snippet': "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))"}

680. input: get the date 2 months from today
score: 0.8008486760845059
{'intent': 'get the date 2 months from today', 'snippet': '(date(2010, 12, 31) + relativedelta(months=(+ 2)))'}
score: 0.7193692222258792
{'intent': 'get the date 1 month from today', 'snippet': '(date(2010, 12, 31) + relativedelta(months=(+ 1)))'}
score: 0.7193692222258792
{'intent': 'get the date 1 month from today', 'snippet': '(date(2010, 12, 31) + relativedelta(months=(+ 1)))'}

681. input: zip(*[(1, 2), (3, 4), (5, 6)])
score: 0.8824700712494669
{'intent': 'zip lists in a list [[1, 2], [3, 4], [5, 6]]', 'snippet': 'zip(*[[1, 2], [3, 4], [5, 6]])'}
score: 0.8824700712494669
{'intent': 'zip lists in a list [[1, 2], [3, 4], [5, 6]]', 'snippet': 'zip(*[[1, 2], [3, 4], [5, 6]])'}
score: 0.8783789425758578
{'intent': 'zip lists `[1, 2], [3, 4], [5, 6]` in a list', 'snippet': 'zip(*[[1, 2], [3, 4], [5, 6]])'}

682. input: sys.path.insert(0, '/path/to/application/app/folder')
import file
score: 0.9680971536737818
{'intent': "Importing file `file` from folder '/path/to/application/app/folder'", 'snippet': "sys.path.insert(0, '/path/to/application/app/folder')\nimport file"}
score: 0.9182779917574697
{'intent': 'Importing files from different folder', 'snippet': "sys.path.insert(0, '/path/to/application/app/folder')\nimport file"}
score: 0.7831936183525472
{'intent': 'python: importing a file from a parent folder', 'snippet': "sys.path.append('..')"}

683. input: os.system('cd c:\\mydir')
score: 0.8143207206145321
{'intent': 'How to know/change current directory in Python shell?', 'snippet': "os.system('cd c:\\\\mydir')"}
score: 0.7392926157060992
{'intent': "execute a command in the command prompt to list directory contents of the c drive `c:\\\\'", 'snippet': "os.system('dir c:\\\\')"}
score: 0.7392926157060992
{'intent': "execute a command in the command prompt to list directory contents of the c drive `c:\\\\'", 'snippet': "os.system('dir c:\\\\')"}

684. input: reverse a string in python without using reversed or [::-1]
score: 0.883161114571018
{'intent': 'Reverse a string in python without using reversed or [::-1]', 'snippet': 'list(range(len(strs) - 1, -1, -1))'}
score: 0.8819140984597698
{'intent': 'Reverse a string', 'snippet': 'def reversed_string(a_string):\n    return a_string[::(-1)]'}
score: 0.8805778590941257
{'intent': 'Reverse a string in python without using reversed or [::-1]', 'snippet': '"""""".join(reverse(\'hello\'))'}

685. input: print('{:.100f}'.format(2.345e-67))
score: 0.8638234647211659
{'intent': 'print a floating point number 2.345e-67 without any truncation', 'snippet': "print('{:.100f}'.format(2.345e-67))"}
score: 0.8113328728743395
{'intent': 'How to print floating point numbers as it is without any truncation in python?', 'snippet': "print('{:.100f}'.format(2.345e-67))"}
score: 0.8113328728743395
{'intent': 'How to print floating point numbers as it is without any truncation in python?', 'snippet': "print('{:.100f}'.format(2.345e-67))"}

686. input: order a list of lists `[[1, 'mike'], [1, 'bob']]` by the first value of individual list
score: 0.9308869952878815
{'intent': "order a list of lists `[[1, 'mike'], [1, 'bob']]` by the first value of individual list", 'snippet': "sorted([[1, 'mike'], [1, 'bob']])"}
score: 0.9237716493203356
{'intent': 'How to order a list of lists by the first value', 'snippet': "sorted([[1, 'mike'], [1, 'bob']])"}
score: 0.9237716493203356
{'intent': 'how to order a list of lists by the first value', 'snippet': "sorted([[1, 'mike'], [1, 'bob']])"}

687. input: test_df.where(~(test_df < 4))
score: 0.5756670393260825
{'intent': 'Select rows from a DataFrame based on values in a column in pandas', 'snippet': "df.query('foo == 222 | bar == 444')"}
score: 0.5756670393260825
{'intent': 'select rows from a dataframe based on values in a column in pandas', 'snippet': "df.query('foo == 222 | bar == 444')"}
score: 0.5581273815884515
{'intent': 'How to query MultiIndex index columns values in pandas', 'snippet': "df.query('0 < A < 4 and 150 < B < 400')"}

688. input: re.sub('[\\W_]+', '', s)
score: 0.8318068448606384
{'intent': "replace everything that is not an alphabet or a digit with '' in 's'.", 'snippet': "re.sub('[\\\\W_]+', '', s)"}
score: 0.80127908354594
{'intent': 'Python remove anything that is not a letter or number', 'snippet': "re.sub('[\\\\W_]+', '', s)"}
score: 0.80127908354594
{'intent': 'python remove anything that is not a letter or number', 'snippet': "re.sub('[\\\\W_]+', '', s)"}

689. input: python - converting a string of numbers into a list of int
score: 0.8277653501502408
{'intent': 'How to convert a string list into an integer in python', 'snippet': "user_list = [int(number) for number in user_input.split(',')]"}
score: 0.8274182546910599
{'intent': 'converting integer to list in python', 'snippet': 'list(str(123))'}
score: 0.8274182546910599
{'intent': 'converting integer to list in python', 'snippet': 'list(str(123))'}

690. input: counting how many times a row occurs in a matrix (numpy)
score: 0.8407651017345938
{'intent': 'Counting how many times a row occurs in a matrix (numpy)', 'snippet': '(array_2d == row).all(-1).sum()'}
score: 0.6620221024357834
{'intent': 'counting the number of non-nan elements in a numpy ndarray matrix in python', 'snippet': 'np.count_nonzero(~np.isnan(data))'}
score: 0.6620221024357834
{'intent': 'Counting the number of non-NaN elements in a numpy ndarray matrix in Python', 'snippet': 'np.count_nonzero(~np.isnan(data))'}

691. input: remove the fragment identifier `#something` from a url `http://www.address.com/something#something`
score: 0.8700705647691969
{'intent': 'remove the fragment identifier `#something` from a url `http://www.address.com/something#something`', 'snippet': "urlparse.urldefrag('http://www.address.com/something#something')"}
score: 0.7834722629946543
{'intent': 'How can I remove the fragment identifier from a URL?', 'snippet': "urlparse.urldefrag('http://www.address.com/something#something')"}
score: 0.7834722629946543
{'intent': 'how can i remove the fragment identifier from a url?', 'snippet': "urlparse.urldefrag('http://www.address.com/something#something')"}

692. input: df.groupby('a')['b'].apply(list)
score: 0.7951595201333739
{'intent': 'pandas groupby: how to get a union of strings', 'snippet': "df.groupby('A').apply(f)"}
score: 0.7951595201333739
{'intent': 'Pandas groupby: How to get a union of strings', 'snippet': "df.groupby('A').apply(f)"}
score: 0.7338546496547018
{'intent': 'Return values for column `C` after group by on column `A` and `B` in dataframe `df`', 'snippet': "df.groupby(['A', 'B'])['C'].unique()"}

693. input: generate a heatmap in matplotlib using a scatter data set
score: 0.9518172776164041
{'intent': 'generate a heatmap in matplotlib using a scatter data set', 'snippet': 'plt.show()'}
score: 0.9518172776164041
{'intent': 'Generate a heatmap in MatPlotLib using a scatter data set', 'snippet': 'plt.show()'}
score: 0.9518172776164041
{'intent': 'Generate a heatmap in MatPlotLib using a scatter data set', 'snippet': 'plt.show()'}

694. input: django return redirect() with parameters
score: 0.7677428568418426
{'intent': 'Django return redirect() with parameters', 'snippet': "url('^link/(?P<backend>\\\\w+?)/$', my_function)"}
score: 0.7677428568418426
{'intent': 'django return redirect() with parameters', 'snippet': "url('^link/(?P<backend>\\\\w+?)/$', my_function)"}
score: 0.7487460255946947
{'intent': 'redirecting a user in a django template', 'snippet': "return HttpResponseRedirect('/path/')"}

695. input: df2.CET.map(df1.set_index('date')['revenue'])
score: 0.874356084638027
{'intent': 'Merge 2 dataframes with same values in a column', 'snippet': "df2.CET.map(df1.set_index('date')['revenue'])"}
score: 0.863065735766158
{'intent': 'merge 2 dataframes with same values in a column', 'snippet': "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"}
score: 0.863065735766158
{'intent': 'Merge 2 dataframes with same values in a column', 'snippet': "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"}

696. input: df.apply(lambda x: pd.to_numeric(x, errors='ignore'))
score: 0.9056864736561336
{'intent': 'Pandas: change data type of columns', 'snippet': "df.apply(lambda x: pd.to_numeric(x, errors='ignore'))"}
score: 0.7485263723184729
{'intent': 'pandas: change data type of columns', 'snippet': "pd.to_numeric(s, errors='ignore')"}
score: 0.6609422453708644
{'intent': 'replace values of dataframe `df` with True if numeric', 'snippet': 'df.applymap(lambda x: isinstance(x, (int, float)))'}

697. input: update pandas cells based on column values and other columns
score: 0.7402316973232508
{'intent': 'Update Pandas Cells based on Column Values and Other Columns', 'snippet': 'df = pd.DataFrame(data=matrix.toarray(), columns=names, index=raw)'}
score: 0.6758357595734374
{'intent': 'pandas changing cell values based on another cell', 'snippet': "df.loc[df['column_name'].isin(b)]"}
score: 0.6758357595734374
{'intent': 'Pandas changing cell values based on another cell', 'snippet': "df.loc[df['column_name'].isin(b)]"}

698. input: df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})
score: 0.9424979159053964
{'intent': 'create a pandas dataframe `df` from elements of a dictionary `nvalues`', 'snippet': "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"}
score: 0.9204661237206543
{'intent': 'Creating a Pandas dataframe from elements of a dictionary', 'snippet': "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"}
score: 0.9204661237206543
{'intent': 'Creating a Pandas dataframe from elements of a dictionary', 'snippet': "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"}

699. input: parse string "jun 1 2005  1:33pm" into datetime by format "%b %d %y %i:%m%p"
score: 0.929877762868164
{'intent': 'parse string "Jun 1 2005  1:33PM" into datetime by format "%b %d %Y %I:%M%p"', 'snippet': "datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"}
score: 0.8259549909264405
{'intent': 'Converting string into datetime', 'snippet': "datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"}
score: 0.8114407700625201
{'intent': "Parse string '21/11/06 16:30' according to format '%d/%m/%y %H:%M'", 'snippet': "datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')"}

700. input: delete an empty directory
score: 0.7813933550615897
{'intent': 'delete an empty directory', 'snippet': 'os.rmdir()'}
score: 0.6669351707518711
{'intent': 'How do I remove/delete a folder that is not empty with Python?', 'snippet': "shutil.rmtree('/folder_name')"}
score: 0.6208237217938879
{'intent': 'Delete a file or folder', 'snippet': 'os.rmdir()'}

701. input: sorted(matrix, key=itemgetter(1))
score: 0.8502854742645931
{'intent': 'sort 2d array `matrix` by row with index 1', 'snippet': 'sorted(matrix, key=itemgetter(1))'}
score: 0.8502854742645931
{'intent': 'sort 2d array `matrix` by row with index 1', 'snippet': 'sorted(matrix, key=itemgetter(1))'}
score: 0.7531600371084501
{'intent': 'how to sort 2d array by row in python?', 'snippet': 'sorted(matrix, key=itemgetter(1))'}

702. input: open a file in sublime text and wait until it is closed while python script is running
score: 0.8892008379522837
{'intent': 'Open a file in Sublime Text and wait until it is closed while Python script is running', 'snippet': "subprocess.Popen(['subl', '-w', 'parameters.py']).wait()"}
score: 0.6715550744975782
{'intent': 'How do I launch a file in its default program, and then close it when the script finishes?', 'snippet': "subprocess.Popen('start /WAIT ' + self.file, shell=True)"}
score: 0.6715550744975782
{'intent': 'how do i launch a file in its default program, and then close it when the script finishes?', 'snippet': "subprocess.Popen('start /WAIT ' + self.file, shell=True)"}

703. input: python serial communication
score: 0.701226102985996
{'intent': 'Python serial communication', 'snippet': "s.write(str(25) + '\\n')"}
score: 0.6131403022117704
{'intent': 'Sending binary data over sockets with Python', 'snippet': 's.send(my_bytes)'}
score: 0.6131403022117704
{'intent': 'sending binary data over sockets with python', 'snippet': 's.send(my_bytes)'}

704. input: plt.savefig('multiple_facet_binary_hue')
score: 0.7267898925178622
{'intent': 'Creating a faceted matplotlib/seaborn plot using indicator variables rather than a single column', 'snippet': "plt.savefig('multiple_facet_binary_hue')"}
score: 0.585888048836511
{'intent': "Save plot `plt` as png file 'filename.png'", 'snippet': "plt.savefig('filename.png')"}
score: 0.5711185487794993
{'intent': 'changing image hue with python pil', 'snippet': "new_img.save('tweeter_green.png')"}

705. input: data_df['grade'] = data_df['grade'].astype(float).astype(int)
score: 0.9501015392034329
{'intent': "change data type of data in column 'grade' of dataframe `data_df` into float and then to int", 'snippet': "data_df['grade'] = data_df['grade'].astype(float).astype(int)"}
score: 0.9501015392034329
{'intent': "Change data type of data in column 'grade' of dataframe `data_df` into float and then to int", 'snippet': "data_df['grade'] = data_df['grade'].astype(float).astype(int)"}
score: 0.9388709959976992
{'intent': 'type conversion in python from int to float', 'snippet': "data_df['grade'] = data_df['grade'].astype(float).astype(int)"}

706. input: getting raw binary representation of a file in python
score: 0.8691244794921176
{'intent': 'Getting Raw Binary Representation of a file in Python', 'snippet': "binrep = ''.join(bytetable[x] for x in open('file', 'rb').read())"}
score: 0.8441486005131777
{'intent': 'getting raw binary representation of a file in python', 'snippet': "bytetable = [('00000000' + bin(x)[2:])[-8:] for x in range(256)]"}
score: 0.7162432788736264
{'intent': 'how to read a file byte by byte in python and how to print a bytelist as a binary?', 'snippet': 'file.read(1)'}

707. input: splitting a string based on a certain set of words
score: 0.7564415966204208
{'intent': 'Splitting a string based on a certain set of words', 'snippet': "[re.split('_(?:f?or|and)_', s) for s in l]"}
score: 0.7564415966204208
{'intent': 'Splitting a string based on a certain set of words', 'snippet': "[re.split('_(?:f?or|and)_', s) for s in l]"}
score: 0.7510181734523015
{'intent': 'Splitting a string based on a certain set of words', 'snippet': "re.split('_for_', 'happy_hats_for_cats')"}

708. input: [[1, 100313, 0, 0, 1], [2, 100313, 0, 0, 1], [1, 100314], [3, 100315]]
score: 0.6430546293825123
{'intent': 'numpy array set ones between two values, fast', 'snippet': 'array([0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0])'}
score: 0.6309942615054275
{'intent': 'Combine or join numpy arrays', 'snippet': '[(0, 0, 1, 1), (0, 1, 0, 1)]'}
score: 0.6251147596532962
{'intent': 'Array in python with arbitrary index', 'snippet': '[100, None, None, None, None, None, None, None, None, None, 200]'}

709. input: how to use different view for django-registration?
score: 0.8636130866534008
{'intent': 'How to use different view for django-registration?', 'snippet': "url('^accounts/', include('registration.backends.default.urls')),"}
score: 0.5679020043657501
{'intent': 'create django admin intermediate page', 'snippet': 'admin.site.register(Person, PersonAdmin)'}
score: 0.5487046358746805
{'intent': 'how to use current logged in user as pk for django detailview?', 'snippet': 'return self.request.user'}

710. input: python window resize
score: 0.688157026457284
{'intent': 'Setting the window to a fixed size with Tkinter', 'snippet': 'root.mainloop()'}
score: 0.688157026457284
{'intent': 'setting the window to a fixed size with tkinter', 'snippet': 'root.mainloop()'}
score: 0.6854951533352135
{'intent': 'how to resize window in opencv2 python', 'snippet': "cv2.namedWindow('main', cv2.WINDOW_NORMAL)"}

711. input: matplotlib: multiple datasets on the same scatter plot
score: 0.9081774069361412
{'intent': 'MatPlotLib: Multiple datasets on the same scatter plot', 'snippet': 'plt.show()'}
score: 0.7346140733860451
{'intent': 'getting x,y from a scatter plot with multiple datasets?', 'snippet': 'plt.show()'}
score: 0.7346140733860451
{'intent': 'getting x,y from a scatter plot with multiple datasets?', 'snippet': 'plt.show()'}

712. input: pandas - get first row value of a given column
score: 0.7931126723126066
{'intent': 'Pandas - Get first row value of a given column', 'snippet': "df_test['Btime'].iloc[0]"}
score: 0.7230176750392707
{'intent': 'Pandas dataframe get first row of each group', 'snippet': "df.groupby('id').first()"}
score: 0.7138795845077346
{'intent': 'Extract first and last row of a dataframe in pandas', 'snippet': 'pd.concat([df.head(1), df.tail(1)])'}

713. input: list all the files that matches the pattern `hello*.txt`
score: 0.8878824894204478
{'intent': 'List all the files that matches the pattern `hello*.txt`', 'snippet': "glob.glob('hello*.txt')"}
score: 0.7405735323217615
{'intent': "list all the files that doesn't contain the name `hello`", 'snippet': "glob.glob('[!hello]*.txt')"}
score: 0.7405735323217615
{'intent': "List all the files that doesn't contain the name `hello`", 'snippet': "glob.glob('[!hello]*.txt')"}

714. input: removing duplicate characters from a string
score: 0.7352264278743635
{'intent': 'Removing duplicate characters from a string', 'snippet': '"""""".join(set(foo))'}
score: 0.7352264278743635
{'intent': 'removing duplicate characters from a string', 'snippet': '"""""".join(set(foo))'}
score: 0.7352264278743635
{'intent': 'Removing duplicate characters from a string', 'snippet': '"""""".join(set(foo))'}

715. input: r.sub('\\1_STATUS = "\\2"\\n\\1_TIME = \\3', content)
score: 0.7464579202194602
{'intent': 'Extract data from HTML table using Python', 'snippet': 'r.sub(\'\\\\1_STATUS = "\\\\2"\\\\n\\\\1_TIME = \\\\3\', content)'}
score: 0.7253210982166576
{'intent': 'Extract data from HTML table using Python', 'snippet': 'print(r.sub(\'\\\\1_STATUS = "\\\\2"\\\\n\\\\1_TIME = \\\\3\', content))'}
score: 0.7253210982166576
{'intent': 'extract data from html table using python', 'snippet': 'print(r.sub(\'\\\\1_STATUS = "\\\\2"\\\\n\\\\1_TIME = \\\\3\', content))'}

716. input: dict([(k, v) for k, v in zip(keys, values)])
score: 0.9395819113097876
{'intent': 'zip keys with individual values in lists `k` and `v`', 'snippet': '[dict(zip(k, x)) for x in v]'}
score: 0.8947441515012682
{'intent': 'How do I zip keys with individual values in my lists in python?', 'snippet': '[dict(zip(k, x)) for x in v]'}
score: 0.8947441515012682
{'intent': 'How do I zip keys with individual values in my lists in python?', 'snippet': '[dict(zip(k, x)) for x in v]'}

717. input: changing the text on a label
score: 0.8505922960009509
{'intent': 'Changing the text on a label', 'snippet': "self.labelText = 'change the value'"}
score: 0.8505922960009509
{'intent': 'changing the text on a label', 'snippet': "self.labelText = 'change the value'"}
score: 0.7481106945018452
{'intent': 'Changing the text on a label', 'snippet': "self.depositLabel['text'] = 'change the value'"}

718. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

719. input: changing the color of the axis, ticks and labels for a plot in matplotlib
score: 0.8632266051458295
{'intent': 'changing the color of the axis, ticks and labels for a plot in matplotlib', 'snippet': "ax.spines['top'].set_color('red')"}
score: 0.7716285115718103
{'intent': 'Elegantly changing the color of a plot frame in matplotlib', 'snippet': 'plt.setp([ax.get_xticklines(), ax.get_yticklines()], color=color)'}
score: 0.7716285115718103
{'intent': 'elegantly changing the color of a plot frame in matplotlib', 'snippet': 'plt.setp([ax.get_xticklines(), ax.get_yticklines()], color=color)'}

720. input: """{0:>15.2f}""".format(1464.1000000000001)
score: 0.7343937903141547
{'intent': 'How do you use multiple arguments in {} when using the .format() method in Python', 'snippet': '"""{0:>15.2f}""".format(1464.1000000000001)'}
score: 0.6963177245356373
{'intent': 'display a decimal in scientific notation', 'snippet': '"""{:.2E}""".format(Decimal(\'40800000000.00000000000000\'))'}
score: 0.6828861781556919
{'intent': 'limit float 13.949999999999999 to two decimal points', 'snippet': "'{0:.2f}'.format(13.95)"}

721. input: setting stacksize in a python script
score: 0.7908506542643376
{'intent': 'Setting stacksize in a python script', 'snippet': "os.system('ulimit -s unlimited; some_executable')"}
score: 0.7908506542643376
{'intent': 'setting stacksize in a python script', 'snippet': "os.system('ulimit -s unlimited; some_executable')"}
score: 0.7908506542643376
{'intent': 'Setting stacksize in a python script', 'snippet': "os.system('ulimit -s unlimited; some_executable')"}

722. input: numpy.array([(x in a) for x in b])
score: 0.8552845933589235
{'intent': 'Numpy: How to check if array contains certain numbers?', 'snippet': 'numpy.array([(x in a) for x in b])'}
score: 0.8552845933589235
{'intent': 'Numpy: How to check if array contains certain numbers?', 'snippet': 'numpy.array([(x in a) for x in b])'}
score: 0.8095073852896872
{'intent': "numpy:  check if array 'a' contains all the numbers in array 'b'.", 'snippet': 'numpy.array([(x in a) for x in b])'}

723. input: resizing window doesn't resize contents in tkinter
score: 0.8628265069923724
{'intent': "Resizing window doesn't resize contents in tkinter", 'snippet': 'root.grid_rowconfigure(0, weight=1)'}
score: 0.8628265069923724
{'intent': "resizing window doesn't resize contents in tkinter", 'snippet': 'root.grid_rowconfigure(0, weight=1)'}
score: 0.8618140848619937
{'intent': "resizing window doesn't resize contents in tkinter", 'snippet': 'self.grid_columnconfigure(0, weight=1)'}

724. input: sorted(zipped, key=lambda x: x[1])
score: 0.8979804830066098
{'intent': 'sort a zipped list `zipped` using lambda function', 'snippet': 'sorted(zipped, key=lambda x: x[1])'}
score: 0.8472592857016655
{'intent': 'how do i sort a zipped list in python?', 'snippet': 'sorted(zipped, key=lambda x: x[1])'}
score: 0.8472592857016655
{'intent': 'How do I sort a zipped list in Python?', 'snippet': 'sorted(zipped, key=lambda x: x[1])'}

725. input: my_dict2 = {y: x for x, y in my_dict.items()}
score: 0.8503770833086708
{'intent': 'switching keys and values in a dictionary in python', 'snippet': 'my_dict2 = {y: x for x, y in my_dict.items()}'}
score: 0.8257339118408475
{'intent': 'switching keys and values in a dictionary in python', 'snippet': 'my_dict2 = dict((y, x) for x, y in my_dict.items())'}
score: 0.8257339118408475
{'intent': 'switching keys and values in a dictionary in python', 'snippet': 'my_dict2 = dict((y, x) for x, y in my_dict.items())'}

726. input: how to get the pointer address of a ctypes.c_char_p instance
score: 0.6935975265676867
{'intent': 'get the address of a ctypes object', 'snippet': 'ctypes.addressof(bufstr)'}
score: 0.6935975265676867
{'intent': 'Get the address of a ctypes object', 'snippet': 'ctypes.addressof(bufstr)'}
score: 0.530228848346946
{'intent': 'getting data from ctypes array into numpy', 'snippet': 'a = numpy.frombuffer(buffer, float)'}

727. input: python - numpy - tuples as elements of an array
score: 0.8169501430717174
{'intent': 'convert numpy array to tuple', 'snippet': 'tuple([tuple(row) for row in myarray])'}
score: 0.8169501430717174
{'intent': 'Convert numpy array to tuple', 'snippet': 'tuple([tuple(row) for row in myarray])'}
score: 0.7886387623440385
{'intent': 'can i put a tuple into an array in python?', 'snippet': 'list_of_tuples[0][0] = 7'}

728. input: python gzip: is there a way to decompress from a string?
score: 0.8955352656930352
{'intent': 'Python gzip: is there a way to decompress from a string?', 'snippet': "open(filename, mode='rb', compresslevel=9)"}
score: 0.7144623798950662
{'intent': 'howto uncompress gzipped data in a byte array?', 'snippet': 'zlib.decompress(data)'}
score: 0.7112938968796614
{'intent': 'reading utf-8 characters from a gzip file in python', 'snippet': "gzip.open('file.gz', 'rt', encoding='utf-8')"}

729. input: how to get rid of grid lines when plotting with seaborn + pandas with secondary_y
score: 0.8836133844911238
{'intent': 'How to get rid of grid lines when plotting with Seaborn + Pandas with secondary_y', 'snippet': "sns.set_style('whitegrid', {'axes.grid': False})"}
score: 0.6273187983028594
{'intent': 'matplotlib: two y-axis scales, how to align gridlines?', 'snippet': 'plt.show()'}
score: 0.6273187983028594
{'intent': 'matplotlib: two y-axis scales, how to align gridlines?', 'snippet': 'plt.show()'}

730. input: how to get the first column of a pandas dataframe as a series?
score: 0.8716270502746958
{'intent': 'How to get the first column of a pandas DataFrame as a Series?', 'snippet': 'df.iloc[:, (0)]'}
score: 0.6915637668123618
{'intent': 'Get rows that have the same value across its columns in pandas', 'snippet': 'df.apply(pd.Series.nunique, axis=1)'}
score: 0.6915637668123618
{'intent': 'get rows that have the same value across its columns in pandas', 'snippet': 'df.apply(pd.Series.nunique, axis=1)'}

731. input: print(''.join(mismatches))
score: 0.7143546008808992
{'intent': 'Python printing without commas', 'snippet': "print(' '.join(map(str, l)))"}
score: 0.7072701541753702
{'intent': 'Comparing DNA sequences in Python 3', 'snippet': "print(''.join(mismatches))"}
score: 0.6717456246119675
{'intent': 'removing set identifier when printing sets in python', 'snippet': "print(', '.join(words))"}

732. input: how to print +1 in python, as +1 (with plus sign) instead of 1?
score: 0.8776034825840526
{'intent': 'how to print +1 in python, as +1 (with plus sign) instead of 1?', 'snippet': "print('%+d' % score)"}
score: 0.869630035733306
{'intent': 'How to print +1 in Python, as +1 (with plus sign) instead of 1?', 'snippet': "print('{0:+d}'.format(score))"}
score: 0.869630035733306
{'intent': 'How to print +1 in Python, as +1 (with plus sign) instead of 1?', 'snippet': "print('{0:+d}'.format(score))"}

733. input: how to print a list with integers without the brackets, commas and no quotes?
score: 0.801008660066142
{'intent': 'How to print a list with integers without the brackets, commas and no quotes?', 'snippet': "print(int(''.join(str(x) for x in [7, 7, 7, 7])))"}
score: 0.801008660066142
{'intent': 'how to print a list with integers without the brackets, commas and no quotes?', 'snippet': "print(int(''.join(str(x) for x in [7, 7, 7, 7])))"}
score: 0.7969028988107083
{'intent': 'How to print a list with integers without the brackets, commas and no quotes?', 'snippet': "print(''.join(map(str, data)))"}

734. input: row-wise indexing in numpy
score: 0.9141619421288624
{'intent': 'row-wise indexing in numpy', 'snippet': 'A[i, j]'}
score: 0.8876119636511173
{'intent': 'Row-wise indexing in Numpy', 'snippet': 'i = np.array([[0], [1]])'}
score: 0.8876119636511173
{'intent': 'row-wise indexing in numpy', 'snippet': 'i = np.array([[0], [1]])'}

735. input: names = list(map(lambda x: x[0], cursor.description))
score: 0.7770866329839876
{'intent': 'SQLite get a list of column names from cursor object `cursor`', 'snippet': 'names = list(map(lambda x: x[0], cursor.description))'}
score: 0.6658846161594707
{'intent': 'Is there a way to get a list of column names in sqlite?', 'snippet': 'names = list(map(lambda x: x[0], cursor.description))'}
score: 0.6658846161594707
{'intent': 'is there a way to get a list of column names in sqlite?', 'snippet': 'names = list(map(lambda x: x[0], cursor.description))'}

736. input: writer.writerows(row.split() for row in infile if row.strip())
score: 0.754184106668047
{'intent': "converting file from .txt to .csv doesn't write last column of data", 'snippet': 'writer.writerows(row.split() for row in infile if row.strip())'}
score: 0.743556380548279
{'intent': "converting file from .txt to .csv doesn't write last column of data", 'snippet': 'writer.writerows(row.strip().split() for row in infile if row.strip())'}
score: 0.743556380548279
{'intent': "converting file from .txt to .csv doesn't write last column of data", 'snippet': 'writer.writerows(row.strip().split() for row in infile if row.strip())'}

737. input: add unicode string '1' to utf-8 decoded string '\xc2\xa3'
score: 0.8462639354469317
{'intent': "add unicode string '1' to UTF-8 decoded string '\\xc2\\xa3'", 'snippet': "print('\\xc2\\xa3'.decode('utf8') + '1')"}
score: 0.7482464687487428
{'intent': 'Double-decoding unicode in python', 'snippet': "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')"}
score: 0.7482464687487428
{'intent': 'double-decoding unicode in python', 'snippet': "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')"}

738. input: e = root.xpath('.//a[starts-with(text(),"TEXT A")]')
score: 0.9179459451926506
{'intent': 'Find the`a` tag in html `root` which starts with the text `TEXT A`  and assign it to `e`', 'snippet': 'e = root.xpath(\'.//a[starts-with(text(),"TEXT A")]\')'}
score: 0.8496567246759917
{'intent': "find the element that holds string 'text a' in file `root`", 'snippet': 'e = root.xpath(\'.//a[text()="TEXT A"]\')'}
score: 0.8496567246759917
{'intent': "find the element that holds string 'TEXT A' in file `root`", 'snippet': 'e = root.xpath(\'.//a[text()="TEXT A"]\')'}

739. input: how to read csv file with of data frame with row names in pandas
score: 0.86209076900434
{'intent': 'How to read CSV file with of data frame with row names in Pandas', 'snippet': "pd.io.parsers.read_csv('tmp.csv', sep='\\t', index_col=0)"}
score: 0.7661660349246249
{'intent': 'Reading Multiple CSV Files into Python Pandas Dataframe', 'snippet': 'frame = pd.read_csv(path, names=columns)'}
score: 0.7661660349246249
{'intent': 'reading multiple csv files into python pandas dataframe', 'snippet': 'frame = pd.read_csv(path, names=columns)'}

740. input: remove all instances of [1, 1] from list `a`
score: 0.8870392493844291
{'intent': 'remove all instances of `[1, 1]` from a list `a`', 'snippet': '[x for x in a if x != [1, 1]]'}
score: 0.8870392493844291
{'intent': 'remove all instances of `[1, 1]` from a list `a`', 'snippet': '[x for x in a if x != [1, 1]]'}
score: 0.8695952999324696
{'intent': 'remove all instances of [1, 1] from list `a`', 'snippet': 'a[:] = [x for x in a if x != [1, 1]]'}

741. input: create a slice object using string `string_slice`
score: 0.8174245360599235
{'intent': 'create a slice object using string `string_slice`', 'snippet': "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])"}
score: 0.7412740036020995
{'intent': 'python: want to use a string as a slice specifier', 'snippet': "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])"}
score: 0.7412740036020995
{'intent': 'Python: Want to use a string as a slice specifier', 'snippet': "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])"}

742. input: cur.execute("SELECT * FROM records WHERE email LIKE '%s'", (search,))
score: 0.760682493638973
{'intent': 'Python MySQLdb TypeError: not all arguments converted during string formatting', 'snippet': 'cur.execute("SELECT * FROM records WHERE email LIKE \'%s\'", [search])'}
score: 0.760682493638973
{'intent': 'python mysqldb typeerror: not all arguments converted during string formatting', 'snippet': 'cur.execute("SELECT * FROM records WHERE email LIKE \'%s\'", [search])'}
score: 0.7558113511441596
{'intent': 'Python MySQLdb TypeError: not all arguments converted during string formatting', 'snippet': 'cur.execute("SELECT * FROM records WHERE email LIKE \'%s\'", search)'}

743. input: get (column, row) index from numpy array that meets a boolean condition
score: 0.8663352621944466
{'intent': 'Get (column, row) index from NumPy array that meets a boolean condition', 'snippet': 'np.column_stack(np.where(b))'}
score: 0.8222778451246471
{'intent': 'how to turn a boolean array into index array in numpy', 'snippet': 'numpy.where(mask)'}
score: 0.8222778451246471
{'intent': 'How to turn a boolean array into index array in numpy', 'snippet': 'numpy.where(mask)'}

744. input: url.split('&')[-1].replace('=', '') + '.html'
score: 0.9299236533527021
{'intent': 'strip everything up to and including the character `&` from url `url`, strip the character `=` from the remaining string and concatenate `.html` to the end', 'snippet': "url.split('&')[-1].replace('=', '') + '.html'"}
score: 0.8826650095069293
{'intent': 'Strip random characters from url', 'snippet': "url.split('&')[-1].replace('=', '') + '.html'"}
score: 0.8826650095069293
{'intent': 'Strip random characters from url', 'snippet': "url.split('&')[-1].replace('=', '') + '.html'"}

745. input: df1.reset_index()
score: 0.8624534101685173
{'intent': 'reset the indexes of a pandas data frame', 'snippet': 'df2 = df.reset_index()'}
score: 0.8624534101685173
{'intent': 'Reset the indexes of a pandas data frame', 'snippet': 'df2 = df.reset_index()'}
score: 0.8300224585445645
{'intent': 'How to reset index in a pandas data frame?', 'snippet': 'df = df.reset_index(drop=True)'}

746. input: today.strftime('%B')
score: 0.7270447266619504
{'intent': 'how to get month name of datetime `today`', 'snippet': "today.strftime('%B')"}
score: 0.7270447266619504
{'intent': 'how to get month name of datetime `today`', 'snippet': "today.strftime('%B')"}
score: 0.7024217369605402
{'intent': "Getting today's date in YYYY-MM-DD", 'snippet': "datetime.datetime.today().strftime('%Y-%m-%d')"}

747. input: plt.savefig('test.png', bbox_inches='tight')
score: 0.7958153834786481
{'intent': 'remove white space padding around a saved image `test.png` in matplotlib', 'snippet': "plt.savefig('test.png', bbox_inches='tight')"}
score: 0.7958153834786481
{'intent': 'remove white space padding around a saved image `test.png` in matplotlib', 'snippet': "plt.savefig('test.png', bbox_inches='tight')"}
score: 0.791802105786643
{'intent': "matplotlib savefig image size with bbox_inches='tight'", 'snippet': "plt.savefig('/tmp/test.png', dpi=200)"}

748. input: a.flatten()
score: 0.6366954010497747
{'intent': 'From ND to 1D arrays', 'snippet': 'a.flatten()'}
score: 0.6182577070143733
{'intent': 'from nd to 1d arrays', 'snippet': 'c = a.flatten()'}
score: 0.6182577070143733
{'intent': 'From ND to 1D arrays', 'snippet': 'c = a.flatten()'}

749. input: url decode utf-8 in python
score: 0.9200007682433271
{'intent': 'Url decode UTF-8 in Python', 'snippet': "urllib.parse.unquote(url).decode('utf8')"}
score: 0.9200007682433271
{'intent': 'url decode utf-8 in python', 'snippet': "urllib.parse.unquote(url).decode('utf8')"}
score: 0.9182175202609497
{'intent': 'Url decode UTF-8 in Python', 'snippet': "url = urllib.parse.unquote(url).decode('utf8')"}

750. input: how to convert string to byte arrays?
score: 0.7540723182713576
{'intent': 'how to convert string to byte arrays?', 'snippet': "map(ord, 'Hello, \\u9a6c\\u514b')"}
score: 0.7540723182713576
{'intent': 'How to convert string to byte arrays?', 'snippet': "map(ord, 'Hello, \\u9a6c\\u514b')"}
score: 0.7297608438249529
{'intent': 'How to convert string to byte arrays?', 'snippet': '"""""".join([(\'/x%02x\' % ord(c)) for c in \'hello\'])'}

751. input: delete letters from string '12454v'
score: 0.8067559825413884
{'intent': "delete letters from string '12454v'", 'snippet': '"""""".join(filter(str.isdigit, \'12454v\'))'}
score: 0.7704451531304977
{'intent': 'Delete letters from string', 'snippet': '"""""".join(filter(str.isdigit, \'12454v\'))'}
score: 0.7704451531304977
{'intent': 'Delete letters from string', 'snippet': '"""""".join(filter(str.isdigit, \'12454v\'))'}

752. input: merge on single level of multiindex
score: 0.5822074807483358
{'intent': 'How to combine single and multiindex Pandas DataFrames', 'snippet': 'pd.concat([df2, df1], axis=1)'}
score: 0.5822074807483358
{'intent': 'how to combine single and multiindex pandas dataframes', 'snippet': 'pd.concat([df2, df1], axis=1)'}
score: 0.522478355430956
{'intent': 'merging multiple dataframes on column', 'snippet': 'merged.reset_index()'}

753. input: converting pil image to gtk pixbuf
score: 0.6796290510125553
{'intent': 'scale an image in gtk', 'snippet': 'image = gtk.image_new_from_pixbuf(pixbuf)'}
score: 0.5909827779868028
{'intent': 'how to get alpha value of a png image with pil?', 'snippet': "alpha = img.convert('RGBA').split()[-1]"}
score: 0.5908748667196653
{'intent': 'how can i save an image with pil?', 'snippet': "j = Image.fromarray(b, mode='RGB')"}

754. input: windows = [{'script': 'admin.py', 'uac_info': 'requireAdministrator'}]
score: 0.7870537552970192
{'intent': 'Running compiled python (py2exe) as administrator in Vista', 'snippet': "windows = [{'script': 'admin.py', 'uac_info': 'requireAdministrator'}]"}
score: 0.5384029360846495
{'intent': 'how to execute manage.py from the python shell', 'snippet': "execute_from_command_line(['manage.py', 'syncdb'])"}
score: 0.5384029360846495
{'intent': 'How to execute manage.py from the Python shell', 'snippet': "execute_from_command_line(['manage.py', 'syncdb'])"}

755. input: np.isnan(a)
score: 0.483067090852915
{'intent': 'replace NaN values in array `a` with zeros', 'snippet': 'b = np.where(np.isnan(a), 0, a)'}
score: 0.47111702920581033
{'intent': 'numpy isnan() fails on an array of floats (from pandas dataframe apply)', 'snippet': 'np.isnan(np.array([np.nan, 0], dtype=object))'}
score: 0.47111702920581033
{'intent': 'Numpy isnan() fails on an array of floats (from pandas dataframe apply)', 'snippet': 'np.isnan(np.array([np.nan, 0], dtype=object))'}

756. input: a.append(b).reset_index(drop=True)
score: 0.7717356985306061
{'intent': 'Simple way to append a pandas series with same index', 'snippet': 'a.append(b).reset_index(drop=True)'}
score: 0.7717356985306061
{'intent': 'Simple way to append a pandas series with same index', 'snippet': 'a.append(b).reset_index(drop=True)'}
score: 0.7576449474251298
{'intent': 'append a pandas series `b` to the series `a` and get a continuous index', 'snippet': 'a.append(b).reset_index(drop=True)'}

757. input: result.extend(item)
score: 0.7435751158498989
{'intent': 'append tuples to a list', 'snippet': 'result.extend(item)'}
score: 0.44870438799767326
{'intent': 'take the content of a list and append it to another list', 'snippet': 'c.extend(a)'}
score: 0.4324170246629356
{'intent': 'get the size of object `items`', 'snippet': 'items.__len__()'}

758. input: plt.scatter(x, y, color=c)
score: 0.8272711236817581
{'intent': 'Scatter plot and Color mapping in Python', 'snippet': "plt.scatter(x, y, c=t, cmap='jet')"}
score: 0.8272711236817581
{'intent': 'scatter plot and color mapping in python', 'snippet': "plt.scatter(x, y, c=t, cmap='jet')"}
score: 0.747872835555635
{'intent': 'Matplotlib scatterplot; colour as a function of a third variable', 'snippet': 'plt.show()'}

759. input: how to make matplotlib scatterplots transparent as a group?
score: 0.9323899612364929
{'intent': 'How to make Matplotlib scatterplots transparent as a group?', 'snippet': 'plt.show()'}
score: 0.9323899612364929
{'intent': 'how to make matplotlib scatterplots transparent as a group?', 'snippet': 'plt.show()'}
score: 0.9011421335945108
{'intent': 'How to make Matplotlib scatterplots transparent as a group?', 'snippet': "fig.savefig('test_scatter.png')"}

760. input: np.einsum('...j,...j->...', vf, vf)
score: 0.6233702719192757
{'intent': 'find the magnitude (length) squared of a vector `vf` field', 'snippet': "np.einsum('...j,...j->...', vf, vf)"}
score: 0.612331160745853
{'intent': 'outer product of each column of a 2d `x` array to form a 3d array `x`', 'snippet': "np.einsum('ij,kj->jik', X, X)"}
score: 0.612331160745853
{'intent': 'outer product of each column of a 2d `X` array to form a 3d array `X`', 'snippet': "np.einsum('ij,kj->jik', X, X)"}

761. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

762. input: change specific value in csv file via python
score: 0.806760648689617
{'intent': 'Change specific value in CSV file via Python', 'snippet': "df.to_csv('test.csv', index=False)"}
score: 0.614224369938547
{'intent': 'how to add a new column to a csv file using python?', 'snippet': 'writer.writerows(all)'}
score: 0.6140756597493763
{'intent': 'updating csv with data from a csv with different formatting', 'snippet': "cdf1.to_csv('temp.csv', index=False)"}

763. input: re.findall('([0-9]+|[A-Z])', '20M10000N80M')
score: 0.8815967359339008
{'intent': "separate numbers and characters in string '20M10000N80M'", 'snippet': "re.findall('([0-9]+|[A-Z])', '20M10000N80M')"}
score: 0.8629730874491051
{'intent': "separate numbers and characters in string '20m10000n80m'", 'snippet': "re.findall('([0-9]+)([A-Z])', '20M10000N80M')"}
score: 0.8629730874491051
{'intent': "separate numbers and characters in string '20M10000N80M'", 'snippet': "re.findall('([0-9]+)([A-Z])', '20M10000N80M')"}

764. input: python read multiline json
score: 0.7174804091135638
{'intent': 'loading and parsing a json file with multiple json objects in python', 'snippet': 'data.append(json.loads(line))'}
score: 0.6784571773384063
{'intent': 'parsing json python', 'snippet': 'print(json.dumps(data))'}
score: 0.6784571773384063
{'intent': 'parsing json python', 'snippet': 'print(json.dumps(data))'}

765. input: print(decoded.encode('utf-8'))
score: 0.903463988420004
{'intent': 'python, encoding output to utf-8', 'snippet': "print(content.decode('utf8'))"}
score: 0.903463988420004
{'intent': 'Python, Encoding output to UTF-8', 'snippet': "print(content.decode('utf8'))"}
score: 0.903463988420004
{'intent': 'Python, Encoding output to UTF-8', 'snippet': "print(content.decode('utf8'))"}

766. input: df.groupby(by=df.columns, axis=1).mean()
score: 0.9175477119171219
{'intent': 'Pandas: Mean of columns with the same names', 'snippet': 'df.groupby(by=df.columns, axis=1).mean()'}
score: 0.9175477119171219
{'intent': 'Pandas: Mean of columns with the same names', 'snippet': 'df.groupby(by=df.columns, axis=1).mean()'}
score: 0.8855421788097653
{'intent': 'calculate the mean of columns with same name in dataframe `df`', 'snippet': 'df.groupby(by=df.columns, axis=1).mean()'}

767. input: divide the values of two dictionaries in python
score: 0.8430775918405495
{'intent': 'Divide the values of two dictionaries in python', 'snippet': '{k: (float(d2[k]) / d1[k]) for k in d1.keys() & d2}'}
score: 0.8425353590443964
{'intent': 'divide the values of two dictionaries in python', 'snippet': '{k: (float(d2[k]) / d1[k]) for k in d2}'}
score: 0.8425353590443964
{'intent': 'Divide the values of two dictionaries in python', 'snippet': '{k: (float(d2[k]) / d1[k]) for k in d2}'}

768. input: driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')
score: 0.8823214715539771
{'intent': 'Scrolling down a page with Selenium Webdriver', 'snippet': "driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')"}
score: 0.8823214715539771
{'intent': 'scrolling down a page with selenium webdriver', 'snippet': "driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')"}
score: 0.8135562384756654
{'intent': 'How can I scroll a web page using selenium webdriver in python?', 'snippet': "driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')"}

769. input: how do i get the indexes of unique row for a specified column in a two dimensional array
score: 0.8945167599438215
{'intent': 'how do i get the indexes of unique row for a specified column in a two dimensional array', 'snippet': '[[0, 5], [2, 7], [1, 3, 9], [4, 10], [6], [8]]'}
score: 0.8945167599438215
{'intent': 'How do I get the indexes of unique row for a specified column in a two dimensional array', 'snippet': '[[0, 5], [2, 7], [1, 3, 9], [4, 10], [6], [8]]'}
score: 0.6790109793981977
{'intent': 'How do you extract a column from a multi-dimensional array?', 'snippet': '[row[1] for row in A]'}

770. input: [x[0] for x in l1 if any(x[0] == y[0] for y in l2)]
score: 0.7766245490434948
{'intent': 'Comparing elements between elements in two lists of tuples', 'snippet': '[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]'}
score: 0.7766245490434948
{'intent': 'Comparing elements between elements in two lists of tuples', 'snippet': '[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]'}
score: 0.7720930326291678
{'intent': 'Get a list comparing two lists of tuples `l1` and `l2` if any first value in `l1` matches with first value in `l2`', 'snippet': '[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]'}

771. input: shutdown and restart a computer running windows from script
score: 0.8144324360879753
{'intent': 'shutdown and restart a computer running windows from script', 'snippet': "subprocess.call(['shutdown', '/r'])"}
score: 0.695773702469477
{'intent': 'How to make a python script which can logoff, shutdown, and restart a computer?', 'snippet': "subprocess.call(['shutdown', '/r'])"}
score: 0.695773702469477
{'intent': 'How to make a python script which can logoff, shutdown, and restart a computer?', 'snippet': "subprocess.call(['shutdown', '/r'])"}

772. input: datetime.datetime.fromtimestamp(x.astype('O') / 1000000000.0)
score: 0.8484783613400257
{'intent': 'How to convert numpy datetime64 into datetime', 'snippet': "datetime.datetime.fromtimestamp(x.astype('O') / 1000000000.0)"}
score: 0.7973924169461762
{'intent': 'how to convert numpy datetime64 into datetime', 'snippet': "datetime.datetime.utcfromtimestamp(x.astype('O') / 1000000000.0)"}
score: 0.7973924169461762
{'intent': 'How to convert numpy datetime64 into datetime', 'snippet': "datetime.datetime.utcfromtimestamp(x.astype('O') / 1000000000.0)"}

773. input: clear the terminal screen in linux
score: 0.9100287467298342
{'intent': 'clear the terminal screen in Linux', 'snippet': "os.system('clear')"}
score: 0.7520255664077653
{'intent': 'clear terminal screen on windows', 'snippet': "os.system('cls')"}
score: 0.7520255664077653
{'intent': 'clear terminal screen on windows', 'snippet': "os.system('cls')"}

774. input: pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)
score: 0.8765004211872512
{'intent': 'convert a column of list in series `s` to dummies', 'snippet': 'pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)'}
score: 0.8765004211872512
{'intent': 'convert a column of list in series `s` to dummies', 'snippet': 'pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)'}
score: 0.8355778712083672
{'intent': 'Pandas convert a column of list to dummies', 'snippet': 'pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)'}

775. input: converting hex to int in python
score: 0.8479774012961748
{'intent': 'convert string to hex in python', 'snippet': "int('0x77', 16)"}
score: 0.8479774012961748
{'intent': 'convert string to hex in python', 'snippet': "int('0x77', 16)"}
score: 0.8190923012272259
{'intent': 'how to convert hex string to integer in python?', 'snippet': 'y = str(int(x, 16))'}

776. input: how to create an immutable list in python?
score: 0.9101893334800589
{'intent': 'How to create an immutable list in Python?', 'snippet': 'y = list(x)'}
score: 0.8631770961983238
{'intent': 'How to create an immutable list in Python?', 'snippet': 'new_list = copy.deepcopy(old_list)'}
score: 0.7984918237736703
{'intent': 'How to make an immutable object in Python?', 'snippet': "Immutable = collections.namedtuple('Immutable', ['a', 'b'])"}

777. input: finding largest value in a dictionary
score: 0.8879013051343798
{'intent': 'Finding largest value in a dictionary', 'snippet': 'max(x, key=x.get)'}
score: 0.8535101510998284
{'intent': 'finding largest value in a dictionary', 'snippet': 'max(x, key=lambda i: x[i])'}
score: 0.8000205833280862
{'intent': 'Efficient way to find the largest key in a dictionary with non-zero value', 'snippet': 'max(k for k, v in x.items() if v != 0)'}

778. input: """""".join(str(random.randint(0, 9)) for _ in range(12))
score: 0.9013953538680484
{'intent': 'generate a random 12-digit number', 'snippet': '"""""".join(str(random.randint(0, 9)) for _ in range(12))'}
score: 0.887032003354687
{'intent': 'generate a random 12-digit number', 'snippet': "int(''.join(str(random.randint(0, 9)) for _ in range(12)))"}
score: 0.887032003354687
{'intent': 'generate a random 12-digit number', 'snippet': "int(''.join(str(random.randint(0, 9)) for _ in range(12)))"}

779. input: create a list of tuples with adjacent list elements if a condition is true
score: 0.8166100187328954
{'intent': 'create a list of tuples with adjacent list elements if a condition is true', 'snippet': '[(myList[i - 1], myList[i]) for i in range(len(myList)) if myList[i] == 9]'}
score: 0.8166100187328954
{'intent': 'Create a list of tuples with adjacent list elements if a condition is true', 'snippet': '[(myList[i - 1], myList[i]) for i in range(len(myList)) if myList[i] == 9]'}
score: 0.7974211770073532
{'intent': 'Create a list of tuples with adjacent list elements if a condition is true', 'snippet': '[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]'}

780. input: retrieving contents from a directory on a network drive (windows)
score: 0.7734017086983511
{'intent': 'retrieving contents from a directory on a network drive (windows)', 'snippet': "os.listdir('\\\\networkshares\\\\folder1\\\\folder2\\\\folder3')"}
score: 0.7734017086983511
{'intent': 'Retrieving contents from a directory on a network drive (windows)', 'snippet': "os.listdir('\\\\networkshares\\\\folder1\\\\folder2\\\\folder3')"}
score: 0.7445988418177015
{'intent': 'retrieving contents from a directory on a network drive (windows)', 'snippet': "os.listdir('\\\\\\\\server\\x0colder\\\\subfolder\\\\etc')"}

781. input: how do i write json data to a file in python?
score: 0.9337705321561074
{'intent': 'how do i write json data to a file in python?', 'snippet': 'json.dump(data, outfile)'}
score: 0.8872047088961807
{'intent': 'How do I write JSON data to a file in Python?', 'snippet': 'f.write(json.dumps(data, ensure_ascii=False))'}
score: 0.8123979078161331
{'intent': 'python, writing json to file', 'snippet': "file.write(dumps({'numbers': n, 'strings': s, 'x': x, 'y': y}, file, indent=4))"}

782. input: how to sort a dictionary having keys as a string of numbers in python
score: 0.8985991521047929
{'intent': 'How to sort a dictionary having keys as a string of numbers in Python', 'snippet': 'sortedlist = [(k, a[k]) for k in sorted(a)]'}
score: 0.8788282747352543
{'intent': 'how to sort a dictionary having keys as a string of numbers in python', 'snippet': 'print(sorted(list(a.items()), key=lambda t: get_key(t[0])))'}
score: 0.8634884194273791
{'intent': 'How to sort dictionaries by keys in Python', 'snippet': 'sorted(d)'}

783. input: run python script 'script2.py' from another python script, passing in 1 as an argument
score: 0.9170143930063626
{'intent': "run python script 'script2.py' from another python script, passing in 1 as an argument", 'snippet': "os.system('script2.py 1')"}
score: 0.8745382229330355
{'intent': 'Run a python script from another python script, passing in args', 'snippet': "os.system('script2.py 1')"}
score: 0.8745382229330355
{'intent': 'run a python script from another python script, passing in args', 'snippet': "os.system('script2.py 1')"}

784. input: delete a key and value from an ordereddict
score: 0.8777839787809585
{'intent': 'Delete a key and value from an OrderedDict', 'snippet': 'del dct[key]'}
score: 0.8128493688841463
{'intent': 'Delete an item with key `key` from `mydict`', 'snippet': 'del mydict[key]'}
score: 0.8128493688841463
{'intent': 'delete an item with key `key` from `mydict`', 'snippet': 'del mydict[key]'}

785. input: generate list of numbers in specific format using string formatting precision.
score: 0.809824689422642
{'intent': 'generate list of numbers in specific format using string formatting precision.', 'snippet': "[('%.2d' % i) for i in range(16)]"}
score: 0.6591043617736061
{'intent': 'Precision in python', 'snippet': "print('{0:.2f}'.format(your_number))"}
score: 0.6591043617736061
{'intent': 'precision in python', 'snippet': "print('{0:.2f}'.format(your_number))"}

786. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

787. input: fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)
score: 0.8059100357155586
{'intent': "create file 'x' if file 'x' does not exist", 'snippet': "fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)"}
score: 0.8059100357155586
{'intent': "create file 'x' if file 'x' does not exist", 'snippet': "fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)"}
score: 0.6866285742498538
{'intent': 'How do I create a file in python without overwriting an existing file', 'snippet': "fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)"}

788. input: def utf8len(s):
    return len(s.encode('utf-8'))
score: 0.8724636318394667
{'intent': 'How can I determine the byte length of a utf-8 encoded string in Python?', 'snippet': "def utf8len(s):\n    return len(s.encode('utf-8'))"}
score: 0.8625301909587499
{'intent': 'How can I determine the byte length of a utf-8 encoded string in Python?', 'snippet': "return len(s.encode('utf-8'))"}
score: 0.8625301909587499
{'intent': 'How can I determine the byte length of a utf-8 encoded string in Python?', 'snippet': "return len(s.encode('utf-8'))"}

789. input: os.system('start excel.exe <path/to/file>')
score: 0.8272107792421781
{'intent': 'how can i launch an instance of an application using python?', 'snippet': "os.system('start excel.exe <path/to/file>')"}
score: 0.8272107792421781
{'intent': 'How can I launch an instance of an application using Python?', 'snippet': "os.system('start excel.exe <path/to/file>')"}
score: 0.8272107792421781
{'intent': 'How can I launch an instance of an application using Python?', 'snippet': "os.system('start excel.exe <path/to/file>')"}

790. input: y = np.cumsum(x)
score: 0.767931355974697
{'intent': 'Running Cumulative sum of 1d NumPy Array', 'snippet': 'y = np.cumsum(x)'}
score: 0.6393311996807286
{'intent': 'how to get the cumulative sum of numpy array in-place', 'snippet': 'np.cumsum(a, axis=1, out=a)'}
score: 0.6393311996807286
{'intent': 'How to get the cumulative sum of numpy array in-place', 'snippet': 'np.cumsum(a, axis=1, out=a)'}

791. input: a = np.array(a)
score: 0.8498397907723811
{'intent': 'Convert array `a` to numpy array', 'snippet': 'a = np.array(a)'}
score: 0.7846106835128855
{'intent': 'get the indices in array `b` of each element appearing in array `a`', 'snippet': 'np.in1d(b, a).nonzero()[0]'}
score: 0.7846106835128855
{'intent': 'Get the indices in array `b` of each element appearing in array `a`', 'snippet': 'np.in1d(b, a).nonzero()[0]'}

792. input: a = [[] for i in range(3)]
score: 0.7458297071869032
{'intent': 'Initialize a list of empty lists `a` of size 3', 'snippet': 'a = [[] for i in range(3)]'}
score: 0.7399364049721163
{'intent': 'repeating elements in list comprehension', 'snippet': '[i for i in range(3) for _ in range(2)]'}
score: 0.7399364049721163
{'intent': 'Repeating elements in list comprehension', 'snippet': '[i for i in range(3) for _ in range(2)]'}

793. input: python convert a list of float to string
score: 0.8542575007771978
{'intent': 'in python, how to convert list of float numbers to string with certain format?', 'snippet': "p = [tuple('{0:.2f}'.format(c) for c in b) for b in a]"}
score: 0.8542575007771978
{'intent': 'in Python, how to convert list of float numbers to string with certain format?', 'snippet': "p = [tuple('{0:.2f}'.format(c) for c in b) for b in a]"}
score: 0.8481029286479506
{'intent': 'python convert a list of float to string', 'snippet': "['{:.2f}'.format(x) for x in nums]"}

794. input: how to query an hdf store using pandas/python
score: 0.8931852198877123
{'intent': 'How to query an HDF store using Pandas/Python', 'snippet': 'pd.read_hdf(\'test.h5\', \'df\', where=\'A=["foo","bar"] & B=1\')'}
score: 0.8931852198877123
{'intent': 'how to query an hdf store using pandas/python', 'snippet': 'pd.read_hdf(\'test.h5\', \'df\', where=\'A=["foo","bar"] & B=1\')'}
score: 0.8902144874937694
{'intent': 'How to query an HDF store using Pandas/Python', 'snippet': "pd.read_hdf('test.h5', 'df', where=[pd.Term('A', '=', ['foo', 'bar']), 'B=1'])"}

795. input: sys.path.append('/path/to/apps')
score: 0.7912789704838292
{'intent': 'append a path `/path/to/main_folder` in system path', 'snippet': "sys.path.append('/path/to/main_folder')"}
score: 0.7912789704838292
{'intent': 'append a path `/path/to/main_folder` in system path', 'snippet': "sys.path.append('/path/to/main_folder')"}
score: 0.7738516225884879
{'intent': 'In Python script, how do I set PYTHONPATH?', 'snippet': "sys.path.append('/path/to/whatever')"}

796. input: in django, how do i check if a user is in a certain group?
score: 0.9285932031297554
{'intent': 'In Django, how do I check if a user is in a certain group?', 'snippet': "return user.groups.filter(name='Member').exists()"}
score: 0.9285932031297554
{'intent': 'In Django, how do I check if a user is in a certain group?', 'snippet': "return user.groups.filter(name='Member').exists()"}
score: 0.9128600185928797
{'intent': 'In Django, how do I check if a user is in a certain group?', 'snippet': "return user.groups.filter(name__in=['group1', 'group2']).exists()"}

797. input: s.split(' ', 1)[1]
score: 0.8791600207730054
{'intent': 'Python Split String', 'snippet': "s.split(':', 1)[1]"}
score: 0.8791600207730054
{'intent': 'python split string', 'snippet': "s.split(':', 1)[1]"}
score: 0.8791600207730054
{'intent': 'Python Split String', 'snippet': "s.split(':', 1)[1]"}

798. input: mylist[0][0]
score: 0.6904493720384297
{'intent': 'creating an empty list', 'snippet': '[]'}
score: 0.6904493720384297
{'intent': 'Creating an empty list', 'snippet': '[]'}
score: 0.671224963776925
{'intent': 'Creating an empty list', 'snippet': 'l = []'}

799. input: list of lists changes reflected across sublists unexpectedly
score: 0.5438198755872218
{'intent': 'list duplicated elements in two lists `lista` and `listb`', 'snippet': 'list(set(listA) & set(listB))'}
score: 0.5438198755872218
{'intent': 'list duplicated elements in two lists `listA` and `listB`', 'snippet': 'list(set(listA) & set(listB))'}
score: 0.5386428839957624
{'intent': 'Removing duplicates in lists', 'snippet': 'list(set(source_list))'}

800. input: plot a (polar) color wheel based on a colormap using python/matplotlib
score: 0.9503626070791771
{'intent': 'Plot a (polar) color wheel based on a colormap using Python/Matplotlib', 'snippet': 'plt.show()'}
score: 0.9089010522300401
{'intent': 'plot a (polar) color wheel based on a colormap using python/matplotlib', 'snippet': 'display_axes.set_rlim([-1, 1])'}
score: 0.6559290088934586
{'intent': 'nonlinear colormap with matplotlib', 'snippet': 'plt.show()'}

801. input: {k: list(v) for k, v in groupby(sorted(d.items()), key=itemgetter(0))}
score: 0.8280569863275252
{'intent': 'Grouping Python dictionary keys as a list and create a new dictionary with this list as a value', 'snippet': '{k: list(v) for k, v in groupby(sorted(d.items()), key=itemgetter(0))}'}
score: 0.6824601914267325
{'intent': 'group dictionary key values in python', 'snippet': "mylist.sort(key=itemgetter('mc_no'))"}
score: 0.6824601914267325
{'intent': 'Group dictionary key values in python', 'snippet': "mylist.sort(key=itemgetter('mc_no'))"}

802. input: call(['tar', 'xvf', path])
score: 0.6015046058585889
{'intent': 'Run bash script with python - TypeError: bufsize must be an integer', 'snippet': "call(['tar', 'xvf', path])"}
score: 0.49187322510843007
{'intent': 'Python - How to call bash commands with pipe?', 'snippet': "subprocess.call('tar c my_dir | md5sum', shell=True)"}
score: 0.49187322510843007
{'intent': 'Python - How to call bash commands with pipe?', 'snippet': "subprocess.call('tar c my_dir | md5sum', shell=True)"}

803. input: [y for x in range(3) for y in [x, x]]
score: 0.7695522286594642
{'intent': 'Repeating elements in list comprehension', 'snippet': '[y for x in range(3) for y in [x, x]]'}
score: 0.7695522286594642
{'intent': 'repeating elements in list comprehension', 'snippet': '[y for x in range(3) for y in [x, x]]'}
score: 0.7695522286594642
{'intent': 'Repeating elements in list comprehension', 'snippet': '[y for x in range(3) for y in [x, x]]'}

804. input: hex(ord('a'))
score: 0.8565601717092571
{'intent': "convert string 'a' to hex", 'snippet': "hex(ord('a'))"}
score: 0.8565601717092571
{'intent': "convert string 'a' to hex", 'snippet': "hex(ord('a'))"}
score: 0.7880776575963307
{'intent': 'convert string to hex in python', 'snippet': "hex(ord('a'))"}

805. input: change a string of integers separated by spaces to a list of int
score: 0.8253475875956573
{'intent': 'Change a string of integers separated by spaces to a list of int', 'snippet': 'x = map(int, x.split())'}
score: 0.8253475875956573
{'intent': 'Change a string of integers separated by spaces to a list of int', 'snippet': 'x = map(int, x.split())'}
score: 0.8221873167126884
{'intent': 'change a string of integers separated by spaces to a list of int', 'snippet': 'x = [int(i) for i in x.split()]'}

806. input: type(iter(d.values()))
score: 0.6115115429737101
{'intent': 'How to check if a value exists in a dictionary (python)', 'snippet': 'type(iter(d.values()))'}
score: 0.5993314447251386
{'intent': "Check if value 'one' is among the values of dictionary `d`", 'snippet': "'one' in iter(d.values())"}
score: 0.5993314447251386
{'intent': "check if value 'one' is among the values of dictionary `d`", 'snippet': "'one' in iter(d.values())"}

807. input: is there a python function to determine which quarter of the year a date is in?
score: 0.8822910785092872
{'intent': 'Is there a Python function to determine which quarter of the year a date is in?', 'snippet': "df['quarter'] = df['date'].dt.quarter"}
score: 0.6454617446351629
{'intent': 'how to extract the year from a python datetime object?', 'snippet': 'a = datetime.datetime.now().year'}
score: 0.6454617446351629
{'intent': 'How to extract the year from a Python datetime object?', 'snippet': 'a = datetime.datetime.now().year'}

808. input: converting html to text with python
score: 0.8669207871415956
{'intent': 'converting html to text with python', 'snippet': 'print(soup.get_text())'}
score: 0.8669207871415956
{'intent': 'Converting html to text with Python', 'snippet': 'print(soup.get_text())'}
score: 0.8669207871415956
{'intent': 'Converting html to text with Python', 'snippet': 'print(soup.get_text())'}

809. input: sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])
score: 0.9072779367446747
{'intent': "sort json `ips_data` by a key 'data_two'", 'snippet': "sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])"}
score: 0.9072779367446747
{'intent': "sort json `ips_data` by a key 'data_two'", 'snippet': "sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])"}
score: 0.8430047652786521
{'intent': 'Sorting JSON in python by a specific value', 'snippet': "sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])"}

810. input: find key of object with maximum property value
score: 0.7548266452274734
{'intent': 'Find key of object with maximum property value', 'snippet': "max(d, key=lambda x: d[x]['c'] + d[x]['h'])"}
score: 0.6591817356880452
{'intent': 'Finding largest value in a dictionary', 'snippet': 'max(x, key=x.get)'}
score: 0.6437965878264277
{'intent': 'get dict key by max value', 'snippet': 'max(d, key=d.get)'}

811. input: replace a substring selectively inside a string
score: 0.6520995823818275
{'intent': 'Replace a substring selectively inside a string', 'snippet': 're.sub(\'\\\\bdelhi\\\\b(?=(?:"[^"]*"|[^"])*$)\', \'\', a).strip()'}
score: 0.643395275667048
{'intent': 'Find the nth occurrence of substring in a string', 'snippet': '"""foo bar bar bar""".replace(\'bar\', \'XXX\', 1).find(\'bar\')'}
score: 0.643395275667048
{'intent': 'Find the nth occurrence of substring in a string', 'snippet': '"""foo bar bar bar""".replace(\'bar\', \'XXX\', 1).find(\'bar\')'}

812. input: how to set up python server side with javascript client side
score: 0.8148794483817889
{'intent': 'How to set up Python server side with javascript client side', 'snippet': 'server.serve_forever()'}
score: 0.5744950187233766
{'intent': 'how do i create a web interface to a simple python script?', 'snippet': 'app.run()'}
score: 0.5744950187233766
{'intent': 'How do I create a web interface to a simple python script?', 'snippet': 'app.run()'}

813. input: """foo bar bar bar""".replace('bar', 'XXX', 1).find('bar')
score: 0.7909767628219101
{'intent': 'Find the nth occurrence of substring in a string', 'snippet': '"""foo bar bar bar""".replace(\'bar\', \'XXX\', 1).find(\'bar\')'}
score: 0.7909767628219101
{'intent': 'Find the nth occurrence of substring in a string', 'snippet': '"""foo bar bar bar""".replace(\'bar\', \'XXX\', 1).find(\'bar\')'}
score: 0.7875390503153012
{'intent': 'find the index of the second occurrence of the substring `bar` in string `foo bar bar bar`', 'snippet': '"""foo bar bar bar""".replace(\'bar\', \'XXX\', 1).find(\'bar\')'}

814. input: how to get the n maximum values per row in a numpy ndarray?
score: 0.9202805162899388
{'intent': 'How to get the N maximum values per row in a numpy ndarray?', 'snippet': 'A[:, -2:]'}
score: 0.9202805162899388
{'intent': 'How to get the N maximum values per row in a numpy ndarray?', 'snippet': 'A[:, -2:]'}
score: 0.7863361983776713
{'intent': 'find row or column containing maximum value in numpy array', 'snippet': 'np.argmax(np.max(x, axis=0))'}

815. input: f.close()
score: 0.6483938993770533
{'intent': 'reading a file in python', 'snippet': 'f.close()'}
score: 0.6073900402717023
{'intent': 'how do i modify the last line of a file?', 'snippet': 'f.close()'}
score: 0.6073900402717023
{'intent': 'How do I modify the last line of a file?', 'snippet': 'f.close()'}

816. input: ord('a')
score: 0.6585514857068471
{'intent': "convert ascii value 'a' to int", 'snippet': "ord('a')"}
score: 0.6585514857068471
{'intent': "convert ascii value 'a' to int", 'snippet': "ord('a')"}
score: 0.6383078116534655
{'intent': "get the ASCII value of a character 'a' as an int", 'snippet': "ord('a')"}

817. input: max(ld, key=lambda d: d['size'])
score: 0.8288487461164893
{'intent': "get dictionary with max value of key 'size' in list of dicts `ld`", 'snippet': "max(ld, key=lambda d: d['size'])"}
score: 0.8001561745891019
{'intent': 'Python list of dicts, get max value index', 'snippet': "max(ld, key=lambda d: d['size'])"}
score: 0.8001561745891019
{'intent': 'Python list of dicts, get max value index', 'snippet': "max(ld, key=lambda d: d['size'])"}

818. input: c.bin[2:]
score: 0.5693926742983794
{'intent': 'express binary literals', 'snippet': 'bin(21)'}
score: 0.5571146751474145
{'intent': 'python int to binary?', 'snippet': 'bin(10)'}
score: 0.5571146751474145
{'intent': 'Python int to binary?', 'snippet': 'bin(10)'}

819. input: how to obtain values of request variables using python and flask
score: 0.8941420712397309
{'intent': 'How to obtain values of request variables using Python and Flask', 'snippet': "first_name = request.args.get('firstname')"}
score: 0.8941420712397309
{'intent': 'how to obtain values of request variables using python and flask', 'snippet': "first_name = request.args.get('firstname')"}
score: 0.8941420712397309
{'intent': 'How to obtain values of request variables using Python and Flask', 'snippet': "first_name = request.args.get('firstname')"}

820. input: check if all of the following items in list `['a', 'b']` are in a list `['a', 'b', 'c']`
score: 0.8608105294072353
{'intent': "check if all of the following items in list `['a', 'b']` are in a list `['a', 'b', 'c']`", 'snippet': "set(['a', 'b']).issubset(['a', 'b', 'c'])"}
score: 0.8514367133825593
{'intent': "Check if all the values in a list `['a', 'b']` are present in another list `['b', 'a', 'foo', 'bar']`", 'snippet': "all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])"}
score: 0.839464797738722
{'intent': 'Python Check if all of the following items is in a list', 'snippet': "set(['a', 'b']).issubset(['a', 'b', 'c'])"}

821. input: sys.path.insert(0, './path/to/your/modules/')
score: 0.9167441771798425
{'intent': "insert directory './path/to/your/modules/' to current directory", 'snippet': "sys.path.insert(0, './path/to/your/modules/')"}
score: 0.9167441771798425
{'intent': "insert directory './path/to/your/modules/' to current directory", 'snippet': "sys.path.insert(0, './path/to/your/modules/')"}
score: 0.7486841385816745
{'intent': 'How to import a module from a folder next to the current folder?', 'snippet': 'sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))'}

822. input: pd.read_csv(StringIO(s), sep=',', comment='#')
score: 0.8586887453533071
{'intent': "pandas read comma-separated CSV file `s` and skip commented lines starting with '#'", 'snippet': "pd.read_csv(StringIO(s), sep=',', comment='#')"}
score: 0.8586887453533071
{'intent': "pandas read comma-separated csv file `s` and skip commented lines starting with '#'", 'snippet': "pd.read_csv(StringIO(s), sep=',', comment='#')"}
score: 0.826026116153496
{'intent': 'pandas.read_csv: how to skip comment lines', 'snippet': "pd.read_csv(StringIO(s), sep=',', comment='#')"}

823. input: find dictionary keys with duplicate values
score: 0.8371561149774114
{'intent': 'Find dictionary keys with duplicate values', 'snippet': '[key for key, values in list(rev_multidict.items()) if len(values) > 1]'}
score: 0.8371561149774114
{'intent': 'find dictionary keys with duplicate values', 'snippet': '[key for key, values in list(rev_multidict.items()) if len(values) > 1]'}
score: 0.8371140558807557
{'intent': 'Find dictionary keys with duplicate values', 'snippet': '[values for key, values in list(rev_multidict.items()) if len(values) > 1]'}

824. input: return HttpResponseRedirect('/path/')
score: 0.6988181702843881
{'intent': 'redirecting a user in a django template', 'snippet': "return HttpResponseRedirect('/path/')"}
score: 0.5687681791594108
{'intent': 'retrieve the path from a Flask request', 'snippet': 'request.url'}
score: 0.5687681791594108
{'intent': 'retrieve the path from a flask request', 'snippet': 'request.url'}

825. input: how to subset a data frame using pandas based on a group criteria?
score: 0.8431086247947515
{'intent': 'How to subset a data frame using Pandas based on a group criteria?', 'snippet': "df.groupby('User')['X'].transform(sum) == 0"}
score: 0.8431086247947515
{'intent': 'How to subset a data frame using Pandas based on a group criteria?', 'snippet': "df.groupby('User')['X'].transform(sum) == 0"}
score: 0.8417430285100991
{'intent': 'How to subset a data frame using Pandas based on a group criteria?', 'snippet': "df.loc[df.groupby('User')['X'].transform(sum) == 0]"}

826. input: filter a tuple with another tuple in python
score: 0.7625281734075218
{'intent': 'Filter a tuple with another tuple in Python', 'snippet': "['subject', 'filer, subject', 'filer', 'activity, subject']"}
score: 0.6599659461036428
{'intent': 'Iterate a list of tuples', 'snippet': 'tuple_list = [(a, some_process(b)) for a, b in tuple_list]'}
score: 0.658884867456764
{'intent': 'How to index nested lists in Python?', 'snippet': 'tuple(tup[0] for tup in A)'}

827. input: how do i find one number in a string in python?
score: 0.8005854513968399
{'intent': 'how do i find one number in a string in python?', 'snippet': '"""""".join(x for x in fn if x.isdigit())'}
score: 0.8005854513968399
{'intent': 'How do I find one number in a string in Python?', 'snippet': '"""""".join(x for x in fn if x.isdigit())'}
score: 0.7899716849220861
{'intent': 'How do I find one number in a string in Python?', 'snippet': "number = re.search('\\\\d+', filename).group()"}

828. input: how to crop zero edges of a numpy array?
score: 0.9297893005818291
{'intent': 'How to crop zero edges of a numpy array?', 'snippet': 'array([[1, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 0]])'}
score: 0.6795464052944831
{'intent': 'python how to pad numpy array with zeros', 'snippet': 'result = np.zeros(b.shape)'}
score: 0.6795464052944831
{'intent': 'python how to pad numpy array with zeros', 'snippet': 'result = np.zeros(b.shape)'}

829. input: un-escape a backslash-escaped string in `hello,\\nworld!`
score: 0.8733363260015058
{'intent': 'un-escape a backslash-escaped string in `Hello,\\\\nworld!`', 'snippet': 'print(\'"Hello,\\\\nworld!"\'.decode(\'string_escape\'))'}
score: 0.7875215822809805
{'intent': 'How do I un-escape a backslash-escaped string in python?', 'snippet': 'print(\'"Hello,\\\\nworld!"\'.decode(\'string_escape\'))'}
score: 0.7875215822809805
{'intent': 'how do i un-escape a backslash-escaped string in python?', 'snippet': 'print(\'"Hello,\\\\nworld!"\'.decode(\'string_escape\'))'}

830. input: dictionaries are ordered in cpython 3.6
score: 0.873634840686706
{'intent': 'Dictionaries are ordered in CPython 3.6', 'snippet': "d = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}"}
score: 0.6958460894133165
{'intent': 'Key Order in Python Dictionaries', 'snippet': 'print(sorted(d.keys()))'}
score: 0.6958460894133165
{'intent': 'key order in python dictionaries', 'snippet': 'print(sorted(d.keys()))'}

831. input: pandas interpolate data with units
score: 0.7957765837642453
{'intent': 'Pandas interpolate data with units', 'snippet': "df['depth'] = df['depth'].interpolate(method='values')"}
score: 0.5806944994731419
{'intent': 'Interpolating one time series onto another in pandas', 'snippet': 'pd.concat([data, ts]).sort_index().interpolate().reindex(ts.index)'}
score: 0.543384286390198
{'intent': 'Fill in time data in pandas', 'snippet': "a.resample('15S', loffset='5S')"}

832. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

833. input: loading a simple qt designer form in to pyside
score: 0.5394346667117236
{'intent': 'how to change the window title in pyside?', 'snippet': "self.setWindowTitle('QtGui.QCheckBox')"}
score: 0.5394346667117236
{'intent': 'How to change the window title in pyside?', 'snippet': "self.setWindowTitle('QtGui.QCheckBox')"}
score: 0.5378986451928255
{'intent': 'sending custom pyqt signals?', 'snippet': "QtCore.SIGNAL('finished(PyQt_PyObject)')"}

834. input: url decode utf-8 in python
score: 0.9200007682433271
{'intent': 'Url decode UTF-8 in Python', 'snippet': "urllib.parse.unquote(url).decode('utf8')"}
score: 0.9200007682433271
{'intent': 'url decode utf-8 in python', 'snippet': "urllib.parse.unquote(url).decode('utf8')"}
score: 0.9182175202609497
{'intent': 'Url decode UTF-8 in Python', 'snippet': "url = urllib.parse.unquote(url).decode('utf8')"}

835. input: iterating key and items over dictionary `d`
score: 0.8804610068471426
{'intent': 'Iterating over a dictionary `d` using for loops', 'snippet': 'for (key, value) in d.items():\n    pass'}
score: 0.8804610068471426
{'intent': 'iterating over a dictionary `d` using for loops', 'snippet': 'for (key, value) in d.items():\n    pass'}
score: 0.8780023437657023
{'intent': 'iterating key and items over dictionary `d`', 'snippet': 'for (k, v) in list(d.items()):\n    pass'}

836. input: checking number of elements in python's `counter`
score: 0.8715423549808573
{'intent': "Checking number of elements in Python's `Counter`", 'snippet': 'sum(counter.values())'}
score: 0.7295274707461971
{'intent': 'how do i get the number of lists with a particular element?', 'snippet': "Counter({'a': 3, 'c': 3, 'b': 2, 'd': 1})"}
score: 0.7295274707461971
{'intent': 'How do I get the number of lists with a particular element?', 'snippet': "Counter({'a': 3, 'c': 3, 'b': 2, 'd': 1})"}

837. input: assign values to two variables, `var1` and `var2` from user input response to `'enter two numbers here: ` split on whitespace
score: 0.9114484495693971
{'intent': "assign values to two variables, `var1` and `var2` from user input response to `'Enter two numbers here: ` split on whitespace", 'snippet': "var1, var2 = input('Enter two numbers here: ').split()"}
score: 0.7466555531193901
{'intent': 'Two values from one input in python?', 'snippet': "var1, var2 = input('Enter two numbers here: ').split()"}
score: 0.7466555531193901
{'intent': 'two values from one input in python?', 'snippet': "var1, var2 = input('Enter two numbers here: ').split()"}

838. input: [k for k, count in list(Counter(L).items()) if count > 1]
score: 0.7703295814644432
{'intent': 'count the occurrences of items in list `l`', 'snippet': '[[x, l.count(x)] for x in set(l)]'}
score: 0.7600992184342736
{'intent': 'count the occurrences of a list item', 'snippet': '[[x, l.count(x)] for x in set(l)]'}
score: 0.7354759432198918
{'intent': 'count the occurrences of a list item', 'snippet': 'Counter(l)'}

839. input: remove newlines and whitespace from string `yourstring`
score: 0.6709506910632981
{'intent': 'remove newline in string `s`', 'snippet': 's.strip()'}
score: 0.6709506910632981
{'intent': 'remove newline in string `s`', 'snippet': 's.strip()'}
score: 0.6657424934848417
{'intent': 'remove all whitespace in a string', 'snippet': 'sentence.strip()'}

840. input: summing over a multiindex level in a pandas series
score: 0.8941405102321244
{'intent': 'Summing over a multiindex level in a pandas series', 'snippet': 'data.groupby(level=[0, 1]).sum()'}
score: 0.791309606426049
{'intent': 'summing rows from a multiindex pandas df based on index label', 'snippet': 'print(df.head())'}
score: 0.791309606426049
{'intent': 'Summing rows from a MultiIndex pandas df based on index label', 'snippet': 'print(df.head())'}

841. input: eastern.localize(datetime(2002, 10, 27, 1, 30, 0), is_dst=None)
score: 0.6442774508327899
{'intent': 'How to check if a datetime object is localized with pytz?', 'snippet': 'self.date = d.replace(tzinfo=pytz.utc)'}
score: 0.6428977437022783
{'intent': 'how to add timezone into a naive datetime instance in python', 'snippet': 'dt = tz.localize(naive, is_dst=True)'}
score: 0.6428977437022783
{'intent': 'How to add timezone into a naive datetime instance in python', 'snippet': 'dt = tz.localize(naive, is_dst=True)'}

842. input: admin.site.register(Person, PersonAdmin)
score: 0.724149637487123
{'intent': 'create django admin intermediate page', 'snippet': 'admin.site.register(Person, PersonAdmin)'}
score: 0.5651611213091283
{'intent': 'indirect inline in django admin', 'snippet': 'admin.site.register(User, UserAdmin)'}
score: 0.5651611213091283
{'intent': 'Indirect inline in Django admin', 'snippet': 'admin.site.register(User, UserAdmin)'}

843. input: how can i insert data into a mysql database?
score: 0.8023749024956597
{'intent': 'How can I insert data into a MySQL database?', 'snippet': 'db.commit()'}
score: 0.8019599084095216
{'intent': 'how can i insert data into a mysql database?', 'snippet': 'conn.commit()'}
score: 0.8019599084095216
{'intent': 'How can I insert data into a MySQL database?', 'snippet': 'conn.commit()'}

844. input: result = [x for x in list_a if x[0] in list_b]
score: 0.867754165102102
{'intent': 'Python: filter list of list with another list', 'snippet': 'result = [x for x in list_a if x[0] in list_b]'}
score: 0.867754165102102
{'intent': 'Python: filter list of list with another list', 'snippet': 'result = [x for x in list_a if x[0] in list_b]'}
score: 0.867754165102102
{'intent': 'python: filter list of list with another list', 'snippet': 'result = [x for x in list_a if x[0] in list_b]'}

845. input: pythonic way to fetch all elements in a dictionary, falling between two keys?
score: 0.8428550846604574
{'intent': 'pythonic way to fetch all elements in a dictionary, falling between two keys?', 'snippet': 'dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)'}
score: 0.8428550846604574
{'intent': 'Pythonic way to fetch all elements in a dictionary, falling between two keys?', 'snippet': 'dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)'}
score: 0.8428550846604574
{'intent': 'Pythonic way to fetch all elements in a dictionary, falling between two keys?', 'snippet': 'dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)'}

846. input: Immutable = collections.namedtuple('Immutable', ['a', 'b'])
score: 0.9095874241327297
{'intent': 'How to make an immutable object in Python?', 'snippet': "Immutable = collections.namedtuple('Immutable', ['a', 'b'])"}
score: 0.6213526471410694
{'intent': 'How to create an immutable list in Python?', 'snippet': 'y = list(x)'}
score: 0.6155852775031714
{'intent': 'How to create an immutable list in Python?', 'snippet': 'new_list = copy.deepcopy(old_list)'}

847. input: pd.DataFrame(list(map(list, zip(lst1, lst2, lst3))))
score: 0.9343251557825633
{'intent': 'Take multiple lists into dataframe', 'snippet': 'pd.DataFrame(list(map(list, zip(lst1, lst2, lst3))))'}
score: 0.6327358058557373
{'intent': 'how to zip two lists of lists in python?', 'snippet': '[(x + y) for x, y in zip(L1, L2)]'}
score: 0.6327358058557373
{'intent': 'How to zip two lists of lists in Python?', 'snippet': '[(x + y) for x, y in zip(L1, L2)]'}

848. input: cursor.close()
score: 0.7013864286741874
{'intent': 'python + mysqldb executemany', 'snippet': 'cursor.close()'}
score: 0.7013864286741874
{'intent': 'Python + MySQLdb executemany', 'snippet': 'cursor.close()'}
score: 0.5329411234737487
{'intent': 'How do I check if an insert was successful with MySQLdb in Python?', 'snippet': 'cursor.close()'}

849. input: how to count number of rows in a group in pandas group by object?
score: 0.9041214939385409
{'intent': 'How to count number of rows in a group in pandas group by object?', 'snippet': 'df.groupby(key_columns).size()'}
score: 0.9041214939385409
{'intent': 'How to count number of rows in a group in pandas group by object?', 'snippet': 'df.groupby(key_columns).size()'}
score: 0.874292783692161
{'intent': 'how to count number of rows in a group in pandas group by object?', 'snippet': "df[['col1', 'col2', 'col3', 'col4']]"}

850. input: print(dateobj.strftime('%Y-%m-%d'))
score: 0.9095267940493394
{'intent': 'datetime objects format', 'snippet': "print(mydate.strftime('%Y-%m-%d'))"}
score: 0.9077155073668665
{'intent': 'print date in a regular format', 'snippet': "time.strftime('%Y-%m-%d %H:%M')"}
score: 0.9044711068119622
{'intent': 'Convert a string to datetime object in python', 'snippet': "print(dateobj.strftime('%Y-%m-%d'))"}

851. input: how to build a flask application around an already existing database?
score: 0.7077777164971102
{'intent': 'What alterations do I need to make for my Flask python application to use a MySQL database?', 'snippet': 'db.session.commit()'}
score: 0.7077777164971102
{'intent': 'what alterations do i need to make for my flask python application to use a mysql database?', 'snippet': 'db.session.commit()'}
score: 0.6870567904350153
{'intent': 'how do you set up a flask application with sqlalchemy for testing?', 'snippet': 'app.run()'}

852. input: write to utf-8 file in python
score: 0.8890178240116765
{'intent': 'python, encoding output to utf-8', 'snippet': "f.write(s.encode('utf8'))"}
score: 0.8890178240116765
{'intent': 'Python, Encoding output to UTF-8', 'snippet': "f.write(s.encode('utf8'))"}
score: 0.8854195930237294
{'intent': 'Write to UTF-8 file in Python', 'snippet': 'file.close()'}

853. input: reverse a string in python
score: 0.828729056295239
{'intent': 'Reverse a string `a_string`', 'snippet': 'def reversed_string(a_string):\n    return a_string[::(-1)]'}
score: 0.828729056295239
{'intent': 'reverse a string `a_string`', 'snippet': 'def reversed_string(a_string):\n    return a_string[::(-1)]'}
score: 0.8278399999202011
{'intent': 'reverse a string in Python', 'snippet': 'l = [1, 2, 3]'}

854. input: HTMLParser.HTMLParser().unescape('Suzy & John')
score: 0.535996914698003
{'intent': 'how to parse malformed html in python', 'snippet': 'print(soup.prettify())'}
score: 0.535996914698003
{'intent': 'How to parse malformed HTML in python', 'snippet': 'print(soup.prettify())'}
score: 0.5333988682963846
{'intent': 'Parsing HTML page using beautifulsoup', 'snippet': "print(''.join(x.stripped_strings))"}

855. input: parsing string containing unicode character names
score: 0.6438677913480788
{'intent': 'how do convert unicode escape sequences to unicode characters in a python string', 'snippet': "name.decode('latin-1')"}
score: 0.6438677913480788
{'intent': 'How do convert unicode escape sequences to unicode characters in a python string', 'snippet': "name.decode('latin-1')"}
score: 0.6155355811734873
{'intent': 'how do convert unicode escape sequences to unicode characters in a python string', 'snippet': "print(name.decode('latin-1'))"}

856. input: d = defaultdict(lambda : defaultdict(int))
score: 0.8125159570271636
{'intent': "Multiple levels of 'collection.defaultdict' in Python", 'snippet': 'd = defaultdict(lambda : defaultdict(int))'}
score: 0.7661753231504361
{'intent': 'defaultdict of defaultdict, nested', 'snippet': 'defaultdict(lambda : defaultdict(dict))'}
score: 0.7661753231504361
{'intent': 'defaultdict of defaultdict, nested', 'snippet': 'defaultdict(lambda : defaultdict(dict))'}

857. input: datetime.datetime.strptime(time.ctime(), '%a %b %d %H:%M:%S %Y')
score: 0.8478976765470743
{'intent': 'convert string into datetime.time object', 'snippet': "datetime.datetime.strptime('03:55', '%H:%M').time()"}
score: 0.8478976765470743
{'intent': 'Convert string into datetime.time object', 'snippet': "datetime.datetime.strptime('03:55', '%H:%M').time()"}
score: 0.8478976765470743
{'intent': 'Convert string into datetime.time object', 'snippet': "datetime.datetime.strptime('03:55', '%H:%M').time()"}

858. input: how can i get the product of all elements in a one dimensional numpy array
score: 0.9346062041956773
{'intent': 'How can I get the product of all elements in a one dimensional numpy array', 'snippet': 'numpy.prod(a)'}
score: 0.6847636564191126
{'intent': 'Outer product of each column of a 2D array to form a 3D array - NumPy', 'snippet': "np.einsum('ij,kj->jik', X, X)"}
score: 0.6847636564191126
{'intent': 'outer product of each column of a 2d array to form a 3d array - numpy', 'snippet': "np.einsum('ij,kj->jik', X, X)"}

859. input: re.sub('(?m)^\\s+', '', 'a\n b\n c')
score: 0.7947683409860238
{'intent': "replace white spaces in string '  a\\n b\\n c\\nd  e' with empty string ''", 'snippet': "re.sub('(?m)^[^\\\\S\\\\n]+', '', '  a\\n b\\n c\\nd  e')"}
score: 0.7947683409860238
{'intent': "replace white spaces in string '  a\\n b\\n c\\nd  e' with empty string ''", 'snippet': "re.sub('(?m)^[^\\\\S\\\\n]+', '', '  a\\n b\\n c\\nd  e')"}
score: 0.7707627471242336
{'intent': "remove white spaces from all the lines using a regular expression in string 'a\\n b\\n c'", 'snippet': "re.sub('(?m)^\\\\s+', '', 'a\\n b\\n c')"}

860. input: how do you concatenate two differently named columns together in pandas?
score: 0.7988319117857233
{'intent': 'How do you concatenate two differently named columns together in pandas?', 'snippet': "pd.lreshape(df, {'D': ['B', 'C']})"}
score: 0.7489063146553028
{'intent': 'concatenate two dataframes in pandas', 'snippet': 'pd.concat([df_a, df_b], axis=1)'}
score: 0.7447580512137519
{'intent': 'Reshape pandas dataframe from rows to columns', 'snippet': "pd.concat([df2[df2.Name == 'Jane'].T, df2[df2.Name == 'Joe'].T])"}

861. input: x = [v for i, v in enumerate(x) if i not in frozenset((2, 3, 4, 5))]
score: 0.6680031806296886
{'intent': 'Python: Find in list', 'snippet': '[i for i, x in enumerate([1, 2, 3, 2]) if x == 2]'}
score: 0.6680031806296886
{'intent': 'python: find in list', 'snippet': '[i for i, x in enumerate([1, 2, 3, 2]) if x == 2]'}
score: 0.6608206698117159
{'intent': 'Find the indices of elements greater than x', 'snippet': '[i for i, v in enumerate(a) if v > 4]'}

862. input: """""".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))
score: 0.8271986393094576
{'intent': 'reverse a string `a` by 2 characters at a time', 'snippet': '"""""".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))'}
score: 0.8271986393094576
{'intent': 'reverse a string `a` by 2 characters at a time', 'snippet': '"""""".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))'}
score: 0.7580619520598759
{'intent': 'Reverse a string in Python two characters at a time (Network byte order)', 'snippet': '"""""".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))'}

863. input: x, y = np.random.randint(20, size=(2, 100)) + np.random.rand(2, 100)
score: 0.8126033424951775
{'intent': 'Lack of randomness in numpy.random', 'snippet': 'x, y = np.random.randint(20, size=(2, 100)) + np.random.rand(2, 100)'}
score: 0.7918469361541733
{'intent': 'Lack of randomness in numpy.random', 'snippet': 'x, y = np.random.rand(2, 100) * 20'}
score: 0.7918469361541733
{'intent': 'lack of randomness in numpy.random', 'snippet': 'x, y = np.random.rand(2, 100) * 20'}

864. input: how to get the size of a string in python?
score: 0.9484954360972414
{'intent': 'How to get the size of a string in Python?', 'snippet': 'len(s)'}
score: 0.9484954360972414
{'intent': 'how to get the size of a string in python?', 'snippet': 'len(s)'}
score: 0.8983989982339047
{'intent': 'how to get the size of a string in python?', 'snippet': "print(len('abc'))"}

865. input: re.findall('(1(23))45', '12345')
score: 0.8715211440307616
{'intent': 'Capturing group with findall?', 'snippet': "re.findall('(1(23))45', '12345')"}
score: 0.8641244255586105
{'intent': 'capturing group with findall?', 'snippet': "re.findall('(1(23)45)', '12345')"}
score: 0.8641244255586105
{'intent': 'Capturing group with findall?', 'snippet': "re.findall('(1(23)45)', '12345')"}

866. input: python-opencv: read image data from stdin
score: 0.8733635831131616
{'intent': 'Python-opencv: Read image data from stdin', 'snippet': 'cv2.waitKey()'}
score: 0.6621333193481804
{'intent': 'How to convert a python numpy array to an RGB image with Opencv 2.4?', 'snippet': 'cv2.waitKey()'}
score: 0.6621333193481804
{'intent': 'how to convert a python numpy array to an rgb image with opencv 2.4?', 'snippet': 'cv2.waitKey()'}

867. input: pixelate image with pillow
score: 0.8280891468561542
{'intent': 'Pixelate Image With Pillow', 'snippet': "img = img.convert('RGB')"}
score: 0.729135914049117
{'intent': 'pixelate image with pillow', 'snippet': 'palette.append((0, 0, 0))'}
score: 0.5178708004597184
{'intent': 'How to adjust the quality of a resized image in Python Imaging Library?', 'snippet': 'image = image.resize((x, y), Image.ANTIALIAS)'}

868. input: declaring a multi dimensional dictionary in python
score: 0.782653968187551
{'intent': 'Declaring a multi dimensional dictionary in python', 'snippet': "new_dict['a']['b']['c'] = [5]"}
score: 0.782653968187551
{'intent': 'declaring a multi dimensional dictionary in python', 'snippet': "new_dict['a']['b']['c'] = [5]"}
score: 0.7569631977666927
{'intent': 'Declaring a multi dimensional dictionary in python', 'snippet': "new_dict['key1']['key2'] += 5"}

869. input: data['result'] = data['result'].map(lambda x: x.lstrip('+-').rstrip('aAbBcC'))
score: 0.7141718357123277
{'intent': 'Pandas DataFrame: remove unwanted parts from strings in a column', 'snippet': "data['result'] = data['result'].map(lambda x: x.lstrip('+-').rstrip('aAbBcC'))"}
score: 0.5687276170046293
{'intent': 'convert list `data` into a string of its elements', 'snippet': "print(''.join(map(str, data)))"}
score: 0.5624636944572445
{'intent': 'How to repeat individual characters in strings in Python', 'snippet': '"""""".join(map(lambda x: x * 7, \'map\'))'}

870. input: remove all duplicates from a list of sets `l`
score: 0.8478012444569634
{'intent': 'remove all duplicates from a list of sets `L`', 'snippet': 'list(set(frozenset(item) for item in L))'}
score: 0.8146232095821858
{'intent': 'removing duplicates of a list of sets', 'snippet': 'list(set(frozenset(item) for item in L))'}
score: 0.8146232095821858
{'intent': 'removing duplicates of a list of sets', 'snippet': 'list(set(frozenset(item) for item in L))'}

871. input: scipy.optimize.leastsq(residuals, p_guess, args=(x, y))
score: 0.7846171400325954
{'intent': 'sigmoidal regression with scipy, numpy, python, etc', 'snippet': 'scipy.optimize.leastsq(residuals, p_guess, args=(x, y))'}
score: 0.5513154525145469
{'intent': 'Efficient computation of the least-squares algorithm in NumPy', 'snippet': 'np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))'}
score: 0.5513154525145469
{'intent': 'Efficient computation of the least-squares algorithm in NumPy', 'snippet': 'np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))'}

872. input: subprocess.Popen(['rm', '-r', 'some.file'])
score: 0.8274795758938696
{'intent': "run shell command 'rm -r some.file' in the background", 'snippet': "subprocess.Popen(['rm', '-r', 'some.file'])"}
score: 0.791527268249298
{'intent': 'How to start a background process in Python?', 'snippet': "subprocess.Popen(['rm', '-r', 'some.file'])"}
score: 0.791527268249298
{'intent': 'How to start a background process in Python?', 'snippet': "subprocess.Popen(['rm', '-r', 'some.file'])"}

873. input: split a list into increasing sequences using itertools
score: 0.7098069133541132
{'intent': 'convert list `a` from being consecutive sequences of tuples into a single sequence of elements', 'snippet': 'list(itertools.chain(*a))'}
score: 0.7098069133541132
{'intent': 'convert list `a` from being consecutive sequences of tuples into a single sequence of elements', 'snippet': 'list(itertools.chain(*a))'}
score: 0.685612994187464
{'intent': 'how do you split a list into evenly sized chunks?', 'snippet': '[l[i:i + n] for i in range(0, len(l), n)]'}

874. input: remove none value from a list without removing the 0 value
score: 0.8401800084266893
{'intent': 'remove None value from a list without removing the 0 value', 'snippet': '[x for x in L if x is not None]'}
score: 0.8401800084266893
{'intent': 'remove None value from a list without removing the 0 value', 'snippet': '[x for x in L if x is not None]'}
score: 0.8401800084266893
{'intent': 'remove None value from a list without removing the 0 value', 'snippet': '[x for x in L if x is not None]'}

875. input: print('<%.*s>' % (len(text) - 2, text))
score: 0.8986978503838638
{'intent': 'variable length of %s with the % operator in python', 'snippet': "print('<%.*s>' % (len(text) - 2, text))"}
score: 0.6983800817219847
{'intent': "print '[1, 2, 3]'", 'snippet': "print('[%s, %s, %s]' % (1, 2, 3))"}
score: 0.6983800817219847
{'intent': "print '[1, 2, 3]'", 'snippet': "print('[%s, %s, %s]' % (1, 2, 3))"}

876. input: how to exclude fields from form created via polymorphicchildmodeladmin
score: 0.8756759132732839
{'intent': 'How to exclude fields from form created via PolymorphicChildModelAdmin', 'snippet': "ModelA.objects.filter(Q(ModelB___field2='B2') | Q(ModelC___field3='C3'))"}
score: 0.6019639864368198
{'intent': 'how do i exclude an inherited field in a form in django?', 'snippet': "self.fields.pop('is_staff')"}
score: 0.6019639864368198
{'intent': 'How do I exclude an inherited field in a form in Django?', 'snippet': "self.fields.pop('is_staff')"}

877. input: capture stdout from a script in python
score: 0.8681815363367429
{'intent': 'Capture stdout from a script in Python', 'snippet': "sys.stdout.write('foobar')"}
score: 0.7610829834859293
{'intent': 'Pipe output from shell command to a python script', 'snippet': 'print(sys.stdin.read())'}
score: 0.7610829834859293
{'intent': 'pipe output from shell command to a python script', 'snippet': 'print(sys.stdin.read())'}

878. input: [int(s) for s in example_string.split(',')]
score: 0.8673975268777453
{'intent': 'Python - converting a string of numbers into a list of int', 'snippet': "[int(s) for s in example_string.split(',')]"}
score: 0.8673975268777453
{'intent': 'Python - converting a string of numbers into a list of int', 'snippet': "[int(s) for s in example_string.split(',')]"}
score: 0.857191780852383
{'intent': 'python split string', 'snippet': "s.split(':', 1)[1]"}

879. input: how __hash__ is implemented in python 3.2?
score: 0.9543605785482263
{'intent': 'How __hash__ is implemented in Python 3.2?', 'snippet': 'sys.hash_info'}
score: 0.650719978601835
{'intent': 'Python implementation of Jenkins Hash?', 'snippet': 'hash, hash2 = hashlittle2(hashstr, 3735928559, 3735928559)'}
score: 0.650719978601835
{'intent': 'python implementation of jenkins hash?', 'snippet': 'hash, hash2 = hashlittle2(hashstr, 3735928559, 3735928559)'}

880. input: how do i write output in same place on the console?
score: 0.8442363856348571
{'intent': 'How do I write output in same place on the console?', 'snippet': 'sys.stdout.flush()'}
score: 0.6993540152306718
{'intent': 'how to rewrite output in terminal', 'snippet': 'sys.stdout.flush()'}
score: 0.653284571164983
{'intent': 'replace console output in python', 'snippet': "sys.stdout.write('\\rDoing thing %i' % i)"}

881. input: forms.ModelForm.__init__(self, *args, **kwargs)
score: 0.8010115125675403
{'intent': 'overriding initial value in modelform', 'snippet': 'super(ArtefactForm, self).__init__(*args, **kwargs)'}
score: 0.8010115125675403
{'intent': 'Overriding initial value in ModelForm', 'snippet': 'super(ArtefactForm, self).__init__(*args, **kwargs)'}
score: 0.7818317195125211
{'intent': "How to pass initial parameter to django's ModelForm instance?", 'snippet': 'super(BackupForm, self).__init__(*args, **kwargs)'}

882. input: split a unicode string `text` into a list of words and punctuation characters with a regex
score: 0.8290458386894451
{'intent': 'split a unicode string `text` into a list of words and punctuation characters with a regex', 'snippet': "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)"}
score: 0.7007621597840372
{'intent': 'splitting a string into words and punctuation', 'snippet': "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)"}
score: 0.7007621597840372
{'intent': 'Splitting a string into words and punctuation', 'snippet': "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)"}

883. input: plot using the color code `#112233` in matplotlib pyplot
score: 0.9287594439391564
{'intent': 'Plot using the color code `#112233` in matplotlib pyplot', 'snippet': "pyplot.plot(x, y, color='#112233')"}
score: 0.7610175599657731
{'intent': 'How to avoid line color repetition in matplotlib.pyplot?', 'snippet': "pyplot.plot(x, y, color='#112233')"}
score: 0.7610175599657731
{'intent': 'How to avoid line color repetition in matplotlib.pyplot?', 'snippet': "pyplot.plot(x, y, color='#112233')"}

884. input: regex python adding characters after a certain word
score: 0.7851846770916234
{'intent': 'regex python adding characters after a certain word', 'snippet': "re.sub('(get)', '\\\\1@', text)"}
score: 0.7851846770916234
{'intent': 'Regex Python adding characters after a certain word', 'snippet': "re.sub('(get)', '\\\\1@', text)"}
score: 0.7477242449961994
{'intent': 'Regex Python adding characters after a certain word', 'snippet': "text = re.sub('(\\\\bget\\\\b)', '\\\\1@', text)"}

885. input: hide output of subprocess `['espeak', text]`
score: 0.9272384704688842
{'intent': "hide output of subprocess `['espeak', text]`", 'snippet': "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"}
score: 0.887784198770569
{'intent': 'How to hide output of subprocess in Python 2.7', 'snippet': "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"}
score: 0.887784198770569
{'intent': 'how to hide output of subprocess in python 2.7', 'snippet': "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"}

886. input: how can i get the ip address of eth0 in python?
score: 0.9780498005432959
{'intent': 'How can I get the IP address of eth0 in Python?', 'snippet': "get_ip_address('eth0')"}
score: 0.9259289345026395
{'intent': 'How can I get the IP address of eth0 in Python?', 'snippet': 'return s.getsockname()[0]'}
score: 0.9259289345026395
{'intent': 'how can i get the ip address of eth0 in python?', 'snippet': 'return s.getsockname()[0]'}

887. input: help('modules collections')
score: 0.5719848310813445
{'intent': 'python: a complete list of modules', 'snippet': 'list(sys.modules.keys())'}
score: 0.5581008062143569
{'intent': 'get a list of locally installed Python modules', 'snippet': "help('modules')"}
score: 0.5581008062143569
{'intent': 'get a list of locally installed python modules', 'snippet': "help('modules')"}

888. input: a.sort(key=lambda x: b.index(x[0]))
score: 0.9091901855057529
{'intent': 'sort list `a` using the first dimension of the element as the key to list `b`', 'snippet': 'a.sort(key=lambda x: b.index(x[0]))'}
score: 0.880023805190834
{'intent': 'How to sort a list according to another list?', 'snippet': 'a.sort(key=lambda x: b.index(x[0]))'}
score: 0.880023805190834
{'intent': 'How to sort a list according to another list?', 'snippet': 'a.sort(key=lambda x: b.index(x[0]))'}

889. input: [i for i in a if i not in b]
score: 0.547967918639551
{'intent': 'List comprehension with if statement', 'snippet': '[y for y in a if y not in b]'}
score: 0.547967918639551
{'intent': 'list comprehension with if statement', 'snippet': '[y for y in a if y not in b]'}
score: 0.547967918639551
{'intent': 'List comprehension with if statement', 'snippet': '[y for y in a if y not in b]'}

890. input: soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))
score: 0.9406832741216501
{'intent': "find all anchors with a hyperlink that matches the pattern '^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'", 'snippet': "soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))"}
score: 0.8922840354862114
{'intent': 'Python BeautifulSoup Extract specific URLs', 'snippet': "soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))"}
score: 0.8922840354862114
{'intent': 'Python BeautifulSoup Extract specific URLs', 'snippet': "soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))"}

891. input: df = df[~((df['group_A'] == 0) | (df['group_B'] == 0))]
score: 0.8392534450243914
{'intent': 'Transposing part of a pandas dataframe', 'snippet': "df = df[~((df['group_A'] == 0) | (df['group_B'] == 0))]"}
score: 0.6223359709092984
{'intent': "get data of column 'a' and column 'b' in dataframe `df` where column 'a' is equal to 'foo'", 'snippet': "df.loc[gb.groups['foo'], ('A', 'B')]"}
score: 0.6223359709092984
{'intent': "get data of column 'A' and column 'B' in dataframe `df` where column 'A' is equal to 'foo'", 'snippet': "df.loc[gb.groups['foo'], ('A', 'B')]"}

892. input: how to convert efficiently a dataframe column of string type into datetime in python?
score: 0.8867572606610865
{'intent': 'How to convert efficiently a dataframe column of string type into datetime in Python?', 'snippet': 'pd.to_datetime(df.ID.str[1:-3])'}
score: 0.8867572606610865
{'intent': 'How to convert efficiently a dataframe column of string type into datetime in Python?', 'snippet': 'pd.to_datetime(df.ID.str[1:-3])'}
score: 0.8073720452234018
{'intent': 'Convert DataFrame column type from string to datetime', 'snippet': "df['col'] = pd.to_datetime(df['col'])"}

893. input: pylab.show()
score: 0.6876092240640813
{'intent': 'How can I display a np.array with pylab.imshow()', 'snippet': 'plt.show()'}
score: 0.6876092240640813
{'intent': 'how can i display a np.array with pylab.imshow()', 'snippet': 'plt.show()'}
score: 0.6829232349393954
{'intent': 'how to draw a heart with pylab', 'snippet': 'plt.show()'}

894. input: missed values when creating a dictionary with two values
score: 0.6682927260393718
{'intent': 'how to add key,value pair to dictionary?', 'snippet': 'dictionary[key] = value'}
score: 0.6110143177034533
{'intent': 'Retrieve an arbitrary value from dictionary `dict`', 'snippet': 'next(iter(dict.values()))'}
score: 0.6110143177034533
{'intent': 'retrieve an arbitrary value from dictionary `dict`', 'snippet': 'next(iter(dict.values()))'}

895. input: get the position of a regex match for word `is` in a string `string`
score: 0.8242671617981241
{'intent': 'Get the position of a regex match for word `is` in a string `String`', 'snippet': "re.search('\\\\bis\\\\b', String).start()"}
score: 0.8034862784234205
{'intent': 'get the position of a regex match `is` in a string `string`', 'snippet': "re.search('is', String).start()"}
score: 0.8034862784234205
{'intent': 'Get the position of a regex match `is` in a string `String`', 'snippet': "re.search('is', String).start()"}

896. input: df['value'] = df['value'].str.get(0)
score: 0.8186025441365357
{'intent': "get element at index 0 of each list in column 'value' of dataframe `df`", 'snippet': "df['value'] = df['value'].str.get(0)"}
score: 0.7363043585548055
{'intent': "remove square bracket '[]' from pandas dataframe `df` column 'value'", 'snippet': "df['value'] = df['value'].str.strip('[]')"}
score: 0.7363043585548055
{'intent': "remove square bracket '[]' from pandas dataframe `df` column 'value'", 'snippet': "df['value'] = df['value'].str.strip('[]')"}

897. input: [x.strip() for x in s.split(',')]
score: 0.885528475039916
{'intent': "split string `s` to list conversion by ','", 'snippet': "[x.strip() for x in s.split(',')]"}
score: 0.865495658806446
{'intent': 'string to list conversion in python', 'snippet': "[x.strip() for x in s.split(',')]"}
score: 0.865495658806446
{'intent': 'string to list conversion in python', 'snippet': "[x.strip() for x in s.split(',')]"}

898. input: how to check whether the system is freebsd in a python script?
score: 0.9525868607992484
{'intent': 'How to check whether the system is FreeBSD in a python script?', 'snippet': 'platform.system()'}
score: 0.9525868607992484
{'intent': 'How to check whether the system is FreeBSD in a python script?', 'snippet': 'platform.system()'}
score: 0.5186929099182256
{'intent': 'how to set python version by default in freebsd?', 'snippet': "PYTHON_DEFAULT_VERSION = 'python3.2'"}

899. input: is there a way to use two if conditions in list comprehensions in python
score: 0.8834752722923247
{'intent': 'is there a way to use two if conditions in list comprehensions in python', 'snippet': "[i for i in my_list if not i.startswith(('91', '18'))]"}
score: 0.8834752722923247
{'intent': 'Is there a way to use two if conditions in list comprehensions in python', 'snippet': "[i for i in my_list if not i.startswith(('91', '18'))]"}
score: 0.7859121994655318
{'intent': "is it possible to use 'else' in a python list comprehension?", 'snippet': '[(a if a else 2) for a in [0, 1, 0, 3]]'}

900. input: np.outer(a, b)
score: 0.6180348165168956
{'intent': 'multiplication of two 1-dimensional arrays  in numpy', 'snippet': 'np.outer(a, b)'}
score: 0.6180348165168956
{'intent': 'multiplication of two 1-dimensional arrays  in numpy', 'snippet': 'np.outer(a, b)'}
score: 0.6138457351405755
{'intent': 'Multiplication of 1d arrays in numpy', 'snippet': 'np.outer(a, b)'}

901. input: python: finding average of a nested list
score: 0.8482435475582966
{'intent': 'Python: Finding average of a nested list', 'snippet': 'a = [(sum(x) / len(x)) for x in zip(*a)]'}
score: 0.8482435475582966
{'intent': 'Python: Finding average of a nested list', 'snippet': 'a = [(sum(x) / len(x)) for x in zip(*a)]'}
score: 0.7912876135934861
{'intent': 'Find average of a nested list `a`', 'snippet': 'a = [(sum(x) / len(x)) for x in zip(*a)]'}

902. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

903. input: canvas.create_text(x, y, font=('Purisa', rndfont), text=k)
score: 0.9195194255928252
{'intent': "set the font 'purisa' of size 12 for a canvas' text item `k`", 'snippet': "canvas.create_text(x, y, font=('Purisa', 12), text=k)"}
score: 0.9195194255928252
{'intent': "set the font 'Purisa' of size 12 for a canvas' text item `k`", 'snippet': "canvas.create_text(x, y, font=('Purisa', 12), text=k)"}
score: 0.8382332944063582
{'intent': "How to set the font size of a Canvas' text item?", 'snippet': "canvas.create_text(x, y, font=('Purisa', rndfont), text=k)"}

904. input: dict(pair for d in L for pair in list(d.items()))
score: 0.8786643903513491
{'intent': 'How do I merge a list of dicts into a single dict?', 'snippet': 'dict(pair for d in L for pair in list(d.items()))'}
score: 0.8786643903513491
{'intent': 'How do I merge a list of dicts into a single dict?', 'snippet': 'dict(pair for d in L for pair in list(d.items()))'}
score: 0.8547322722947979
{'intent': 'Convert list of dictionaries `L` into a flat dictionary', 'snippet': 'dict(pair for d in L for pair in list(d.items()))'}

905. input: make python program wait
score: 0.8612195004711306
{'intent': 'make python program wait', 'snippet': 'time.sleep(1)'}
score: 0.8612195004711306
{'intent': 'Make Python Program Wait', 'snippet': 'time.sleep(1)'}
score: 0.7315739265754996
{'intent': 'python subprocess in parallel', 'snippet': 'p.wait()'}

906. input: br.select_form(nr=0)
score: 0.7485476869713652
{'intent': 'Python Mechanize select a form with no name', 'snippet': 'br.select_form(nr=0)'}
score: 0.7485476869713652
{'intent': 'Python Mechanize select a form with no name', 'snippet': 'br.select_form(nr=0)'}
score: 0.7277045816366479
{'intent': 'select a first form with no name in mechanize', 'snippet': 'br.select_form(nr=0)'}

907. input: """, """.join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])
score: 0.8588031494877896
{'intent': 'convert dictionaries into string python', 'snippet': '""", """.join([(str(k) + \' \' + str(v)) for k, v in list(a.items())])'}
score: 0.8588031494877896
{'intent': 'convert dictionaries into string python', 'snippet': '""", """.join([(str(k) + \' \' + str(v)) for k, v in list(a.items())])'}
score: 0.8588031494877896
{'intent': 'convert dictionaries into string python', 'snippet': '""", """.join([(str(k) + \' \' + str(v)) for k, v in list(a.items())])'}

908. input: how to return smallest value in dictionary?
score: 0.7358911623329267
{'intent': 'find lowest value in a list of dictionaries in python', 'snippet': 'min([1, 2, 3, 4, 6, 1, 0])'}
score: 0.7358911623329267
{'intent': 'Find lowest value in a list of dictionaries in python', 'snippet': 'min([1, 2, 3, 4, 6, 1, 0])'}
score: 0.709755485101011
{'intent': 'Find lowest value in a list of dictionaries in python', 'snippet': "return min(d['id'] for d in l if 'id' in d)"}

909. input: datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')
score: 0.8712495541185169
{'intent': "Convert long int `myNumber` into date and time represented in the the string format '%Y-%m-%d %H:%M:%S'", 'snippet': "datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')"}
score: 0.8238943662816778
{'intent': 'Python convert long to date', 'snippet': "datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')"}
score: 0.8238943662816778
{'intent': 'python convert long to date', 'snippet': "datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')"}

910. input: isinstance(x, int)
score: 0.8151001680119012
{'intent': 'check if `x` is an integer', 'snippet': 'isinstance(x, int)'}
score: 0.7936392702611474
{'intent': 'Checking whether a variable is an integer', 'snippet': 'isinstance(x, int)'}
score: 0.6693399529888437
{'intent': "how to properly use python's isinstance() to check if a variable is a number?", 'snippet': 'isinstance(var, (int, float, complex))'}

911. input: changing the color of the offset in scientific notation in matplotlib
score: 0.9312504590485386
{'intent': 'changing the color of the offset in scientific notation in matplotlib', 'snippet': 'plt.show()'}
score: 0.9312504590485386
{'intent': 'Changing the color of the offset in scientific notation in matplotlib', 'snippet': 'plt.show()'}
score: 0.856026307113473
{'intent': 'Changing the color of the offset in scientific notation in matplotlib', 'snippet': "ax1.ticklabel_format(style='sci', scilimits=(0, 0), axis='y')"}

912. input: min(myList, key=lambda x: abs(x - myNumber))
score: 0.9320639693968464
{'intent': 'get number in list `myList` closest in value to number `myNumber`', 'snippet': 'min(myList, key=lambda x: abs(x - myNumber))'}
score: 0.9117888519354416
{'intent': 'from list of integers, get number closest to a given value', 'snippet': 'min(myList, key=lambda x: abs(x - myNumber))'}
score: 0.9117888519354416
{'intent': 'from list of integers, get number closest to a given value', 'snippet': 'min(myList, key=lambda x: abs(x - myNumber))'}

913. input: drawing lines between two plots in matplotlib
score: 0.8914814645580209
{'intent': 'drawing lines between two plots in matplotlib', 'snippet': 'plt.show()'}
score: 0.8914814645580209
{'intent': 'Drawing lines between two plots in Matplotlib', 'snippet': 'plt.show()'}
score: 0.8914814645580209
{'intent': 'Drawing lines between two plots in Matplotlib', 'snippet': 'plt.show()'}

914. input: how do you convert command line args in python to a dictionary?
score: 0.9081717065872033
{'intent': 'How do you convert command line args in python to a dictionary?', 'snippet': "{'arg1': ['1', '4'], 'arg2': 'foobar'}"}
score: 0.7068355034356051
{'intent': 'python: pass a generic dictionary as a command line arguments', 'snippet': "{'bob': '1', 'ben': '3', 'sue': '2'}"}
score: 0.7068355034356051
{'intent': 'Python: Pass a generic dictionary as a command line arguments', 'snippet': "{'bob': '1', 'ben': '3', 'sue': '2'}"}

915. input: python: lambda function in list comprehensions
score: 0.8762726419990412
{'intent': 'python: lambda function in list comprehensions', 'snippet': '[lambda x: (x * x for x in range(10))]'}
score: 0.8762726419990412
{'intent': 'Python: Lambda function in List Comprehensions', 'snippet': '[lambda x: (x * x for x in range(10))]'}
score: 0.8726188789282432
{'intent': 'python: lambda function in list comprehensions', 'snippet': '[(lambda x: x * x)(x) for x in range(10)]'}

916. input: df[df.index.map(lambda x: x[0] in stk_list)]
score: 0.7608074613550553
{'intent': 'How to filter rows of Pandas dataframe by checking whether sub-level index value within a list?', 'snippet': 'df[df.index.map(lambda x: x[0] in stk_list)]'}
score: 0.6611264608010691
{'intent': 'Get index values of Pandas DataFrame as list?', 'snippet': 'df.index.values.tolist()'}
score: 0.6611264608010691
{'intent': 'get index values of pandas dataframe as list?', 'snippet': 'df.index.values.tolist()'}

917. input: plt.savefig('pic', dpi=300)
score: 0.8324282951101919
{'intent': 'specifying and saving a figure with exact size in pixels', 'snippet': "plt.savefig('myfig.png', dpi=1000)"}
score: 0.8324282951101919
{'intent': 'Specifying and saving a figure with exact size in pixels', 'snippet': "plt.savefig('myfig.png', dpi=1000)"}
score: 0.7714039148790157
{'intent': "save current figure to file 'graph.png' with resolution of 1000 dpi", 'snippet': "plt.savefig('graph.png', dpi=1000)"}

918. input: cv2.destroyAllWindows()
score: 0.7882612415720498
{'intent': 'Image foveation in Python', 'snippet': 'cv2.destroyAllWindows()'}
score: 0.7882612415720498
{'intent': 'image foveation in python', 'snippet': 'cv2.destroyAllWindows()'}
score: 0.695739775611817
{'intent': 'openCV video saving in python', 'snippet': 'cv2.destroyAllWindows()'}

919. input: a.decode('latin1')
score: 0.6772614627131697
{'intent': 'python byte string encode and decode', 'snippet': '"""foo""".decode(\'latin-1\')'}
score: 0.6772614627131697
{'intent': 'python byte string encode and decode', 'snippet': '"""foo""".decode(\'latin-1\')'}
score: 0.6103518825625218
{'intent': 'python - convert binary data to utf-8', 'snippet': "data.decode('latin-1').encode('utf-8')"}

920. input: trimming a string `str`
score: 0.8613689869301778
{'intent': 'Trimming a string `str`', 'snippet': 'str.strip()'}
score: 0.8276535830617681
{'intent': 'Trimming a string', 'snippet': 'str.strip()'}
score: 0.6835923628947292
{'intent': 'Trimming a string', 'snippet': "myString.strip('\\n')"}

921. input: df.drop('a', level=1, axis=1)
score: 0.8561150111067606
{'intent': "dropping all columns named 'a' from a multiindex 'df', across all level.", 'snippet': "df.drop('a', level=1, axis=1)"}
score: 0.8423571924139581
{'intent': 'Dropping a single (sub-) column from a MultiIndex', 'snippet': "df.drop('a', level=1, axis=1)"}
score: 0.8423571924139581
{'intent': 'dropping a single (sub-) column from a multiindex', 'snippet': "df.drop('a', level=1, axis=1)"}

922. input: [s.strip() for s in input().split(',')]
score: 0.8752095175477079
{'intent': 'How to read formatted input in python?', 'snippet': "[s.strip() for s in input().split(',')]"}
score: 0.8752095175477079
{'intent': 'How to read formatted input in python?', 'snippet': "[s.strip() for s in input().split(',')]"}
score: 0.8627242642537909
{'intent': 'get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string `s`', 'snippet': "[s.strip() for s in input().split(',')]"}

923. input: converting a list of integers into range in python
score: 0.8731295190685002
{'intent': 'converting a list of integers into range in python', 'snippet': 'print(list(ranges([0, 1, 2, 3, 4, 7, 8, 9, 11])))'}
score: 0.8681919599401835
{'intent': 'converting a list of integers into range in python', 'snippet': '[(0, 4), (7, 9), (11, 11)]'}
score: 0.8681919599401835
{'intent': 'converting a list of integers into range in python', 'snippet': '[(0, 4), (7, 9), (11, 11)]'}

924. input: how do i convert a datetime.date object into datetime.datetime in python?
score: 0.9373951774239755
{'intent': 'How do I convert a datetime.date object into datetime.datetime in python?', 'snippet': 'datetime.datetime.combine(dateobject, datetime.time())'}
score: 0.9373951774239755
{'intent': 'How do I convert a datetime.date object into datetime.datetime in python?', 'snippet': 'datetime.datetime.combine(dateobject, datetime.time())'}
score: 0.9126062634010041
{'intent': 'How do I convert a datetime.date object into datetime.datetime in python?', 'snippet': 'datetime.datetime.combine(dateobject, datetime.time.min)'}

925. input: pd.DataFrame([{val: key for key, val in list(d.items())} for d in df.to_dict('r')])
score: 0.7941494798988049
{'intent': 'Dict of dicts of dicts to DataFrame', 'snippet': 'pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)'}
score: 0.7941494798988049
{'intent': 'Dict of dicts of dicts to DataFrame', 'snippet': 'pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)'}
score: 0.7941494798988049
{'intent': 'dict of dicts of dicts to dataframe', 'snippet': 'pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)'}

926. input: wtforms: how to generate blank value using select fields with dynamic choice values
score: 0.7988779973481168
{'intent': 'Wtforms: How to generate blank value using select fields with dynamic choice values', 'snippet': "form.group_id.choices.insert(0, ('', ''))"}
score: 0.47372577000492344
{'intent': 'wtforms: how to select options in selectmultiplefield?', 'snippet': "form.myfield.data = ['1', '3']"}
score: 0.4612050196295097
{'intent': 'WTForms: How to select options in SelectMultipleField?', 'snippet': "form = MyForm(myfield=['1', '3'])"}

927. input: how can i fill a matplotlib grid?
score: 0.8867317694498058
{'intent': 'how can i fill a matplotlib grid?', 'snippet': "plt.plot(x, y, 'o')"}
score: 0.8867317694498058
{'intent': 'How can I fill a matplotlib grid?', 'snippet': "plt.plot(x, y, 'o')"}
score: 0.8857894964216488
{'intent': 'How can I fill a matplotlib grid?', 'snippet': 'plt.show()'}

928. input: matplotlib/pyplot: how to enforce axis range?
score: 0.9199260434980643
{'intent': 'Matplotlib/pyplot: How to enforce axis range?', 'snippet': 'fig.show()'}
score: 0.8306264671406969
{'intent': 'Matplotlib/pyplot: How to enforce axis range?', 'snippet': "fig.savefig('the name of your figure')"}
score: 0.7872051867818226
{'intent': 'Python, Matplotlib, subplot: How to set the axis range?', 'snippet': 'pylab.ylim([0, 1000])'}

929. input: A = [[1, 2, 3, 4], [5, 6, 7, 8]]
score: 0.7028487286173106
{'intent': 'How do you extract a column from a multi-dimensional array?', 'snippet': 'A = [[1, 2, 3, 4], [5, 6, 7, 8]]'}
score: 0.6637205436677014
{'intent': 'Subsetting a 2D numpy array', 'snippet': 'a[[1, 2, 3], [1, 2, 3]]'}
score: 0.6637205436677014
{'intent': 'subsetting a 2d numpy array', 'snippet': 'a[[1, 2, 3], [1, 2, 3]]'}

930. input: d = {k: v for k, v in list(d.items()) if v > 0}
score: 0.8240806440338506
{'intent': 'Filter dictionary `d` to have items with value greater than 0', 'snippet': 'd = {k: v for k, v in list(d.items()) if v > 0}'}
score: 0.750870543195998
{'intent': 'The best way to filter a dictionary in Python', 'snippet': 'd = {k: v for k, v in list(d.items()) if v > 0}'}
score: 0.750870543195998
{'intent': 'The best way to filter a dictionary in Python', 'snippet': 'd = {k: v for k, v in list(d.items()) if v > 0}'}

931. input: return s.decode('hex').decode('utf-8')
score: 0.8491590227372954
{'intent': 'How do I convert an int representing a UTF-8 character into a Unicode code point?', 'snippet': "return s.decode('hex').decode('utf-8')"}
score: 0.8181812595698928
{'intent': 'Decode Hex String in Python 3', 'snippet': "bytes.fromhex('4a4b4c').decode('utf-8')"}
score: 0.8054909699932358
{'intent': 'Python: How to convert a string containing hex bytes to a hex string', 'snippet': "s.decode('hex')"}

932. input: my_function.__name__
score: 0.8046904514333508
{'intent': 'get a name of function `my_function` as a string', 'snippet': 'my_function.__name__'}
score: 0.8046904514333508
{'intent': 'get a name of function `my_function` as a string', 'snippet': 'my_function.__name__'}
score: 0.7055613926981796
{'intent': 'How to get a function name as a string in Python?', 'snippet': 'my_function.__name__'}

933. input: webbrowser.open('http://xkcd.com/353/')
score: 0.6418126202487244
{'intent': "webbrowser open url 'http://example.com'", 'snippet': "webbrowser.open('http://example.com')"}
score: 0.6418126202487244
{'intent': "webbrowser open url 'http://example.com'", 'snippet': "webbrowser.open('http://example.com')"}
score: 0.6298341771109099
{'intent': 'webbrowser open url `url`', 'snippet': 'webbrowser.open_new(url)'}

934. input: how can i split and parse a string in python?
score: 0.914636907682135
{'intent': 'How can I split and parse a string in Python?', 'snippet': "print(mystring.split(' '))"}
score: 0.914636907682135
{'intent': 'how can i split and parse a string in python?', 'snippet': "print(mystring.split(' '))"}
score: 0.8702332756780397
{'intent': 'how can i split and parse a string in python?', 'snippet': "mystring.split('_')[4]"}

935. input: is there a method that tells my program to quit?
score: 0.8821566748262155
{'intent': 'Is there a method that tells my program to quit?', 'snippet': 'sys.exit(0)'}
score: 0.8821566748262155
{'intent': 'Is there a method that tells my program to quit?', 'snippet': 'sys.exit(0)'}
score: 0.8296449979128322
{'intent': 'terminate the program', 'snippet': 'quit()'}

936. input: convert a json schema to a python class
score: 0.7916514159365288
{'intent': 'Convert a JSON schema to a python class', 'snippet': "sweden = Country(name='Sweden', abbreviation='SE')"}
score: 0.6596553088290015
{'intent': 'How to convert a string data to a JSON object in python?', 'snippet': 'json_data = json.loads(unescaped)'}
score: 0.6570069393690068
{'intent': 'Convert dynamic python object to json', 'snippet': 'json.dumps(c, default=lambda o: o.__dict__)'}

937. input: s.resample('3M', how='sum')
score: 0.818958753622394
{'intent': 'resample series `s` into 3 months bins and sum each bin', 'snippet': "s.resample('3M', how='sum')"}
score: 0.7143404287902935
{'intent': 'How to iterate over time periods in pandas', 'snippet': "s.resample('3M', how='sum')"}
score: 0.7143404287902935
{'intent': 'how to iterate over time periods in pandas', 'snippet': "s.resample('3M', how='sum')"}

938. input: how to modify the elements in a list within list
score: 0.7894379565589594
{'intent': 'How to modify the elements in a list within list', 'snippet': 'L = [[2, 2, 3], [4, 5, 6], [3, 4, 6]]'}
score: 0.7863073357677226
{'intent': 'how to modify the elements in a list within list', 'snippet': 'L = [[1, 2, 3], [4, 5, 6], [3, 4, 6]]'}
score: 0.7863073357677226
{'intent': 'How to modify the elements in a list within list', 'snippet': 'L = [[1, 2, 3], [4, 5, 6], [3, 4, 6]]'}

939. input: how to read numbers in python conveniently?
score: 0.7258187614291929
{'intent': 'How to read numbers in text file using python?', 'snippet': 'data = [[int(v) for v in line.split()] for line in lines]'}
score: 0.7258187614291929
{'intent': 'how to read numbers in text file using python?', 'snippet': 'data = [[int(v) for v in line.split()] for line in lines]'}
score: 0.7126509783409188
{'intent': 'how can i read inputs as integers in python?', 'snippet': "y = int(eval(input('Enter a number: ')))"}

940. input: return os.environ['SERVER_NAME'] in ('localhost', 'www.lexample.com')
score: 0.5515767627129602
{'intent': 'Access environment variables', 'snippet': "os.environ['HOME']"}
score: 0.5515767627129602
{'intent': 'Access environment variables', 'snippet': "os.environ['HOME']"}
score: 0.5497550881142045
{'intent': 'Access environment variables', 'snippet': "print(os.environ.get('HOME', '/home/username/'))"}

941. input: myList[:] = [(x / myInt) for x in myList]
score: 0.8685469588316805
{'intent': 'divide each element in list `myList` by integer `myInt`', 'snippet': 'myList[:] = [(x / myInt) for x in myList]'}
score: 0.8685469588316805
{'intent': 'divide each element in list `mylist` by integer `myint`', 'snippet': 'myList[:] = [(x / myInt) for x in myList]'}
score: 0.8074778767864993
{'intent': 'How do you divide each element in a list by an int?', 'snippet': 'myList[:] = [(x / myInt) for x in myList]'}

942. input: round(3.1415 - int(3.1415), 3)
score: 0.6629959457245957
{'intent': 'round number 3.0005 up to 3 decimal places', 'snippet': 'round(3.0005, 3)'}
score: 0.6569400385677412
{'intent': 'round number 1.0005 up to 3 decimal places', 'snippet': 'round(1.0005, 3)'}
score: 0.6569400385677412
{'intent': 'round number 1.0005 up to 3 decimal places', 'snippet': 'round(1.0005, 3)'}

943. input: flask-jwt how handle a token?
score: 0.8988795358785486
{'intent': 'flask-jwt how handle a token?', 'snippet': 'xxxxx.yyyyy.zzzzz'}
score: 0.5290989204834963
{'intent': 'Using session in flask app', 'snippet': 'app.run()'}
score: 0.5290989204834963
{'intent': 'using session in flask app', 'snippet': 'app.run()'}

944. input: ALLOWED_HOSTS = ['127.0.0.1', '192.1.12.23']
score: 0.6071534343194419
{'intent': 'django rest framework: basic auth without debug', 'snippet': "ALLOWED_HOSTS = ['*']"}
score: 0.6071534343194419
{'intent': 'Django REST framework: Basic Auth without debug', 'snippet': "ALLOWED_HOSTS = ['*']"}
score: 0.5799592456224025
{'intent': 'creating a socket restricted to localhost connections only', 'snippet': "socket.bind(('127.0.0.1', 80))"}

945. input: formatted.columns = [x.strip().replace(' ', '_') for x in formatted.columns]
score: 0.8314638216858024
{'intent': 'Removing space in dataframe python', 'snippet': "formatted.columns = [x.strip().replace(' ', '_') for x in formatted.columns]"}
score: 0.6854151435431746
{'intent': 'string to list conversion in python', 'snippet': "[x.strip() for x in s.split(',')]"}
score: 0.6854151435431746
{'intent': 'string to list conversion in python', 'snippet': "[x.strip() for x in s.split(',')]"}

946. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

947. input: date.today().strftime('%A')
score: 0.8341613392074321
{'intent': "Getting today's date in YYYY-MM-DD", 'snippet': "datetime.datetime.today().strftime('%Y-%m-%d')"}
score: 0.8341613392074321
{'intent': "getting today's date in yyyy-mm-dd", 'snippet': "datetime.datetime.today().strftime('%Y-%m-%d')"}
score: 0.8330048662340821
{'intent': 'get day name from a datetime object', 'snippet': "date.today().strftime('%A')"}

948. input: (a.T * b).T
score: 0.4972454568755761
{'intent': 'scalar multiply matrix `a` by `b`', 'snippet': '(a.T * b).T'}
score: 0.4972454568755761
{'intent': 'scalar multiply matrix `a` by `b`', 'snippet': '(a.T * b).T'}
score: 0.47119181527138576
{'intent': 'numpy matrix multiplication', 'snippet': '(a.T * b).T'}

949. input: add header `('cookie', 'cookiename=cookie value')` to mechanize browser `br`
score: 0.951034860732769
{'intent': "Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`", 'snippet': "br.addheaders = [('Cookie', 'cookiename=cookie value')]"}
score: 0.8382711434128087
{'intent': 'how to set cookie in python mechanize', 'snippet': "br.addheaders = [('Cookie', 'cookiename=cookie value')]"}
score: 0.8382711434128087
{'intent': 'how to set cookie in python mechanize', 'snippet': "br.addheaders = [('Cookie', 'cookiename=cookie value')]"}

950. input: func(1, *args, **kwargs)
score: 0.754428197612446
{'intent': 'Call a function with argument list in python', 'snippet': 'func(*args, **kwargs)'}
score: 0.754428197612446
{'intent': 'call a function with argument list in python', 'snippet': 'func(*args, **kwargs)'}
score: 0.7189587761182155
{'intent': 'generic function in python - calling a method with unknown number of arguments', 'snippet': 'func(1, *args, **kwargs)'}

951. input: bigdata = pd.concat([data1, data2], ignore_index=True)
score: 0.816838485498827
{'intent': 'how to combine two data frames in python pandas', 'snippet': 'bigdata = pd.concat([data1, data2], ignore_index=True)'}
score: 0.6490143784347443
{'intent': 'python/pandas: how to combine two dataframes into one with hierarchical column index?', 'snippet': 'pd.concat(dict(df1=df1, df2=df2), axis=1)'}
score: 0.6490143784347443
{'intent': 'python/pandas: how to combine two dataframes into one with hierarchical column index?', 'snippet': 'pd.concat(dict(df1=df1, df2=df2), axis=1)'}

952. input: execute os command ''taskkill /f /im firefox.exe''
score: 0.9629835201096325
{'intent': "execute os command ''TASKKILL /F /IM firefox.exe''", 'snippet': "os.system('TASKKILL /F /IM firefox.exe')"}
score: 0.783174795194592
{'intent': 'How to Close a program using python?', 'snippet': "os.system('TASKKILL /F /IM firefox.exe')"}
score: 0.783174795194592
{'intent': 'how to close a program using python?', 'snippet': "os.system('TASKKILL /F /IM firefox.exe')"}

953. input: python string double splitting?
score: 0.83409716431021
{'intent': 'string splitting in python', 'snippet': "s.split('s')"}
score: 0.83409716431021
{'intent': 'String splitting in Python', 'snippet': "s.split('s')"}
score: 0.83409716431021
{'intent': 'String splitting in Python', 'snippet': "s.split('s')"}

954. input: ('S', 'NP', 'VP') is ('S', 'NP', 'VP')
score: 0.6233908851918258
{'intent': 'memory usage of a probabilistic parser', 'snippet': "('S', 'NP', 'VP') is ('S', 'NP', 'VP')"}
score: 0.44387751467687975
{'intent': 'check if string `s` contains "is"', 'snippet': "s.find('is')"}
score: 0.42463913823414734
{'intent': 'check if type of variable `s` is a string', 'snippet': 'isinstance(s, str)'}

955. input: aapl = aapl.asfreq('B', method='ffill')
score: 0.42915748211800453
{'intent': "get the ASCII value of a character 'a' as an int", 'snippet': "ord('a')"}
score: 0.42915748211800453
{'intent': "get the ascii value of a character 'a' as an int", 'snippet': "ord('a')"}
score: 0.41419621974246335
{'intent': "convert ascii value 'a' to int", 'snippet': "ord('a')"}

956. input: post json using python requests
score: 0.8230816309158168
{'intent': 'Post JSON using Python Requests', 'snippet': "requests.post('http://httpbin.org/post', json={'test': 'cheers'})"}
score: 0.8230816309158168
{'intent': 'Post JSON using Python Requests', 'snippet': "requests.post('http://httpbin.org/post', json={'test': 'cheers'})"}
score: 0.8134163731672577
{'intent': 'How do I send a POST request as a JSON?', 'snippet': 'response = urllib.request.urlopen(req, json.dumps(data))'}

957. input: adding calculated column(s) to a dataframe in pandas
score: 0.7824809340814078
{'intent': 'adding calculated column(s) to a dataframe in pandas', 'snippet': "d['A'][1:] < d['C'][:-1]"}
score: 0.7824809340814078
{'intent': 'Adding calculated column(s) to a dataframe in pandas', 'snippet': "d['A'][1:] < d['C'][:-1]"}
score: 0.7811823102772917
{'intent': 'attach a calculated column to an existing dataframe', 'snippet': 'df.index'}

958. input: adding calculated column(s) to a dataframe in pandas
score: 0.7824809340814078
{'intent': 'adding calculated column(s) to a dataframe in pandas', 'snippet': "d['A'][1:] < d['C'][:-1]"}
score: 0.7824809340814078
{'intent': 'Adding calculated column(s) to a dataframe in pandas', 'snippet': "d['A'][1:] < d['C'][:-1]"}
score: 0.7811823102772917
{'intent': 'attach a calculated column to an existing dataframe', 'snippet': 'df.index'}

959. input: how do i extract all the values of a specific key from a list of dictionaries?
score: 0.8792416008652432
{'intent': 'How do I extract all the values of a specific key from a list of dictionaries?', 'snippet': "results = [item['value'] for item in test_data]"}
score: 0.8792416008652432
{'intent': 'How do I extract all the values of a specific key from a list of dictionaries?', 'snippet': "results = [item['value'] for item in test_data]"}
score: 0.8792416008652432
{'intent': 'how do i extract all the values of a specific key from a list of dictionaries?', 'snippet': "results = [item['value'] for item in test_data]"}

960. input: how do i specify a range of unicode characters
score: 0.7245302465562007
{'intent': 'how do i specify a range of unicode characters in a regular-expression in python?', 'snippet': '"""[\\\\u00d8-\\\\u00f6]"""'}
score: 0.7245302465562007
{'intent': 'How do I specify a range of unicode characters in a regular-expression in python?', 'snippet': '"""[\\\\u00d8-\\\\u00f6]"""'}
score: 0.7178052175425389
{'intent': 'How do I specify a range of unicode characters', 'snippet': "re.compile('[\\\\u0020-\\\\u00d7ff]', re.DEBUG)"}

961. input: python mechanize select a form with no name
score: 0.9336183407343079
{'intent': 'Python Mechanize select a form with no name', 'snippet': 'br.select_form(nr=0)'}
score: 0.9336183407343079
{'intent': 'Python Mechanize select a form with no name', 'snippet': 'br.select_form(nr=0)'}
score: 0.8572382435292338
{'intent': 'select a first form with no name in mechanize', 'snippet': 'br.select_form(nr=0)'}

962. input: np.transpose([list1, list2, list3])
score: 0.8843175851751973
{'intent': 'Python converting lists into 2D numpy array', 'snippet': 'np.transpose([list1, list2, list3])'}
score: 0.6983197592310142
{'intent': 'Converting two lists into a matrix', 'snippet': 'np.column_stack(([1, 2, 3], [4, 5, 6]))'}
score: 0.6604877083457782
{'intent': 'Reshape array in numpy', 'snippet': 'data = np.transpose(data, (0, 3, 1, 2))'}

963. input: sum(d.values())
score: 0.7940115220781119
{'intent': 'sum of all values in a python dict `d`', 'snippet': 'sum(d.values())'}
score: 0.7940115220781119
{'intent': 'sum of all values in a python dict `d`', 'snippet': 'sum(d.values())'}
score: 0.7884906423734046
{'intent': 'Sum of all values in a Python dict', 'snippet': 'sum(d.values())'}

964. input: [[cell for cell in row] for row in X]
score: 0.5719491709828446
{'intent': 'How do you extract a column from a multi-dimensional array?', 'snippet': '[row[1] for row in A]'}
score: 0.5719491709828446
{'intent': 'How do you extract a column from a multi-dimensional array?', 'snippet': '[row[1] for row in A]'}
score: 0.5719491709828446
{'intent': 'how do you extract a column from a multi-dimensional array?', 'snippet': '[row[1] for row in A]'}

965. input: [m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
score: 0.8598291663275806
{'intent': "use regex pattern '((.+?)\\\\2+)' to split string '44442(2)2(2)44'", 'snippet': "[m[0] for m in re.compile('((.+?)\\\\2+)').findall('44442(2)2(2)44')]"}
score: 0.8541042316607792
{'intent': 'using regular expression to split string in python', 'snippet': "[m[0] for m in re.compile('((.+?)\\\\2+)').findall('44442(2)2(2)44')]"}
score: 0.8541042316607792
{'intent': 'using regular expression to split string in python', 'snippet': "[m[0] for m in re.compile('((.+?)\\\\2+)').findall('44442(2)2(2)44')]"}

966. input: read file 'filename' line by line into a list `lines`
score: 0.9030039447553038
{'intent': "read file 'filename' line by line into a list `lines`", 'snippet': "with open('filename') as f:\n    lines = f.readlines()"}
score: 0.8751356425319111
{'intent': 'read a file line by line into a list', 'snippet': "with open('filename') as f:\n    lines = f.readlines()"}
score: 0.8572376780143414
{'intent': 'read a file line by line into a list', 'snippet': 'with open(fname) as f:\n    content = f.readlines()'}

967. input: how to truncate a string using str.format in python?
score: 0.8647116591365889
{'intent': 'How to truncate a string using str.format in Python?', 'snippet': '"""{:.5}""".format(\'aaabbbccc\')'}
score: 0.8647116591365889
{'intent': 'How to truncate a string using str.format in Python?', 'snippet': '"""{:.5}""".format(\'aaabbbccc\')'}
score: 0.7222978682399441
{'intent': "truncate string `s` up to character ':'", 'snippet': "s.split(':', 1)[1]"}

968. input: df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']
score: 0.9155092397989086
{'intent': "add row `['8/19/2014', 'jun', 'fly', '98765']` to dataframe `df`", 'snippet': "df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']"}
score: 0.9155092397989086
{'intent': "Add row `['8/19/2014', 'Jun', 'Fly', '98765']` to dataframe `df`", 'snippet': "df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']"}
score: 0.7344124371771203
{'intent': 'Using slicers on a multi-index', 'snippet': "df.loc[(slice(None), '2014-05'), :]"}

969. input: plt.setp(axs[1].xaxis.get_majorticklabels(), rotation=70)
score: 0.7958395648865869
{'intent': 'Date ticks and rotation in matplotlib', 'snippet': 'plt.setp(axs[1].xaxis.get_majorticklabels(), rotation=70)'}
score: 0.7762806548430048
{'intent': 'rotate x-axis text labels of plot `ax` 45 degrees', 'snippet': 'ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)'}
score: 0.7762806548430048
{'intent': 'rotate x-axis text labels of plot `ax` 45 degrees', 'snippet': 'ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)'}

970. input: cut within a pattern using python regex
score: 0.7322932264702712
{'intent': 'Cut within a pattern using Python regex', 'snippet': "re.split('(?<=CDE)(\\\\w+)(?=FG)', s)"}
score: 0.7267853701885416
{'intent': 'python regex to split on certain patterns with skip patterns', 'snippet': "regx = re.compile('\\\\s+and\\\\s+|\\\\s*,\\\\s*')"}
score: 0.6928051708699885
{'intent': 'python split string based on regular expression', 'snippet': 'str1.split()'}

971. input: logging.getLogger().setLevel(logging.DEBUG)
score: 0.8724123651633807
{'intent': "Change log level dynamically to 'DEBUG' without restarting the application", 'snippet': 'logging.getLogger().setLevel(logging.DEBUG)'}
score: 0.8724123651633807
{'intent': "change log level dynamically to 'debug' without restarting the application", 'snippet': 'logging.getLogger().setLevel(logging.DEBUG)'}
score: 0.8635193731778876
{'intent': 'Python: logging module - globally', 'snippet': 'logger.setLevel(logging.DEBUG)'}

972. input: convert alphabet letters to number in python
score: 0.7813451926595448
{'intent': 'Convert alphabet letters to number in Python', 'snippet': "chr(ord('x')) == 'x'"}
score: 0.7742750667813039
{'intent': 'Convert alphabet letters to number in Python', 'snippet': "print([(ord(char) - 96) for char in input('Write Text: ').lower()])"}
score: 0.7742750667813039
{'intent': 'convert alphabet letters to number in python', 'snippet': "print([(ord(char) - 96) for char in input('Write Text: ').lower()])"}

973. input: create list `new_list` containing the last 10 elements of list `my_list`
score: 0.928484366797483
{'intent': 'create list `new_list` containing the last 10 elements of list `my_list`', 'snippet': 'new_list = my_list[-10:]'}
score: 0.7786643783761341
{'intent': 'get the last 10 elements from a list `my_list`', 'snippet': 'my_list[-10:]'}
score: 0.7786643783761341
{'intent': 'get the last 10 elements from a list `my_list`', 'snippet': 'my_list[-10:]'}

974. input: db.commit()
score: 0.8053755677038471
{'intent': 'commit all the changes after executing a query.', 'snippet': 'dbb.commit()'}
score: 0.8053755677038471
{'intent': 'commit all the changes after executing a query.', 'snippet': 'dbb.commit()'}
score: 0.6958022176129341
{'intent': 'How can I insert data into a MySQL database?', 'snippet': 'db.commit()'}

975. input: re.search('name (.*)', s)
score: 0.8164144005888976
{'intent': "finding words in string `s` after keyword 'name'", 'snippet': "re.search('name (.*)', s)"}
score: 0.7391730874504487
{'intent': 'finding words after keyword in python', 'snippet': "re.search('name (.*)', s)"}
score: 0.7391730874504487
{'intent': 'Finding words after keyword in python', 'snippet': "re.search('name (.*)', s)"}

976. input: {'1': {}, '2': {'101': 'OneZeroOne', '202': 'TwoZeroTwo'}}
score: 0.695935762934041
{'intent': 'How can I convert nested dictionary keys to strings?', 'snippet': "{'1': {}, '2': {'101': 'OneZeroOne', '202': 'TwoZeroTwo'}}"}
score: 0.579162491631553
{'intent': 'using name of list as a string to access list', 'snippet': "x = {'0': [], '2': [], '16': []}"}
score: 0.5637328239630587
{'intent': 'how to split comma-separated key-value pairs with quoted commas', 'snippet': '{\'age\': \'12\', \'name\': \'bob\', \'hobbies\': \'games,reading\', \'phrase\': "I\'m cool!"}'}

977. input: df['values'].groupby([df.index.year, df.index.strftime('%b')]).sum().unstack()
score: 0.845226523817536
{'intent': 'Reshaping Pandas dataframe by months', 'snippet': "df['values'].groupby([df.index.year, df.index.strftime('%b')]).sum().unstack()"}
score: 0.7848449761359102
{'intent': 'joining rows based on value conditions', 'snippet': "df.groupby(['year', 'bread'])['amount'].sum().reset_index()"}
score: 0.7848449761359102
{'intent': 'Joining rows based on value conditions', 'snippet': "df.groupby(['year', 'bread'])['amount'].sum().reset_index()"}

978. input: getting the circumcentres from a delaunay triangulation generated using matplotlib
score: 0.9675621516420321
{'intent': 'Getting the circumcentres from a delaunay triangulation generated using matplotlib', 'snippet': 'plt.show()'}
score: 0.9123416992089697
{'intent': 'getting the circumcentres from a delaunay triangulation generated using matplotlib', 'snippet': "plt.gca().set_aspect('equal')"}
score: 0.4964868297367292
{'intent': 'Plotting 3D Polygons in python-matplotlib', 'snippet': 'plt.show()'}

979. input: get user input using message 'enter name here: ' and insert it to the first placeholder in string 'hello, {0}, how do you do?'
score: 0.8795732381008698
{'intent': "get user input using message 'Enter name here: ' and insert it to the first placeholder in string 'Hello, {0}, how do you do?'", 'snippet': "print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))"}
score: 0.6893850043818017
{'intent': 'possible to get user input without inserting a new line?', 'snippet': "print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))"}
score: 0.6893850043818017
{'intent': 'Possible to get user input without inserting a new line?', 'snippet': "print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))"}

980. input: python: how to remove a list containing nones from a list of lists?
score: 0.9279489004988598
{'intent': 'Python: How to remove a list containing Nones from a list of lists?', 'snippet': '[[3, 4, None, None, None]]'}
score: 0.9279489004988598
{'intent': 'python: how to remove a list containing nones from a list of lists?', 'snippet': '[[3, 4, None, None, None]]'}
score: 0.8168656029461396
{'intent': 'Python: How to remove empty lists from a list?', 'snippet': 'list2 = [x for x in list1 if x]'}

981. input: df.toPandas().to_csv('mycsv.csv')
score: 0.7016519488386054
{'intent': "export a table dataframe `df` in pyspark to csv 'mycsv.csv'", 'snippet': "df.toPandas().to_csv('mycsv.csv')"}
score: 0.7016519488386054
{'intent': "export a table dataframe `df` in pyspark to csv 'mycsv.csv'", 'snippet': "df.toPandas().to_csv('mycsv.csv')"}
score: 0.6849794204074168
{'intent': 'how to export a table dataframe in pyspark to csv?', 'snippet': "df.toPandas().to_csv('mycsv.csv')"}

982. input: creating a dictionary from a string
score: 0.7263299973995209
{'intent': 'create dictionary from list of variables', 'snippet': "createDict('foo', 'bar')"}
score: 0.7263299973995209
{'intent': 'create dictionary from list of variables', 'snippet': "createDict('foo', 'bar')"}
score: 0.6876401575721607
{'intent': 'Creating a dictionary from a string', 'snippet': "dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))"}

983. input: x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')
score: 0.8347051101370377
{'intent': 'How can a pandas merge preserve order?', 'snippet': "x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')"}
score: 0.8347051101370377
{'intent': 'how can a pandas merge preserve order?', 'snippet': "x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')"}
score: 0.8347051101370377
{'intent': 'How can a pandas merge preserve order?', 'snippet': "x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')"}

984. input: dict(item.split('=') for item in s.split(';'))
score: 0.8949028027043651
{'intent': 'Splitting a semicolon-separated string to a dictionary, in Python', 'snippet': "dict(item.split('=') for item in s.split(';'))"}
score: 0.8949028027043651
{'intent': 'Splitting a semicolon-separated string to a dictionary, in Python', 'snippet': "dict(item.split('=') for item in s.split(';'))"}
score: 0.8949028027043651
{'intent': 'splitting a semicolon-separated string to a dictionary, in python', 'snippet': "dict(item.split('=') for item in s.split(';'))"}

985. input: len(set(a)) == len(a)
score: 0.738820637405178
{'intent': 'check whether elements in list `a` appear only once', 'snippet': 'len(set(a)) == len(a)'}
score: 0.738820637405178
{'intent': 'check whether elements in list `a` appear only once', 'snippet': 'len(set(a)) == len(a)'}
score: 0.6942012910826849
{'intent': 'How to check whether elements appears in the list only once in python?', 'snippet': 'len(set(a)) == len(a)'}

986. input: df['Season2'] = df['Season'].apply(lambda x: split_it(x))
score: 0.8713574345984085
{'intent': 'applying regex to a pandas dataframe', 'snippet': "df['Season2'] = df['Season'].apply(lambda x: split_it(x))"}
score: 0.8353768096503706
{'intent': 'applying regex to a pandas dataframe', 'snippet': "df['Season2'] = df['Season'].apply(split_it)"}
score: 0.8122591877724268
{'intent': 'applying regex to a pandas dataframe', 'snippet': "df['Season'].apply(split_it)"}

987. input: removing the common elements between two lists
score: 0.7295103015873374
{'intent': 'remove all the elements that occur in one list from another', 'snippet': 'l3 = [x for x in l1 if x not in l2]'}
score: 0.7295103015873374
{'intent': 'Remove all the elements that occur in one list from another', 'snippet': 'l3 = [x for x in l1 if x not in l2]'}
score: 0.683586924451311
{'intent': 'Removing one list from another', 'snippet': '[x for x in a if x not in b]'}

988. input: max(ld, key=lambda d: d['size'])
score: 0.8288487461164893
{'intent': "get dictionary with max value of key 'size' in list of dicts `ld`", 'snippet': "max(ld, key=lambda d: d['size'])"}
score: 0.8001561745891019
{'intent': 'Python list of dicts, get max value index', 'snippet': "max(ld, key=lambda d: d['size'])"}
score: 0.8001561745891019
{'intent': 'Python list of dicts, get max value index', 'snippet': "max(ld, key=lambda d: d['size'])"}

989. input: float('55063.000000')
score: 0.7931656107183058
{'intent': "ValueError: invalid literal for int() with base 10: ''", 'snippet': "float('55063.000000')"}
score: 0.6721160701918485
{'intent': 'floating point in python', 'snippet': "print('%.3f' % 4.53)"}
score: 0.6721160701918485
{'intent': 'Floating Point in Python', 'snippet': "print('%.3f' % 4.53)"}

990. input: json to pandas dataframe
score: 0.8067259542737304
{'intent': 'JSON to pandas DataFrame', 'snippet': 'pd.read_json(elevations)'}
score: 0.8067259542737304
{'intent': 'JSON to pandas DataFrame', 'snippet': 'pd.read_json(elevations)'}
score: 0.7492414976235627
{'intent': 'Reading a CSV into pandas where one column is a json string', 'snippet': "df.join(df['stats'].apply(json.loads).apply(pd.Series))"}

991. input: """A single ' char""".replace("'", '')
score: 0.8554509987893641
{'intent': "Replace the single quote (') character from a string", 'snippet': '"""A single \' char""".replace("\'", \'\')'}
score: 0.769085840409962
{'intent': 'Remove specific characters from a string', 'snippet': "string.replace('1', '')"}
score: 0.755216635910978
{'intent': 'Remove specific characters from a string', 'snippet': "a = a.replace(char, '')"}

992. input: append to file 'test' content 'koko'
score: 0.8457641796702913
{'intent': "append to file 'test1' content 'koko'", 'snippet': "with open('test1', 'ab') as f:\n    pass"}
score: 0.8457641796702913
{'intent': "append to file 'test1' content 'koko'", 'snippet': "with open('test1', 'ab') as f:\n    pass"}
score: 0.8381527664967767
{'intent': "append to file 'test' content 'koko'", 'snippet': "open('test', 'a+b').write('koko')"}

993. input: [x for x in my_list if not x.startswith('#')]
score: 0.8606794970728897
{'intent': 'What is the most pythonic way to exclude elements of a list that start with a specific character?', 'snippet': "[x for x in my_list if not x.startswith('#')]"}
score: 0.8606794970728897
{'intent': 'What is the most pythonic way to exclude elements of a list that start with a specific character?', 'snippet': "[x for x in my_list if not x.startswith('#')]"}
score: 0.8606794970728897
{'intent': 'What is the most pythonic way to exclude elements of a list that start with a specific character?', 'snippet': "[x for x in my_list if not x.startswith('#')]"}

994. input: print(getpass.getuser())
score: 0.8025910094275359
{'intent': 'How do I get the username in Python?', 'snippet': 'print(getpass.getuser())'}
score: 0.6234446732735597
{'intent': 'is there a portable way to get the current username in python?', 'snippet': 'getpass.getuser()'}
score: 0.6234446732735597
{'intent': 'Is there a portable way to get the current username in Python?', 'snippet': 'getpass.getuser()'}

995. input: how to change the case of first letter of a string?
score: 0.8514132359885167
{'intent': 'how to change the case of first letter of a string?', 'snippet': 'return s[0].upper() + s[1:]'}
score: 0.8514132359885167
{'intent': 'how to change the case of first letter of a string?', 'snippet': 'return s[0].upper() + s[1:]'}
score: 0.6946854738117357
{'intent': 'change the case of the first letter in string `s`', 'snippet': 'return s[0].upper() + s[1:]'}

996. input: python - how to sort a list of lists by the fourth element in each list?
score: 0.897709542852771
{'intent': 'python - how to sort a list of lists by the fourth element in each list?', 'snippet': 'unsorted_list.sort(key=lambda x: x[3])'}
score: 0.897709542852771
{'intent': 'Python - How to sort a list of lists by the fourth element in each list?', 'snippet': 'unsorted_list.sort(key=lambda x: x[3])'}
score: 0.897709542852771
{'intent': 'Python - How to sort a list of lists by the fourth element in each list?', 'snippet': 'unsorted_list.sort(key=lambda x: x[3])'}

997. input: df.round()
score: 0.7553251584538156
{'intent': 'remove decimal points in pandas data frame using round', 'snippet': 'df.round()'}
score: 0.729052033887094
{'intent': 'How to remove decimal points in pandas', 'snippet': 'df.round()'}
score: 0.729052033887094
{'intent': 'How to remove decimal points in pandas', 'snippet': 'df.round()'}

998. input: get domain/host name from request object in django
score: 0.954966690418746
{'intent': 'get domain/host name from request object in Django', 'snippet': "request.META['HTTP_HOST']"}
score: 0.9066260460897162
{'intent': 'Django - How to simply get domain name?', 'snippet': "request.META['HTTP_HOST']"}
score: 0.9066260460897162
{'intent': 'Django - How to simply get domain name?', 'snippet': "request.META['HTTP_HOST']"}

999. input: re.sub(reg, rep, text)
score: 0.6861762776067937
{'intent': 'Is there a way to refer to the entire matched expression in re.sub without the use of a group?', 'snippet': "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))"}
score: 0.6861762776067937
{'intent': 'is there a way to refer to the entire matched expression in re.sub without the use of a group?', 'snippet': "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))"}
score: 0.6861762776067937
{'intent': 'Is there a way to refer to the entire matched expression in re.sub without the use of a group?', 'snippet': "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))"}

1000. input: summing 2nd list items in a list of lists of lists
score: 0.848627153973133
{'intent': 'summing 2nd list items in a list of lists of lists', 'snippet': '[sum([x[1] for x in i]) for i in data]'}
score: 0.848627153973133
{'intent': 'Summing 2nd list items in a list of lists of lists', 'snippet': '[sum([x[1] for x in i]) for i in data]'}
score: 0.848627153973133
{'intent': 'Summing 2nd list items in a list of lists of lists', 'snippet': '[sum([x[1] for x in i]) for i in data]'}

1001. input: summarizing a dictionary of arrays in python
score: 0.7983264984258858
{'intent': 'Summarizing a dictionary of arrays in Python', 'snippet': 'heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))'}
score: 0.7983264984258858
{'intent': 'Summarizing a dictionary of arrays in Python', 'snippet': 'heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))'}
score: 0.7895995000601952
{'intent': 'summarizing a dictionary of arrays in python', 'snippet': 'OrderedDict(heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1])))'}

1002. input: find unique rows in numpy.array
score: 0.7891029383661983
{'intent': 'Find unique rows in numpy.array', 'snippet': 'unique_a = np.unique(b).view(a.dtype).reshape(-1, a.shape[1])'}
score: 0.7847062096727694
{'intent': 'removing duplicates in each row of a numpy array', 'snippet': 'numpy.array([v for v in vals if len(numpy.unique(v)) == len(v)])'}
score: 0.7847062096727694
{'intent': 'Removing duplicates in each row of a numpy array', 'snippet': 'numpy.array([v for v in vals if len(numpy.unique(v)) == len(v)])'}

1003. input: flatten, remove duplicates, and sort a list of lists in python
score: 0.8713965503829505
{'intent': 'Flatten, remove duplicates, and sort a list of lists in python', 'snippet': 'y = sorted(set(x), key=lambda s: s.lower())'}
score: 0.7839352250062233
{'intent': 'How do I remove identical items from a list and sort it in Python?', 'snippet': 'my_list.sort()'}
score: 0.7839352250062233
{'intent': 'how do i remove identical items from a list and sort it in python?', 'snippet': 'my_list.sort()'}

1004. input: divide two lists in python
score: 0.8268180549507077
{'intent': 'Divide two lists in python', 'snippet': '[(x / y) for x, y in zip(a, b)]'}
score: 0.8268180549507077
{'intent': 'Divide two lists in python', 'snippet': '[(x / y) for x, y in zip(a, b)]'}
score: 0.8263699870630323
{'intent': 'how do i divide the members of a list by the corresponding members of another list in python?', 'snippet': '[(float(c) / t) for c, t in zip(conversions, trials)]'}

1005. input: datetime.datetime.now() - datetime.timedelta(minutes=15)
score: 0.8158226659471608
{'intent': 'time offset', 'snippet': 't = datetime.datetime.now()\n(t - datetime.timedelta(hours=1, minutes=10))'}
score: 0.782525375536491
{'intent': 'datetime.datetime.now() + 1', 'snippet': 'datetime.datetime.now() + datetime.timedelta(days=1, hours=3)'}
score: 0.782525375536491
{'intent': 'datetime.datetime.now() + 1', 'snippet': 'datetime.datetime.now() + datetime.timedelta(days=1, hours=3)'}

1006. input: python, writing an integer to a '.txt' file
score: 0.7124163232507681
{'intent': 'How do I print the content of a .txt file in Python?', 'snippet': 'file_contents = f.read()'}
score: 0.7124163232507681
{'intent': 'how do i print the content of a .txt file in python?', 'snippet': 'file_contents = f.read()'}
score: 0.6972509476749061
{'intent': 'how to write integers to a file', 'snippet': "file.write('%s %s %s' % (ranks[a], ranks[b], count))"}

1007. input: pd.concat((df1, df2), axis=1).mean(axis=1)
score: 0.897762225620243
{'intent': 'merge rows from dataframe `df1` with rows from dataframe `df2` and calculate the mean for rows that have the same value of axis 1', 'snippet': 'pd.concat((df1, df2), axis=1).mean(axis=1)'}
score: 0.8870701701213796
{'intent': 'merge dataframes in pandas using the mean', 'snippet': 'pd.concat((df1, df2), axis=1)'}
score: 0.8870701701213796
{'intent': 'Merge DataFrames in Pandas using the mean', 'snippet': 'pd.concat((df1, df2), axis=1)'}

1008. input: list(range(0, len(s), 3))
score: 0.7652604781284563
{'intent': 'Convert binary string to list of integers using Python', 'snippet': 'list(range(0, len(s), 3))'}
score: 0.7081345851994616
{'intent': 'Convert binary string to list of integers using Python', 'snippet': '[s[i:i + 3] for i in range(0, len(s), 3)]'}
score: 0.7081345851994616
{'intent': 'convert binary string to list of integers using python', 'snippet': '[s[i:i + 3] for i in range(0, len(s), 3)]'}

1009. input: sqlalchemy - dictionary of tags
score: 0.8692525077041137
{'intent': 'SQLAlchemy - Dictionary of tags', 'snippet': "{'color': 'orange', 'data': 'none', 'size': 'big'}"}
score: 0.6633437579071602
{'intent': 'Count number of rows in a many-to-many relationship (SQLAlchemy)', 'snippet': 'session.query(Entry).join(Entry.tags).filter(Tag.id == 1).count()'}
score: 0.6633437579071602
{'intent': 'count number of rows in a many-to-many relationship (sqlalchemy)', 'snippet': 'session.query(Entry).join(Entry.tags).filter(Tag.id == 1).count()'}

1010. input: list('\u8fd9\u662f\u4e00\u4e2a\u53e5\u5b50')
score: 0.5702481993437634
{'intent': 'List of unicode strings', 'snippet': "['aaa', 'bbb', 'ccc']"}
score: 0.5702481993437634
{'intent': 'list of unicode strings', 'snippet': "['aaa', 'bbb', 'ccc']"}
score: 0.5525049676732184
{'intent': 'Find all Chinese characters in string `ipath`', 'snippet': "re.findall('[\\u4e00-\\u9fff]+', ipath)"}

1011. input: os.path.relpath(subdir2, subdir1)
score: 0.8490691765025562
{'intent': 'How to calculate relative path  between 2 directory path?', 'snippet': 'os.path.relpath(subdir2, subdir1)'}
score: 0.65859515427886
{'intent': 'change the current directory one level up', 'snippet': "os.chdir('..')"}
score: 0.65859515427886
{'intent': 'Change the current directory one level up', 'snippet': "os.chdir('..')"}

1012. input: selecting rows from a numpy ndarray
score: 0.7890711919614463
{'intent': 'Selecting specific rows and columns from NumPy array', 'snippet': 'a[[[0], [1], [3]], [0, 2]]'}
score: 0.7890711919614463
{'intent': 'selecting specific rows and columns from numpy array', 'snippet': 'a[[[0], [1], [3]], [0, 2]]'}
score: 0.785197121703438
{'intent': 'Selecting rows from a NumPy ndarray', 'snippet': 'test[numpy.apply_along_axis(lambda x: x[1] in wanted, 1, test)]'}

1013. input: self.view.header().setModel(model)
score: 0.5055417860937077
{'intent': 'how to unset csrf in modelviewset of django-rest-framework?', 'snippet': 'return super(MyModelViewSet, self).dispatch(*args, **kwargs)'}
score: 0.5055417860937077
{'intent': 'How to unset csrf in modelviewset of django-rest-framework?', 'snippet': 'return super(MyModelViewSet, self).dispatch(*args, **kwargs)'}
score: 0.47827765403244515
{'intent': 'How to assign items inside a Model object with Django?', 'snippet': 'my_model.save()'}

1014. input: python imaplib - mark email as unread or unseen
score: 0.8971336623654053
{'intent': 'python imaplib - mark email as unread or unseen', 'snippet': "connection.uid('STORE', '-FLAGS', '(\\\\Seen)')"}
score: 0.4985654203095101
{'intent': "How can I get an email message's text content using python?", 'snippet': 'msg.get_payload()'}
score: 0.48490101813788955
{'intent': 'Parsing email with Python', 'snippet': "print(msg['Subject'])"}

1015. input: parse 4th capital letter of line in python?
score: 0.7617682344993842
{'intent': 'Parse 4th capital letter of line in Python?', 'snippet': '"""""".join(re.findall(\'[A-Z][^A-Z]*\', s)[3:])'}
score: 0.7617682344993842
{'intent': 'parse 4th capital letter of line in python?', 'snippet': '"""""".join(re.findall(\'[A-Z][^A-Z]*\', s)[3:])'}
score: 0.7433032034764009
{'intent': 'Parse 4th capital letter of line in Python?', 'snippet': "re.match('(?:.*?[A-Z]){3}.*?([A-Z].*)', s).group(1)"}

1016. input: python requests can't send multiple headers with same key
score: 0.9591451046896002
{'intent': "python requests can't send multiple headers with same key", 'snippet': 'requests.get(url, headers=headers)'}
score: 0.8971889873229364
{'intent': "Python requests can't send multiple headers with same key", 'snippet': "headers = {'X-Attribute': 'A', 'X-Attribute': 'B'}"}
score: 0.8855474022488908
{'intent': "Python requests can't send multiple headers with same key", 'snippet': "headers = [('X-Attribute', 'A'), ('X-Attribute', 'B')]"}

1017. input: python numpy: cannot convert datetime64[ns] to datetime64[d] (to use with numba)
score: 0.9124306394422959
{'intent': 'Python numpy: cannot convert datetime64[ns] to datetime64[D] (to use with Numba)', 'snippet': "df['month_15'].astype('datetime64[D]').dtype"}
score: 0.8937518868765968
{'intent': 'Python numpy: cannot convert datetime64[ns] to datetime64[D] (to use with Numba)', 'snippet': "df['month_15'].astype('datetime64[D]').tolist()"}
score: 0.8937518868765968
{'intent': 'python numpy: cannot convert datetime64[ns] to datetime64[d] (to use with numba)', 'snippet': "df['month_15'].astype('datetime64[D]').tolist()"}

1018. input: sorting the content of a dictionary by the value and by the key
score: 0.8429468867378681
{'intent': 'Sort a Python dictionary by value', 'snippet': 'sorted(list(x.items()), key=operator.itemgetter(1))'}
score: 0.8427546558441308
{'intent': 'Sort a Python dictionary by value', 'snippet': 'sorted(dict1, key=dict1.get)'}
score: 0.8411736224922337
{'intent': 'Sorting the content of a dictionary by the value and by the key', 'snippet': 'sorted(list(d.items()), key=operator.itemgetter(1, 0))'}

1019. input: randomly select an item from list `foo`
score: 0.9257139440595106
{'intent': 'randomly select an item from list `foo`', 'snippet': 'random.choice(foo)'}
score: 0.9093133497666867
{'intent': 'randomly select an item from a list', 'snippet': 'random.choice(foo)'}
score: 0.7778388069736474
{'intent': 'How do I select a random element from an array in Python?', 'snippet': 'random.choice(mylist)'}

1020. input: how to replace repeated instances of a character with a single instance of that character in python
score: 0.7917540289441614
{'intent': 'How to replace repeated instances of a character with a single instance of that character in python', 'snippet': "re.sub('\\\\*+', '*', text)"}
score: 0.7917540289441614
{'intent': 'How to replace repeated instances of a character with a single instance of that character in python', 'snippet': "re.sub('\\\\*+', '*', text)"}
score: 0.7917540289441614
{'intent': 'how to replace repeated instances of a character with a single instance of that character in python', 'snippet': "re.sub('\\\\*+', '*', text)"}

1021. input: secondary axis with twinx(): how to add to legend?
score: 0.912719142692636
{'intent': 'secondary axis with twinx(): how to add to legend?', 'snippet': 'ax2.legend(loc=0)'}
score: 0.912719142692636
{'intent': 'Secondary axis with twinx(): how to add to legend?', 'snippet': 'ax2.legend(loc=0)'}
score: 0.9025052816235757
{'intent': 'Secondary axis with twinx(): how to add to legend?', 'snippet': 'plt.show()'}

1022. input: pass column name as parameter to postgresql using psycopg2
score: 0.7363466895694175
{'intent': 'Passing table name as a parameter in psycopg2', 'snippet': "cursor.execute('SELECT * FROM %(table)s', {'table': AsIs('my_awesome_table')})"}
score: 0.7363466895694175
{'intent': 'passing table name as a parameter in psycopg2', 'snippet': "cursor.execute('SELECT * FROM %(table)s', {'table': AsIs('my_awesome_table')})"}
score: 0.7196676397341196
{'intent': 'Passing list of parameters to SQL in psycopg2', 'snippet': "cur.mogrify('SELECT * FROM table WHERE column IN %s;', ((1, 2, 3),))"}

1023. input: how to check if a datetime object is localized with pytz?
score: 0.9056802492441645
{'intent': 'How to check if a datetime object is localized with pytz?', 'snippet': 'self.date = d.replace(tzinfo=pytz.utc)'}
score: 0.674931433611507
{'intent': 'using pytz to convert from a known timezone to local', 'snippet': '(local_dt - datetime.datetime.utcfromtimestamp(timestamp)).seconds'}
score: 0.674931433611507
{'intent': 'Using pytz to convert from a known timezone to local', 'snippet': '(local_dt - datetime.datetime.utcfromtimestamp(timestamp)).seconds'}

1024. input: how to export a table dataframe in pyspark to csv?
score: 0.9517168230984687
{'intent': 'how to export a table dataframe in pyspark to csv?', 'snippet': "df.write.csv('mycsv.csv')"}
score: 0.9517168230984687
{'intent': 'how to export a table dataframe in pyspark to csv?', 'snippet': "df.write.csv('mycsv.csv')"}
score: 0.9517168230984687
{'intent': 'how to export a table dataframe in pyspark to csv?', 'snippet': "df.write.csv('mycsv.csv')"}

1025. input: how to print base_dir from settings.py from django app in terminal?
score: 0.6442640743586349
{'intent': 'how do i find out my python path using python?', 'snippet': 'print(sys.path)'}
score: 0.6442640743586349
{'intent': 'How do I find out my python path using python?', 'snippet': 'print(sys.path)'}
score: 0.6426594822835585
{'intent': 'elegant way to take basename of directory in python?', 'snippet': "os.path.dirname(os.path.join(output_dir, ''))"}

1026. input: recursive delete in google app engine
score: 0.7995662356726415
{'intent': 'Recursive delete in google app engine', 'snippet': "db.delete(Bottom.all(keys_only=True).filter('daddy =', top).fetch(1000))"}
score: 0.7036130909363472
{'intent': 'how to handle delete in google app engine (python)', 'snippet': 'self.response.out.write(key)'}
score: 0.7036130909363472
{'intent': 'How to handle delete in Google App Engine (Python)', 'snippet': 'self.response.out.write(key)'}

1027. input: """{0:%Y-%m-%d %H:%M:%S}""".format(datetime.datetime.now())
score: 0.8440578012558888
{'intent': 'Format time string in Python 3.3', 'snippet': '"""{0:%Y-%m-%d %H:%M:%S}""".format(datetime.datetime.now())'}
score: 0.8388808780449333
{'intent': "formate current date and time to a string using pattern '%y-%m-%d %h:%m:%s'", 'snippet': "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')"}
score: 0.8388808780449333
{'intent': "Formate current date and time to a string using pattern '%Y-%m-%d %H:%M:%S'", 'snippet': "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')"}

1028. input: how to write a pandas series to csv as a row, not as a column?
score: 0.9630539849731314
{'intent': 'How to write a pandas Series to CSV as a row, not as a column?', 'snippet': 'pd.DataFrame(s).T'}
score: 0.6934269298203091
{'intent': "write pandas dataframe `df` to the file 'c:\\\\data\\\\t.csv' without row names", 'snippet': "df.to_csv('c:\\\\data\\\\t.csv', index=False)"}
score: 0.6934269298203091
{'intent': "write pandas dataframe `df` to the file 'c:\\\\data\\\\t.csv' without row names", 'snippet': "df.to_csv('c:\\\\data\\\\t.csv', index=False)"}

1029. input: django password reset email subject
score: 0.877673365347629
{'intent': 'Django password reset email subject', 'snippet': "('^password_reset/$', 'your_app.views.password_reset'),"}
score: 0.6493004822565134
{'intent': "how to use the built-in 'password_reset' view in django?", 'snippet': "('^password_reset_done/$', 'django.contrib.auth.views.password_reset_done'),"}
score: 0.4879985537334152
{'intent': 'Parsing email with Python', 'snippet': "print(msg['Subject'])"}

1030. input: pd.DataFrame(s).T
score: 0.6883891855590996
{'intent': 'how to build and fill pandas dataframe from for loop?', 'snippet': 'pd.DataFrame(d)'}
score: 0.6883891855590996
{'intent': 'How to build and fill pandas dataframe from for loop?', 'snippet': 'pd.DataFrame(d)'}
score: 0.6815372331389854
{'intent': 'Converting Indices of Series to Columns', 'snippet': 'pd.DataFrame(s).T'}

1031. input: decode the string 'stringnamehere'  to utf-8
score: 0.845642574238494
{'intent': "decode the string 'stringnamehere'  to UTF-8", 'snippet': "stringnamehere.decode('utf-8', 'ignore')"}
score: 0.828164412471855
{'intent': 'python: how to convert a string to utf-8', 'snippet': "stringnamehere.decode('utf-8', 'ignore')"}
score: 0.828164412471855
{'intent': 'python: how to convert a string to utf-8', 'snippet': "stringnamehere.decode('utf-8', 'ignore')"}

1032. input: C = pd.merge(C, A, on=['Canal', 'Gerencia'])
score: 0.7973036589214065
{'intent': 'Efficient calculation on a pandas dataframe', 'snippet': "C = pd.merge(C, A, on=['Canal', 'Gerencia'])"}
score: 0.5731521185099483
{'intent': 'How do I join two dataframes based on values in selected columns?', 'snippet': "pd.merge(a, b, on=['A', 'B'], how='outer')"}
score: 0.5731521185099483
{'intent': 'How do I join two dataframes based on values in selected columns?', 'snippet': "pd.merge(a, b, on=['A', 'B'], how='outer')"}

1033. input: best way to split every nth string element and merge into array?
score: 0.7817266904596462
{'intent': 'Best way to split every nth string element and merge into array?', 'snippet': 'list(itertools.chain(*[item.split() for item in lst]))'}
score: 0.6344163296839789
{'intent': 'splitting a string by list of indices', 'snippet': "['long ', 'string ', 'that ', 'I want to split up']"}
score: 0.6344163296839789
{'intent': 'Splitting a string by list of indices', 'snippet': "['long ', 'string ', 'that ', 'I want to split up']"}

1034. input: how do you create a legend for a contour plot in matplotlib?
score: 0.9178631079437171
{'intent': 'How do you create a legend for a contour plot in matplotlib?', 'snippet': 'plt.show()'}
score: 0.8963503738125792
{'intent': 'How do you create a legend for a contour plot in matplotlib?', 'snippet': "plt.legend(loc='upper left')"}
score: 0.6978794358380751
{'intent': 'How do I write a Latex formula in the legend of a plot using Matplotlib inside a .py file?', 'snippet': 'ax.legend()'}

1035. input: printing list elements on separated lines in python
score: 0.81664658159904
{'intent': 'Printing list elements on separated lines in Python', 'snippet': "print('\\n'.join(sys.path))"}
score: 0.760404388220625
{'intent': 'pythonic way to print list items', 'snippet': "print('\\n'.join(str(p) for p in myList))"}
score: 0.760404388220625
{'intent': 'Pythonic way to print list items', 'snippet': "print('\\n'.join(str(p) for p in myList))"}

1036. input: set the stdin of the process 'grep f' to be 'one\ntwo\nthree\nfour\nfive\nsix\n'
score: 0.7499812098136978
{'intent': "set the stdin of the process 'grep f' to be b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", 'snippet': "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"}
score: 0.5810153599266612
{'intent': 'pass a string into subprocess.Popen', 'snippet': "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"}
score: 0.5354168393579511
{'intent': 'read a single character from the user', 'snippet': 'sys.stdin.read(1)'}

1037. input: delete a row from dataframe when the index (datetime) is sunday
score: 0.9277586365918357
{'intent': 'delete a row from dataframe when the index (DateTime) is Sunday', 'snippet': "df.asfreq('B')"}
score: 0.6954698081023207
{'intent': 'pandas data frame indexing using loc', 'snippet': "df['Weekday'].loc[1]"}
score: 0.6954698081023207
{'intent': 'pandas data frame indexing using loc', 'snippet': "df['Weekday'].loc[1]"}

1038. input: sum the product of elements of two lists named `a` and `b`
score: 0.8357916723469941
{'intent': 'sum the product of elements of two lists named `a` and `b`', 'snippet': 'sum(x * y for x, y in list(zip(a, b)))'}
score: 0.804962781018829
{'intent': 'sum the products of each two elements at the same index of list `a` and list `b`', 'snippet': 'list(x * y for x, y in list(zip(a, b)))'}
score: 0.804962781018829
{'intent': 'sum the products of each two elements at the same index of list `a` and list `b`', 'snippet': 'list(x * y for x, y in list(zip(a, b)))'}

1039. input: os.path.dirname(sys.executable)
score: 0.755013459330652
{'intent': "How can I know python's path under windows?", 'snippet': 'os.path.dirname(sys.executable)'}
score: 0.755013459330652
{'intent': "how can i know python's path under windows?", 'snippet': 'os.path.dirname(sys.executable)'}
score: 0.755013459330652
{'intent': "How can I know python's path under windows?", 'snippet': 'os.path.dirname(sys.executable)'}

1040. input: re.findall('[%s]+' % string.ascii_letters, 'Hello world, my name is...James!')
score: 0.8197137978651277
{'intent': 'Extracting words from a string, removing punctuation and returning a list with separated words in Python', 'snippet': "re.findall('[%s]+' % string.ascii_letters, 'Hello world, my name is...James!')"}
score: 0.7302582245357762
{'intent': 'Get a list of  words from a string `Hello world, my name is...James the 2nd!` removing punctuation', 'snippet': "re.compile('\\\\w+').findall('Hello world, my name is...James the 2nd!')"}
score: 0.7302582245357762
{'intent': 'get a list of  words from a string `hello world, my name is...james the 2nd!` removing punctuation', 'snippet': "re.compile('\\\\w+').findall('Hello world, my name is...James the 2nd!')"}

1041. input: df['quantity'] = df['quantity'].apply(lambda x: x * -1)
score: 0.8331354910840039
{'intent': 'Python: Pandas Dataframe how to multiply entire column with a scalar', 'snippet': "df['quantity'] = df['quantity'].apply(lambda x: x * -1)"}
score: 0.7051511144033766
{'intent': 'pandas: how can i use the apply() function for a single column?', 'snippet': "df['a'] = df['a'].apply(lambda x: x + 1)"}
score: 0.7051511144033766
{'intent': 'Pandas: How can I use the apply() function for a single column?', 'snippet': "df['a'] = df['a'].apply(lambda x: x + 1)"}

1042. input: datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()
score: 0.8763167158701348
{'intent': 'format a date object `str_data` into iso fomrat', 'snippet': "datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()"}
score: 0.8763167158701348
{'intent': 'Format a date object `str_data` into iso fomrat', 'snippet': "datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()"}
score: 0.8650250797250345
{'intent': 'how to format date in ISO using python?', 'snippet': "datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()"}

1043. input: in python, how can i turn this format into a unix timestamp?
score: 0.9119247639926171
{'intent': 'In Python, how can I turn this format into a unix timestamp?', 'snippet': 'int(time.mktime(dt.timetuple()))'}
score: 0.8789149489288499
{'intent': 'in python, how can i turn this format into a unix timestamp?', 'snippet': "time.strptime('Mon Jul 09 09:20:28 +0000 2012', '%a %b %d %H:%M:%S +0000 %Y')"}
score: 0.8789149489288499
{'intent': 'In Python, how can I turn this format into a unix timestamp?', 'snippet': "time.strptime('Mon Jul 09 09:20:28 +0000 2012', '%a %b %d %H:%M:%S +0000 %Y')"}

1044. input: TIME_ZONE = 'Europe/Istanbul'
score: 0.7946379858814793
{'intent': 'set time zone `europe/istanbul` in django', 'snippet': "TIME_ZONE = 'Europe/Istanbul'"}
score: 0.7946379858814793
{'intent': 'Set time zone `Europe/Istanbul` in Django', 'snippet': "TIME_ZONE = 'Europe/Istanbul'"}
score: 0.7609404423235253
{'intent': 'How to set the timezone in Django?', 'snippet': "TIME_ZONE = 'Europe/Istanbul'"}

1045. input: list_c = list_c + list_a + ['more'] + list_b + ['var1', 'var2']
score: 0.7889396550974803
{'intent': "How can I create a list containing another list's elements in the middle in python?", 'snippet': "list_c = list_c + list_a + ['more'] + list_b + ['var1', 'var2']"}
score: 0.635320277493818
{'intent': 'list manipulation in python', 'snippet': 'var1, var2, var3 = (ll + [None] * 3)[:3]'}
score: 0.635320277493818
{'intent': 'List manipulation in python', 'snippet': 'var1, var2, var3 = (ll + [None] * 3)[:3]'}

1046. input: df.resample('3D', how='sum')
score: 0.8094794873026128
{'intent': 'How to resample a df with datetime index to exactly n equally sized periods?', 'snippet': "df.resample('3D', how='sum')"}
score: 0.7466969368505403
{'intent': 'how to resample a df with datetime index to exactly n equally sized periods?', 'snippet': "df.resample('2D', how='sum')"}
score: 0.7466969368505403
{'intent': 'How to resample a df with datetime index to exactly n equally sized periods?', 'snippet': "df.resample('2D', how='sum')"}

1047. input: new_list = [' '.join(words) for words in words_list]
score: 0.8537454678144373
{'intent': 'Concatenate elements of a tuple in a list in python', 'snippet': "new_list = [' '.join(words) for words in words_list]"}
score: 0.7839713563440052
{'intent': 'create new list `result` by splitting each item in list `words`', 'snippet': "result = [item for word in words for item in word.split(',')]"}
score: 0.7839713563440052
{'intent': 'Create new list `result` by splitting each item in list `words`', 'snippet': "result = [item for word in words for item in word.split(',')]"}

1048. input: python: updating a large dictionary using another large dictionary
score: 0.9305657226731513
{'intent': 'Python: updating a large dictionary using another large dictionary', 'snippet': 'b.update(d)'}
score: 0.9305657226731513
{'intent': 'Python: updating a large dictionary using another large dictionary', 'snippet': 'b.update(d)'}
score: 0.7348731386802139
{'intent': 'Python "extend" for a dictionary', 'snippet': 'a.update(b)'}

1049. input: re.split('\\s*[Ff]eat\\.', a)
score: 0.7752389090000331
{'intent': 'Case Insensitive Python string split() method', 'snippet': "re.split('\\\\s*[Ff]eat\\\\.', a)"}
score: 0.7406805362030786
{'intent': 'Case Insensitive Python string split() method', 'snippet': "regex = re.compile('\\\\s*[Ff]eat\\\\.\\\\s*')"}
score: 0.7406805362030786
{'intent': 'case insensitive python string split() method', 'snippet': "regex = re.compile('\\\\s*[Ff]eat\\\\.\\\\s*')"}

1050. input: input_string.count('Hello')
score: 0.8924264711003114
{'intent': "find the count of a word 'Hello' in a string `input_string`", 'snippet': "input_string.count('Hello')"}
score: 0.8775013958551815
{'intent': 'how to find the count of a word in a string?', 'snippet': "input_string.count('Hello')"}
score: 0.8775013958551815
{'intent': 'How to find the count of a word in a string?', 'snippet': "input_string.count('Hello')"}

1051. input: how to do a 3d revolution plot in matplotlib?
score: 0.9151200574731693
{'intent': 'How to do a 3D revolution plot in matplotlib?', 'snippet': 'plt.show()'}
score: 0.7157956970709947
{'intent': '3d plots using maplot3d from matplotlib-', 'snippet': 'plt.show()'}
score: 0.7048016070802536
{'intent': 'Plotting 3D Polygons in python-matplotlib', 'snippet': 'plt.show()'}

1052. input: forminstance.is_valid()
score: 0.5482557735436947
{'intent': 'Django subclassing multiwidget - reconstructing date on post using custom multiwidget', 'snippet': 'forminstance.is_valid()'}
score: 0.5095887452181463
{'intent': 'django - csrf verification failed', 'snippet': "return render(request, 'contact.html', {form: form})"}
score: 0.5095887452181463
{'intent': 'Django - CSRF verification failed', 'snippet': "return render(request, 'contact.html', {form: form})"}

1053. input: how to sort tire sizes in python
score: 0.9372494832571246
{'intent': 'How to sort tire sizes in python', 'snippet': "['235', '40', '17']"}
score: 0.9277799614813345
{'intent': 'how to sort tire sizes in python', 'snippet': "['235/40/17', '285/30/18', '315/25/19', '275/30/19', '285/30/19']"}
score: 0.9277799614813345
{'intent': 'How to sort tire sizes in python', 'snippet': "['235/40/17', '285/30/18', '315/25/19', '275/30/19', '285/30/19']"}

1054. input: plt.savefig('cap.png')
score: 0.8070339406682189
{'intent': "Save plot `plt` as png file 'filename.png'", 'snippet': "plt.savefig('filename.png')"}
score: 0.7153432086777844
{'intent': 'specifying and saving a figure with exact size in pixels', 'snippet': "plt.savefig('myfig.png', dpi=1000)"}
score: 0.7153432086777844
{'intent': 'Specifying and saving a figure with exact size in pixels', 'snippet': "plt.savefig('myfig.png', dpi=1000)"}

1055. input: list(itertools.combinations(L, 2))
score: 0.8176033892317889
{'intent': 'Two Combination Lists from One List', 'snippet': 'itertools.combinations'}
score: 0.8176033892317889
{'intent': 'two combination lists from one list', 'snippet': 'itertools.combinations'}
score: 0.8051604721471153
{'intent': 'sum of product of combinations in a list `l`', 'snippet': 'sum([(i * j) for i, j in list(itertools.combinations(l, 2))])'}

1056. input: """""".join([1, 2, 3, 4])
score: 0.7821124121240883
{'intent': 'join list of numbers `[1,2,3,4] ` to string of numbers.', 'snippet': '"""""".join([1, 2, 3, 4])'}
score: 0.690406924460974
{'intent': "how to change [1,2,3,4] to '1234' using python", 'snippet': '"""""".join([1, 2, 3, 4])'}
score: 0.690406924460974
{'intent': "how to change [1,2,3,4] to '1234' using python", 'snippet': '"""""".join([1, 2, 3, 4])'}

1057. input: results = Model.objects.filter(x=5).exclude(a=true)
score: 0.8048576683193975
{'intent': 'How do I do a not equal in Django queryset filtering?', 'snippet': 'results = Model.objects.filter(x=5).exclude(a=true)'}
score: 0.6346907858381129
{'intent': 'How do I do a not equal in Django queryset filtering?', 'snippet': 'Entry.objects.filter(~Q(id=3))'}
score: 0.6346907858381129
{'intent': 'How do I do a not equal in Django queryset filtering?', 'snippet': 'Entry.objects.filter(~Q(id=3))'}

1058. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

1059. input: df[df.a.isin(keys)]
score: 0.7101306308225964
{'intent': "Slice pandas DataFrame where column's value exists in another array", 'snippet': 'df[df.a.isin(keys)]'}
score: 0.6510703140697652
{'intent': 'how to determine whether a pandas column contains a particular value', 'snippet': "df.isin({'A': [1, 3], 'B': [4, 7, 12]})"}
score: 0.6510703140697652
{'intent': 'How to determine whether a Pandas Column contains a particular value', 'snippet': "df.isin({'A': [1, 3], 'B': [4, 7, 12]})"}

1060. input: data.set_index('Date').diff()
score: 0.7657205103826528
{'intent': 'calculat the difference between each row and the row previous to it in dataframe `data`', 'snippet': "data.set_index('Date').diff()"}
score: 0.7578418180020843
{'intent': 'calculating difference between two rows in python / pandas', 'snippet': "data.set_index('Date').diff()"}
score: 0.7578418180020843
{'intent': 'Calculating difference between two rows in Python / Pandas', 'snippet': "data.set_index('Date').diff()"}

1061. input: soup = BeautifulSoup(response.read().decode('utf-8'))
score: 0.9353247543950354
{'intent': 'parse UTF-8 encoded HTML response `response` to BeautifulSoup object', 'snippet': "soup = BeautifulSoup(response.read().decode('utf-8'))"}
score: 0.9353247543950354
{'intent': 'parse utf-8 encoded html response `response` to beautifulsoup object', 'snippet': "soup = BeautifulSoup(response.read().decode('utf-8'))"}
score: 0.8945107948566666
{'intent': 'How to correctly parse UTF-8 encoded HTML to Unicode strings with BeautifulSoup?', 'snippet': "soup = BeautifulSoup(response.read().decode('utf-8'))"}

1062. input: list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])
score: 0.8811277488415902
{'intent': 'sort list `list_` based on first element of each tuple and by the length of the second element of each tuple', 'snippet': 'list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])'}
score: 0.8811277488415902
{'intent': 'sort list `list_` based on first element of each tuple and by the length of the second element of each tuple', 'snippet': 'list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])'}
score: 0.8729911612666797
{'intent': 'Sorting a list of tuples with multiple conditions', 'snippet': 'list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])'}

1063. input: kdll.CreateSymbolicLinkA('d:\\test.txt', 'd:\\test_link.txt', 0)
score: 0.8783642765531736
{'intent': 'Symlinks on windows?', 'snippet': "kdll.CreateSymbolicLinkA('d:\\\\test.txt', 'd:\\\\test_link.txt', 0)"}
score: 0.7311464839438501
{'intent': 'symlinks on windows?', 'snippet': "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)"}
score: 0.7311464839438501
{'intent': 'Symlinks on windows?', 'snippet': "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)"}

1064. input: ['hello', '', '', '', '', '', '', '', 'there']
score: 0.6540377330292675
{'intent': 'Python regex -- extraneous matchings', 'snippet': "['hello', '', '', '', '', '', '', '', 'there']"}
score: 0.5374295612312614
{'intent': 'Technique to remove common words(and their plural versions) from a string', 'snippet': "'all', 'just', 'being', 'over', 'both', 'through', 'yourselves', 'its', 'before', 'herself', 'had', 'should', 'to', 'only', 'under', 'ours', 'has', 'do', 'them', 'his', 'very', 'they', 'not', 'during', 'now', 'him', 'nor', 'did', 'this', 'she', 'each', 'further', 'where', 'few', 'because', 'doing', 'some', 'are', 'our', 'ourselves', 'out', 'what', 'for', 'while', 'does', 'above', 'between', 't', 'be', 'we', 'who', 'were', 'here', 'hers', 'by', 'on', 'about', 'of', 'against', 's', 'or', 'own', 'into', 'yourself', 'down', 'your', 'from', 'her', 'their', 'there', 'been', 'whom', 'too', 'themselves', 'was', 'until', 'more', 'himself', 'that', 'but', 'don', 'with', 'than', 'those', 'he', 'me', 'myself', 'these', 'up', 'will', 'below', 'can', 'theirs', 'my', 'and', 'then', 'is', 'am', 'it', 'an', 'as', 'itself', 'at', 'have', 'in', 'any', 'if', 'again', 'no', 'when', 'same', 'how', 'other', 'which', 'you', 'after', 'most', 'such', 'why', 'a', 'off', 'i', 'yours', 'so', 'the', 'having', 'once'"}
score: 0.5374295612312614
{'intent': 'technique to remove common words(and their plural versions) from a string', 'snippet': "'all', 'just', 'being', 'over', 'both', 'through', 'yourselves', 'its', 'before', 'herself', 'had', 'should', 'to', 'only', 'under', 'ours', 'has', 'do', 'them', 'his', 'very', 'they', 'not', 'during', 'now', 'him', 'nor', 'did', 'this', 'she', 'each', 'further', 'where', 'few', 'because', 'doing', 'some', 'are', 'our', 'ourselves', 'out', 'what', 'for', 'while', 'does', 'above', 'between', 't', 'be', 'we', 'who', 'were', 'here', 'hers', 'by', 'on', 'about', 'of', 'against', 's', 'or', 'own', 'into', 'yourself', 'down', 'your', 'from', 'her', 'their', 'there', 'been', 'whom', 'too', 'themselves', 'was', 'until', 'more', 'himself', 'that', 'but', 'don', 'with', 'than', 'those', 'he', 'me', 'myself', 'these', 'up', 'will', 'below', 'can', 'theirs', 'my', 'and', 'then', 'is', 'am', 'it', 'an', 'as', 'itself', 'at', 'have', 'in', 'any', 'if', 'again', 'no', 'when', 'same', 'how', 'other', 'which', 'you', 'after', 'most', 'such', 'why', 'a', 'off', 'i', 'yours', 'so', 'the', 'having', 'once'"}

1065. input: """""".join([a[::-1][i:i + 2][::-1] for i in range(0, len(a), 2)])
score: 0.6722236109500143
{'intent': 'convert a list to a dictionary in python', 'snippet': 'b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}'}
score: 0.6722236109500143
{'intent': 'Convert a list to a dictionary in Python', 'snippet': 'b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}'}
score: 0.6722236109500143
{'intent': 'Convert a list to a dictionary in Python', 'snippet': 'b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}'}

1066. input: regular expression: match string between two slashes if the string itself contains escaped slashes
score: 0.7635455489643882
{'intent': 'Regular expression: Match string between two slashes if the string itself contains escaped slashes', 'snippet': "pattern = re.compile('^(?:\\\\\\\\.|[^/\\\\\\\\])*/((?:\\\\\\\\.|[^/\\\\\\\\])*)/')"}
score: 0.6182340366701096
{'intent': 'Regex - substitute specific chars exept specific string', 'snippet': '"""\\\\1"""'}
score: 0.6182340366701096
{'intent': 'regex - substitute specific chars exept specific string', 'snippet': '"""\\\\1"""'}

1067. input: accented characters in matplotlib
score: 0.7451245154918831
{'intent': 'Accented characters in Matplotlib', 'snippet': "ax.set_yticklabels(['\\xe9', '\\xe3', '\\xe2'])"}
score: 0.7451245154918831
{'intent': 'Accented characters in Matplotlib', 'snippet': "ax.set_yticklabels(['\\xe9', '\\xe3', '\\xe2'])"}
score: 0.6852630841351264
{'intent': 'Non-ASCII characters in Matplotlib', 'snippet': "matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})"}

1068. input: np.exp(-x)
score: 0.6672577016289494
{'intent': 'Exponential curve fitting in SciPy', 'snippet': 'np.exp(-x)'}
score: 0.5164460311685822
{'intent': 'gradient calculation with python', 'snippet': 'np.cos(-1.5)'}
score: 0.48436202646995274
{'intent': "replace '-' in pandas dataframe `df` with `np.nan`", 'snippet': "df.replace('-', np.nan)"}

1069. input: print variable and a string in python
score: 0.7038553465881536
{'intent': 'printing each item of a variable on a separate line in python', 'snippet': "print('\\n'.join(str(port) for port in ports))"}
score: 0.6996570564466499
{'intent': 'printing each item of a variable on a separate line in python', 'snippet': "print('\\n'.join(map(str, ports)))"}
score: 0.6996570564466499
{'intent': 'Printing each item of a variable on a separate line in Python', 'snippet': "print('\\n'.join(map(str, ports)))"}

1070. input: what is the proper way to format a multi-line dict in python?
score: 0.8495991473169675
{'intent': 'What is the proper way to format a multi-line dict in Python?', 'snippet': "nested = {a: [(1, 'a'), (2, 'b')], b: [(3, 'c'), (4, 'd')]}"}
score: 0.6502920519771764
{'intent': 'How do I format a string using a dictionary in python-3.x?', 'snippet': '"""foo is {foo}, bar is {bar} and baz is {baz}""".format(**d)'}
score: 0.6502920519771764
{'intent': 'how do i format a string using a dictionary in python-3.x?', 'snippet': '"""foo is {foo}, bar is {bar} and baz is {baz}""".format(**d)'}

1071. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

1072. input: create dictionary from list of variables 'foo' and 'bar' already defined
score: 0.8740406626097694
{'intent': 'create dictionary from list of variables', 'snippet': "createDict('foo', 'bar')"}
score: 0.8740406626097694
{'intent': 'create dictionary from list of variables', 'snippet': "createDict('foo', 'bar')"}
score: 0.8139915462538639
{'intent': "create dictionary from list of variables 'foo' and 'bar' already defined", 'snippet': "dict((k, globals()[k]) for k in ('foo', 'bar'))"}

1073. input: generate big random sequence of unique numbers
score: 0.8847852411587491
{'intent': 'Generate big random sequence of unique numbers', 'snippet': 'random.shuffle(a)'}
score: 0.692430874517075
{'intent': 'How do I create a LIST of unique random numbers?', 'snippet': 'random.sample(list(range(100)), 10)'}
score: 0.692430874517075
{'intent': 'How do I create a LIST of unique random numbers?', 'snippet': 'random.sample(list(range(100)), 10)'}

1074. input: _get_recursive_results(d, ['l', 'm'], ['k', 'stuff'])
score: 0.7815201995833958
{'intent': 'Python Recursive Search of Dict with Nested Keys', 'snippet': "_get_recursive_results(d, ['l', 'm'], ['k', 'stuff'])"}
score: 0.5695326667186674
{'intent': 'recursive "all paths" through a list of lists - python', 'snippet': "['ab', 'c', 'de', 'fg', 'h']"}
score: 0.5695326667186674
{'intent': 'Recursive "all paths" through a list of lists - Python', 'snippet': "['ab', 'c', 'de', 'fg', 'h']"}

1075. input: reset index to default in dataframe `df`
score: 0.9182531717272558
{'intent': 'reset index to default in dataframe `df`', 'snippet': 'df = df.reset_index(drop=True)'}
score: 0.8830810453206819
{'intent': 'How to reset index in a pandas data frame?', 'snippet': 'df = df.reset_index(drop=True)'}
score: 0.8830810453206819
{'intent': 'how to reset index in a pandas data frame?', 'snippet': 'df = df.reset_index(drop=True)'}

1076. input: print(re.findall('[\u4e00-\u9fff]+', ipath.decode('utf-8')))
score: 0.7947353656409819
{'intent': 'find all chinese characters in string `ipath`', 'snippet': "re.findall('[\\u4e00-\\u9fff]+', ipath)"}
score: 0.7947353656409819
{'intent': 'Find all Chinese characters in string `ipath`', 'snippet': "re.findall('[\\u4e00-\\u9fff]+', ipath)"}
score: 0.7500253275244229
{'intent': 'easiest way to remove unicode representations from a string in python 3?', 'snippet': "print(re.sub('(\\\\\\\\u[0-9A-Fa-f]+)', unescapematch, 'Wi\\\\u2011Fi'))"}

1077. input: check if all the values in a list `['a', 'b']` are present in another list `['b', 'a', 'foo', 'bar']`
score: 0.9281099077470718
{'intent': "Check if all the values in a list `['a', 'b']` are present in another list `['b', 'a', 'foo', 'bar']`", 'snippet': "all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])"}
score: 0.7979903576616492
{'intent': "check if all the items in a list `['a', 'b']` exists in another list `l`", 'snippet': "set(['a', 'b']).issubset(set(l))"}
score: 0.7979903576616492
{'intent': "Check if all the items in a list `['a', 'b']` exists in another list `l`", 'snippet': "set(['a', 'b']).issubset(set(l))"}

1078. input: re.sub('(<!--)|(<!--)', '<comment>', child.text, flags=re.MULTILINE)
score: 0.7991868141473737
{'intent': 'How to replace HTML comments with custom <comment> elements', 'snippet': "re.sub('(<!--)|(<!--)', '<comment>', child.text, flags=re.MULTILINE)"}
score: 0.579475022819284
{'intent': 'Remove characters "!@#$" from a string `line`', 'snippet': "line = re.sub('[!@#$]', '', line)"}
score: 0.579475022819284
{'intent': 'remove characters "!@#$" from a string `line`', 'snippet': "line = re.sub('[!@#$]', '', line)"}

1079. input: how can i find the first occurrence of a sub-string in a python string?
score: 0.8830335431963842
{'intent': 'How can I find the first occurrence of a sub-string in a python string?', 'snippet': "s.find('dude')"}
score: 0.744189544100239
{'intent': 'Best way to find first non repeating character in a string', 'snippet': '[a for a in s if s.count(a) == 1][0]'}
score: 0.744189544100239
{'intent': 'best way to find first non repeating character in a string', 'snippet': '[a for a in s if s.count(a) == 1][0]'}

1080. input: how can i plot hysteresis in matplotlib?
score: 0.9421158494685138
{'intent': 'how can i plot hysteresis in matplotlib?', 'snippet': 'fig = plt.figure()'}
score: 0.9421158494685138
{'intent': 'How can I plot hysteresis in matplotlib?', 'snippet': 'fig = plt.figure()'}
score: 0.9377100574401089
{'intent': 'How can I plot hysteresis in matplotlib?', 'snippet': 'plt.show()'}

1081. input: request.json['foo']
score: 0.6441998425951883
{'intent': 'decode json string `request.body` to python dict', 'snippet': 'json.loads(request.body)'}
score: 0.6178111799920083
{'intent': 'Sending JSON request with Python', 'snippet': 'json.dumps(data).replace(\'"\', \'\')'}
score: 0.6178111799920083
{'intent': 'sending json request with python', 'snippet': 'json.dumps(data).replace(\'"\', \'\')'}

1082. input: list(stru.decode('utf-8'))
score: 0.8932621325521948
{'intent': 'split a `utf-8` encoded string `stru` into a list of characters', 'snippet': "list(stru.decode('utf-8'))"}
score: 0.8677064945426539
{'intent': 'how to split a unicode string into list', 'snippet': "list(stru.decode('utf-8'))"}
score: 0.8677064945426539
{'intent': 'how to split a unicode string into list', 'snippet': "list(stru.decode('utf-8'))"}

1083. input: indices = [i for i, x in enumerate(my_list) if x == 'whatever']
score: 0.8384776846819741
{'intent': 'How to find all occurrences of an element in a list?', 'snippet': "indices = [i for i, x in enumerate(my_list) if x == 'whatever']"}
score: 0.8384776846819741
{'intent': 'How to find all occurrences of an element in a list?', 'snippet': "indices = [i for i, x in enumerate(my_list) if x == 'whatever']"}
score: 0.8384776846819741
{'intent': 'How to find all occurrences of an element in a list?', 'snippet': "indices = [i for i, x in enumerate(my_list) if x == 'whatever']"}

1084. input: python: converting list of lists to tuples of tuples
score: 0.9350986683153119
{'intent': 'Python: converting list of lists to tuples of tuples', 'snippet': 'tuple_of_tuples = tuple(tuple(x) for x in list_of_lists)'}
score: 0.8575175828580934
{'intent': 'to convert a list of tuples `list_of_tuples` into list of lists', 'snippet': '[list(t) for t in zip(*list_of_tuples)]'}
score: 0.8575175828580934
{'intent': 'to convert a list of tuples `list_of_tuples` into list of lists', 'snippet': '[list(t) for t in zip(*list_of_tuples)]'}

1085. input: [(i, j) for i in range(1, 3) for j in range(1, 5)]
score: 0.7140567556669479
{'intent': 'get a list of tuples with multiple iterators using list comprehension', 'snippet': '[(i, j) for i in range(1, 3) for j in range(1, 5)]'}
score: 0.7140567556669479
{'intent': 'Get a list of tuples with multiple iterators using list comprehension', 'snippet': '[(i, j) for i in range(1, 3) for j in range(1, 5)]'}
score: 0.6566895920271811
{'intent': 'numpy list comprehension syntax', 'snippet': '[[X[i, j] for i in range(X.shape[0])] for j in range(x.shape[1])]'}

1086. input: ax.set_title('Normal way to plot')
score: 0.7872249439327432
{'intent': 'How to add title to subplots in Matplotlib?', 'snippet': "ax.set_title('Title for first plot')"}
score: 0.7872249439327432
{'intent': 'how to add title to subplots in matplotlib?', 'snippet': "ax.set_title('Title for first plot')"}
score: 0.7775479818660919
{'intent': 'how to add title to subplots in matplotlib?', 'snippet': "ax.set_title('Title for second plot')"}

1087. input: objects = ' and '.join(['{num} {obj}'.format(**item) for item in items])
score: 0.9374837055674333
{'intent': 'Building up a string using a list of values', 'snippet': "objects = ' and '.join(['{num} {obj}'.format(**item) for item in items])"}
score: 0.6684116437523453
{'intent': 'Get a string with string formatting from dictionary `d`', 'snippet': '""", """.join([\'{}_{}\'.format(k, v) for k, v in d.items()])'}
score: 0.6684116437523453
{'intent': 'get a string with string formatting from dictionary `d`', 'snippet': '""", """.join([\'{}_{}\'.format(k, v) for k, v in d.items()])'}

1088. input: python : how to append new elements in a list of list?
score: 0.9295511924056475
{'intent': 'Python : how to append new elements in a list of list?', 'snippet': '[1, 2, 3, 4]'}
score: 0.9295511924056475
{'intent': 'python : how to append new elements in a list of list?', 'snippet': '[1, 2, 3, 4]'}
score: 0.8898944475090416
{'intent': 'python : how to append new elements in a list of list?', 'snippet': '[[], [], []]'}

1089. input: create 3 by 3 matrix of random numbers
score: 0.8932394066503254
{'intent': 'create 3 by 3 matrix of random numbers', 'snippet': 'numpy.random.random((3, 3))'}
score: 0.8470779588665471
{'intent': 'Simple way to create matrix of random numbers', 'snippet': 'numpy.random.random((3, 3))'}
score: 0.8470779588665471
{'intent': 'simple way to create matrix of random numbers', 'snippet': 'numpy.random.random((3, 3))'}

1090. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

1091. input: convert unicode codepoint to utf8 hex in python
score: 0.8973964504479155
{'intent': 'Convert unicode codepoint to UTF8 hex in python', 'snippet': "chr(int('fd9b', 16)).encode('utf-8')"}
score: 0.8973964504479155
{'intent': 'Convert unicode codepoint to UTF8 hex in python', 'snippet': "chr(int('fd9b', 16)).encode('utf-8')"}
score: 0.8460790747494603
{'intent': 'convert unicode codepoint to utf8 hex', 'snippet': "chr(int('fd9b', 16)).encode('utf-8')"}

1092. input: get the number of values in list `j` that is greater than 5
score: 0.8779493871970503
{'intent': 'get the number of values in list `j` that is greater than 5', 'snippet': 'len([1 for i in j if (i > 5)])'}
score: 0.8743229725305165
{'intent': 'get the number of values in list `j` that is greater than 5', 'snippet': 'sum(((i > 5) for i in j))'}
score: 0.8743229725305165
{'intent': 'get the number of values in list `j` that is greater than 5', 'snippet': 'sum(((i > 5) for i in j))'}

1093. input: ftp.retrlines('LIST')
score: 0.8060179213615802
{'intent': 'How to download file from ftp?', 'snippet': "ftp.retrlines('LIST')"}
score: 0.560837999244004
{'intent': 'how to download a file via ftp with python ftplib', 'snippet': "ftp.retrbinary('RETR %s' % filename, file.write)"}
score: 0.560837999244004
{'intent': 'how to download a file via ftp with python ftplib', 'snippet': "ftp.retrbinary('RETR %s' % filename, file.write)"}

1094. input: root.mainloop()
score: 0.5809104914609731
{'intent': 'best way to structure a tkinter application', 'snippet': 'root.mainloop()'}
score: 0.5809104914609731
{'intent': 'Best way to structure a tkinter application', 'snippet': 'root.mainloop()'}
score: 0.5739967685208226
{'intent': 'tkinter: how to use after method', 'snippet': 'root.mainloop()'}

1095. input: google app engine python download file
score: 0.7967036933111901
{'intent': 'google app engine python download file', 'snippet': "self.response.headers['Content-Disposition'] = 'attachment; filename=fname.csv'"}
score: 0.7967036933111901
{'intent': 'google app engine python download file', 'snippet': "self.response.headers['Content-Disposition'] = 'attachment; filename=fname.csv'"}
score: 0.7878871693147806
{'intent': 'google app engine python download file', 'snippet': "self.response.out.write(','.join(['a', 'cool', 'test']))"}

1096. input: f = open('file_' + str(i) + '.dat', 'w')
score: 0.8292321481284313
{'intent': 'Creating a new file, filename contains loop variable, python', 'snippet': "f = open('file_' + str(i) + '.dat', 'w')"}
score: 0.7220412358988495
{'intent': 'write line to file', 'snippet': "f = open('myfile', 'w')\nf.write('hi there\\n')"}
score: 0.6877656078477331
{'intent': 'reading data blocks from a file in python', 'snippet': "f = open('file_name_here')"}

1097. input: running python code contained in a string
score: 0.8781989882453959
{'intent': 'Running Python code contained in a string', 'snippet': "print('hello')"}
score: 0.8781989882453959
{'intent': 'running python code contained in a string', 'snippet': "print('hello')"}
score: 0.7772398122169026
{'intent': 'Running Python code contained in a string', 'snippet': 'eval("print(\'Hello\')")'}

1098. input: url('^', include('sms.urls')),
score: 0.8034362689983223
{'intent': 'configure url in django properly', 'snippet': "url('^', include('sms.urls')),"}
score: 0.8034362689983223
{'intent': 'Configure url in django properly', 'snippet': "url('^', include('sms.urls')),"}
score: 0.7768189950463595
{'intent': 'Confirm urls in Django properly', 'snippet': "url('^$', include('sms.urls')),"}

1099. input: find same data in two dataframes of different shapes
score: 0.776845006395614
{'intent': 'Find same data in two DataFrames of different shapes', 'snippet': "c = pd.concat([df, df2], axis=1, keys=['df1', 'df2'])"}
score: 0.6126882894869916
{'intent': 'how to find values from one dataframe in another using pandas?', 'snippet': "print(pd.merge(df1, df2, on='B'))"}
score: 0.5962435963179582
{'intent': 'how to find values from one dataframe in another using pandas?', 'snippet': "print(pd.merge(df1, df2, on='B')['B'])"}

1100. input: np.asarray([1, 2, 3, 4], dtype=int)
score: 0.8105530980002997
{'intent': 'How to convert 2D float numpy array to 2D int numpy array?', 'snippet': 'np.asarray([1, 2, 3, 4], dtype=int)'}
score: 0.7097609953508932
{'intent': 'how does numpy infers dtype for array', 'snippet': 'np.array(12345678901234, dtype=np.int32)'}
score: 0.7097609953508932
{'intent': 'How does Numpy infers dtype for array', 'snippet': 'np.array(12345678901234, dtype=np.int32)'}

1101. input: df = df.ix[:, 0:2]
score: 0.7855251625621225
{'intent': 'remove column by index `[:, 0:2]` in dataframe `df`', 'snippet': 'df = df.ix[:, 0:2]'}
score: 0.7744624155385825
{'intent': 'Pandas remove column by index', 'snippet': 'df = df.ix[:, 0:2]'}
score: 0.7744624155385825
{'intent': 'pandas remove column by index', 'snippet': 'df = df.ix[:, 0:2]'}

1102. input: python: read hex from file into list?
score: 0.8962627340356583
{'intent': 'Python: Read hex from file into list?', 'snippet': "hex_list = ('{:02x}'.format(ord(c)) for c in fp.read())"}
score: 0.8962627340356583
{'intent': 'python: read hex from file into list?', 'snippet': "hex_list = ('{:02x}'.format(ord(c)) for c in fp.read())"}
score: 0.7636394031793908
{'intent': 'writing hex data into a file', 'snippet': 'f.write(hex(i))'}

1103. input: how to know the position of items in a python's ordered dictionary 
score: 0.9153679745207453
{'intent': "How to know the position of items in a Python's ordered dictionary ", 'snippet': "list(x.keys()).index('c')"}
score: 0.7561990858732636
{'intent': 'How do I iterate over a Python dictionary, ordered by values?', 'snippet': 'sorted(list(dictionary.items()), key=operator.itemgetter(1))'}
score: 0.7561990858732636
{'intent': 'How do I iterate over a Python dictionary, ordered by values?', 'snippet': 'sorted(list(dictionary.items()), key=operator.itemgetter(1))'}

1104. input: how can i edit a string that was printed to stdout?
score: 0.769150872975785
{'intent': 'How can I edit a string that was printed to stdout?', 'snippet': "sys.stdout.write('\\r28 seconds remaining')"}
score: 0.7086341320281022
{'intent': "in python, how to change text after it's printed?", 'snippet': "sys.stdout.write('hello')"}
score: 0.7086341320281022
{'intent': "In Python, how to change text after it's printed?", 'snippet': "sys.stdout.write('hello')"}

1105. input: how do you sort files numerically?
score: 0.8019503484014254
{'intent': 'How do you sort files numerically?', 'snippet': 'l.sort(key=alphanum_key)'}
score: 0.6337161276529722
{'intent': 'sorting files in a list', 'snippet': 'files.sort(key=file_number)'}
score: 0.6337161276529722
{'intent': 'Sorting files in a list', 'snippet': 'files.sort(key=file_number)'}

1106. input: round(32.268907563, 3)
score: 0.8276317867890121
{'intent': 'round number 32.268907563 up to 3 decimal points', 'snippet': 'round(32.268907563, 3)'}
score: 0.6804079221503904
{'intent': 'round number to nearest integer', 'snippet': 'round(32.268907563, 3)'}
score: 0.6490636135951212
{'intent': 'round number 4.0005 up to 3 decimal places', 'snippet': 'round(4.0005, 3)'}

1107. input: how can i compare a date and a datetime in python?
score: 0.9204339764138545
{'intent': 'How can I compare a date and a datetime in Python?', 'snippet': 'datetime.datetime(d.year, d.month, d.day)'}
score: 0.9204339764138545
{'intent': 'how can i compare a date and a datetime in python?', 'snippet': 'datetime.datetime(d.year, d.month, d.day)'}
score: 0.8344335663358521
{'intent': 'How can I compare a date and a datetime in Python?', 'snippet': 'from_date = from_date.replace(hour=0, minute=0, second=0, microsecond=0)'}

1108. input: print(''.join(map(str, data)))
score: 0.8968123807769923
{'intent': 'convert list `data` into a string of its elements', 'snippet': "print(''.join(map(str, data)))"}
score: 0.8414826094745107
{'intent': 'Python printing without commas', 'snippet': "print(' '.join(map(str, l)))"}
score: 0.831572104037652
{'intent': 'How to print a list with integers without the brackets, commas and no quotes?', 'snippet': "print(''.join(map(str, data)))"}

1109. input: """, """.join('%s(%.02f)' % (x, y) for x, y in tuplelist)
score: 0.950696001139222
{'intent': 'Turning tuples into a pairwise string', 'snippet': '""", """.join(\'%s(%.02f)\' % (x, y) for x, y in tuplelist)'}
score: 0.7095952202032794
{'intent': 'Converting lists of tuples to strings Python', 'snippet': '""" """.join([(\'%d@%d\' % t) for t in l])'}
score: 0.6900391603844145
{'intent': 'python - convert list of tuples to string', 'snippet': '""", """.join(map(str, tups))'}

1110. input: convert a list of strings `['1', '-1', '1']` to a list of numbers
score: 0.9062828788542172
{'intent': "convert a list of strings `['1', '-1', '1']` to a list of numbers", 'snippet': "map(int, ['1', '-1', '1'])"}
score: 0.8033790750429317
{'intent': 'python: how do i convert an array of strings to an array of numbers?', 'snippet': "map(int, ['1', '-1', '1'])"}
score: 0.8033790750429317
{'intent': 'Python: How do I convert an array of strings to an array of numbers?', 'snippet': "map(int, ['1', '-1', '1'])"}

1111. input: creating a list of dictionaries [{'a': 1, 'c': 4, 'b': 2, 'd': 4}, {'a': 1, 'c': 4, 'b': 1, 'd': 5}]
score: 0.9823397139481939
{'intent': "creating a list of dictionaries [{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]", 'snippet': "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]"}
score: 0.9640153785465269
{'intent': 'Creating a list of dictionaries in python', 'snippet': "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]"}
score: 0.9640153785465269
{'intent': 'creating a list of dictionaries in python', 'snippet': "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]"}

1112. input: re.findall('(?:A|B|C)D', 'BDE')
score: 0.8682718839698964
{'intent': "match regex pattern '((?:a|b|c)d)' on string 'bde'", 'snippet': "re.findall('((?:A|B|C)D)', 'BDE')"}
score: 0.8682718839698964
{'intent': "Match regex pattern '((?:A|B|C)D)' on string 'BDE'", 'snippet': "re.findall('((?:A|B|C)D)', 'BDE')"}
score: 0.8260837130628572
{'intent': 'python regex - ignore parenthesis as indexing?', 'snippet': "re.findall('((?:A|B|C)D)', 'BDE')"}

1113. input: pandas.concat([df1, df2], axis=1)
score: 0.8943489191260411
{'intent': 'concatenate two dataframes in pandas', 'snippet': 'pd.concat([df_a, df_b], axis=1)'}
score: 0.8808483200320653
{'intent': 'Combine two Pandas dataframes with the same index', 'snippet': 'pandas.concat([df1, df2], axis=1)'}
score: 0.8808483200320653
{'intent': 'Combine two Pandas dataframes with the same index', 'snippet': 'pandas.concat([df1, df2], axis=1)'}

1114. input: [item for item in a if sum(item) > 10]
score: 0.8419879867171128
{'intent': 'create a list containing elements of list `a` if the sum of the element is greater than 10', 'snippet': '[item for item in a if sum(item) > 10]'}
score: 0.7296946151600409
{'intent': 'filtering elements from list of lists in python?', 'snippet': '[item for item in a if sum(item) > 10]'}
score: 0.7296946151600409
{'intent': 'filtering elements from list of lists in Python?', 'snippet': '[item for item in a if sum(item) > 10]'}

1115. input: python app engine: how to save a image?
score: 0.9183773326157602
{'intent': 'Python app engine: how to save a image?', 'snippet': 'photo.put()'}
score: 0.8929831110220592
{'intent': 'Python app engine: how to save a image?', 'snippet': "self.response.out.write('Image not available')"}
score: 0.8929831110220592
{'intent': 'python app engine: how to save a image?', 'snippet': "self.response.out.write('Image not available')"}

1116. input: using python's datetime module, can i get the year that utc-11 is currently in?
score: 0.9461535561800912
{'intent': "Using Python's datetime module, can I get the year that UTC-11 is currently in?", 'snippet': '(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year'}
score: 0.9461535561800912
{'intent': "Using Python's datetime module, can I get the year that UTC-11 is currently in?", 'snippet': '(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year'}
score: 0.872267849697873
{'intent': "using python's datetime module, get the year that utc-11 is currently in", 'snippet': '(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year'}

1117. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

1118. input: save plot `plt` as png file 'filename.png'
score: 0.9710774270695375
{'intent': "Save plot `plt` as png file 'filename.png'", 'snippet': "plt.savefig('filename.png')"}
score: 0.7938747477120183
{'intent': 'Save matplotlib graph to image file `filename.png` at a resolution of `300 dpi`', 'snippet': "plt.savefig('filename.png', dpi=300)"}
score: 0.7938747477120183
{'intent': 'save matplotlib graph to image file `filename.png` at a resolution of `300 dpi`', 'snippet': "plt.savefig('filename.png', dpi=300)"}

1119. input: python sockets: enabling promiscuous mode in linux
score: 0.9226034391812832
{'intent': 'python sockets: enabling promiscuous mode in linux', 'snippet': 's = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)'}
score: 0.9226034391812832
{'intent': 'Python Sockets: Enabling Promiscuous Mode in Linux', 'snippet': 's = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)'}
score: 0.8298343008024949
{'intent': 'Python Sockets: Enabling Promiscuous Mode in Linux', 'snippet': 'fcntl.ioctl(s.fileno(), SIOCSIFFLAGS, ifr)'}

1120. input: how can i break up this long line in python?
score: 0.8670263201787339
{'intent': 'How can I break up this long line in Python?', 'snippet': "'This is the first line of my text, ' + 'which will be joined to a second.'"}
score: 0.8513675371042975
{'intent': 'how can i break up this long line in python?', 'snippet': '"""This is the first line of my text which will be joined to a second."""'}
score: 0.689307441256351
{'intent': 'Pythonic way to create a long multi-line string', 'snippet': "s = 'this is a verylong string toofor sure ...'"}

1121. input: df.sub(df.mean(axis=1), axis=0)
score: 0.8298958377570377
{'intent': "Subtract the mean of each row in dataframe `df` from the corresponding row's elements", 'snippet': 'df.sub(df.mean(axis=1), axis=0)'}
score: 0.8093590388128501
{'intent': 'Pandas: Subtract row mean from each element in row', 'snippet': 'df.sub(df.mean(axis=1), axis=0)'}
score: 0.8093590388128501
{'intent': 'Pandas: Subtract row mean from each element in row', 'snippet': 'df.sub(df.mean(axis=1), axis=0)'}

1122. input: extract attribute `my_attr` from each object in list `my_list`
score: 0.9586679538182754
{'intent': 'extract attribute `my_attr` from each object in list `my_list`', 'snippet': '[o.my_attr for o in my_list]'}
score: 0.8961612159487689
{'intent': 'How to extract from a list of objects a list of specific attribute?', 'snippet': '[o.my_attr for o in my_list]'}
score: 0.8961612159487689
{'intent': 'how to extract from a list of objects a list of specific attribute?', 'snippet': '[o.my_attr for o in my_list]'}

1123. input: how to sort tire sizes in python
score: 0.9372494832571246
{'intent': 'How to sort tire sizes in python', 'snippet': "['235', '40', '17']"}
score: 0.9277799614813345
{'intent': 'how to sort tire sizes in python', 'snippet': "['235/40/17', '285/30/18', '315/25/19', '275/30/19', '285/30/19']"}
score: 0.9277799614813345
{'intent': 'How to sort tire sizes in python', 'snippet': "['235/40/17', '285/30/18', '315/25/19', '275/30/19', '285/30/19']"}

1124. input: using tkinter in python to edit the title bar
score: 0.7721308984778025
{'intent': 'change tkinter frame title', 'snippet': 'root.mainloop()'}
score: 0.7395142725464255
{'intent': 'Notebook widget in Tkinter', 'snippet': "root.title('ttk.Notebook')"}
score: 0.6554930928278482
{'intent': 'how to add a scrollbar to a window with tkinter?', 'snippet': 'root.wm_title("Got Skills\' Skill Tracker")'}

1125. input: how do i combine two lists into a dictionary in python?
score: 0.7935093365216506
{'intent': 'How do I combine two lists into a dictionary in Python?', 'snippet': "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))"}
score: 0.7935093365216506
{'intent': 'How do I combine two lists into a dictionary in Python?', 'snippet': "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))"}
score: 0.7935093365216506
{'intent': 'how do i combine two lists into a dictionary in python?', 'snippet': "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))"}

1126. input: read file 'filename' line by line into a list `lines`
score: 0.9030039447553038
{'intent': "read file 'filename' line by line into a list `lines`", 'snippet': "with open('filename') as f:\n    lines = f.readlines()"}
score: 0.8751356425319111
{'intent': 'read a file line by line into a list', 'snippet': "with open('filename') as f:\n    lines = f.readlines()"}
score: 0.8572376780143414
{'intent': 'read a file line by line into a list', 'snippet': 'with open(fname) as f:\n    content = f.readlines()'}

1127. input: plt.savefig('scatter_line.png', dpi=80)
score: 0.8542617038050253
{'intent': 'How to draw line inside a scatter plot', 'snippet': "plt.savefig('scatter_line.png', dpi=80)"}
score: 0.8026172555502569
{'intent': 'Specifying and saving a figure with exact size in pixels', 'snippet': "plt.savefig('myfig.png', dpi=1000)"}
score: 0.8026172555502569
{'intent': 'specifying and saving a figure with exact size in pixels', 'snippet': "plt.savefig('myfig.png', dpi=1000)"}

1128. input: sorted(list(range(len(a))), key=lambda i: a[i])[-2:]
score: 0.8494613249057426
{'intent': 'get index of the biggest 2 values of a list `a`', 'snippet': 'sorted(list(range(len(a))), key=lambda i: a[i])[-2:]'}
score: 0.7877648013349712
{'intent': 'get index of the top n values of a list in python', 'snippet': 'sorted(list(range(len(a))), key=lambda i: a[i])[-2:]'}
score: 0.7877648013349712
{'intent': 'Get index of the top n values of a list in python', 'snippet': 'sorted(list(range(len(a))), key=lambda i: a[i])[-2:]'}

1129. input: how to strip all whitespace from string
score: 0.8332366718437675
{'intent': 'how to strip all whitespace from string', 'snippet': "s.replace(' ', '')"}
score: 0.8332366718437675
{'intent': 'How to strip all whitespace from string', 'snippet': "s.replace(' ', '')"}
score: 0.8302137675030619
{'intent': 'remove all whitespace in a string', 'snippet': 'sentence.strip()'}

1130. input: map(lambda x: func(*x), [[1, 2, 3], [4, 5, 6], [7, 8, 9]])
score: 0.7132800191044386
{'intent': 'How to do multiple arguments to map function where one remains the same in python?', 'snippet': 'map(lambda x: x + 2, [1, 2, 3])'}
score: 0.7132800191044386
{'intent': 'how to do multiple arguments to map function where one remains the same in python?', 'snippet': 'map(lambda x: x + 2, [1, 2, 3])'}
score: 0.663572559239246
{'intent': 'How to add an integer to each element in a list?', 'snippet': 'map(lambda x: x + 1, [1, 2, 3])'}

1131. input: len(set(list1).intersection(list2)) > 0
score: 0.8896919965020258
{'intent': 'Checking if any elements in one list are in another', 'snippet': 'len(set(list1).intersection(list2)) > 0'}
score: 0.8896919965020258
{'intent': 'Checking if any elements in one list are in another', 'snippet': 'len(set(list1).intersection(list2)) > 0'}
score: 0.8896919965020258
{'intent': 'checking if any elements in one list are in another', 'snippet': 'len(set(list1).intersection(list2)) > 0'}

1132. input: Orders.objects.filter(order_date__year=2010)
score: 0.7737533401548784
{'intent': 'Django database query: How to filter objects by date range?', 'snippet': "Sample.objects.filter(date__year='2011', date__month='01')"}
score: 0.7737533401548784
{'intent': 'django database query: how to filter objects by date range?', 'snippet': "Sample.objects.filter(date__year='2011', date__month='01')"}
score: 0.7737533401548784
{'intent': 'Django database query: How to filter objects by date range?', 'snippet': "Sample.objects.filter(date__year='2011', date__month='01')"}

1133. input: regex in python to find words that follow pattern: vowel, consonant, vowel, consonant
score: 0.8596551062827879
{'intent': 'Regex in Python to find words that follow pattern: vowel, consonant, vowel, consonant', 'snippet': '"""([bcdfghjklmnpqrstvwxz][aeiou])+"""'}
score: 0.836187773533105
{'intent': 'regex in python to find words that follow pattern: vowel, consonant, vowel, consonant', 'snippet': '"""([aeiou]+[bcdfghjklmnpqrstvwxz]+)+"""'}
score: 0.836187773533105
{'intent': 'Regex in Python to find words that follow pattern: vowel, consonant, vowel, consonant', 'snippet': '"""([aeiou]+[bcdfghjklmnpqrstvwxz]+)+"""'}

1134. input: numpy: broadcast multiplication over one common axis of two 2d arrays
score: 0.8374520619414797
{'intent': 'numpy: broadcast multiplication over one common axis of two 2d arrays', 'snippet': "np.einsum('ij,jk->ijk', A, B)"}
score: 0.7494009925200865
{'intent': 'multiplication of two 1-dimensional arrays  in numpy', 'snippet': 'np.outer(a, b)'}
score: 0.7494009925200865
{'intent': 'multiplication of two 1-dimensional arrays  in numpy', 'snippet': 'np.outer(a, b)'}

1135. input: how do i get the url of the active google chrome tab in windows?
score: 0.9170470452257191
{'intent': 'How do I get the URL of the active Google Chrome tab in Windows?', 'snippet': 'hwnd = win32gui.GetForegroundWindow()'}
score: 0.8844361914992724
{'intent': 'how do i get the url of the active google chrome tab in windows?', 'snippet': "omniboxHwnd = win32gui.FindWindowEx(hwnd, 0, 'Chrome_OmniboxView', None)"}
score: 0.5759723697800336
{'intent': 'how to open a url in python', 'snippet': 'webbrowser.open_new_tab(url)'}

1136. input: sort list `x` based on values from another list `y`
score: 0.8550981194138758
{'intent': 'sort list `X` based on values from another list `Y`', 'snippet': '[x for y, x in sorted(zip(Y, X))]'}
score: 0.8368396128303615
{'intent': "sorting list 'X' based on values from another list 'Y'", 'snippet': '[x for y, x in sorted(zip(Y, X))]'}
score: 0.8368396128303615
{'intent': "sorting list 'x' based on values from another list 'y'", 'snippet': '[x for y, x in sorted(zip(Y, X))]'}

1137. input: matplotlib savefig image size with bbox_inches='tight'
score: 0.9193445812852643
{'intent': "matplotlib savefig image size with bbox_inches='tight'", 'snippet': "plt.savefig('/tmp/test.png', dpi=200)"}
score: 0.810805063470529
{'intent': 'Removing white space around a saved image in matplotlib', 'snippet': "plt.savefig('test.png', bbox_inches='tight')"}
score: 0.810805063470529
{'intent': 'Removing white space around a saved image in matplotlib', 'snippet': "plt.savefig('test.png', bbox_inches='tight')"}

1138. input: interpolating one time series onto another in pandas
score: 0.8500236032498247
{'intent': 'Interpolating one time series onto another in pandas', 'snippet': 'pd.concat([data, ts]).sort_index().interpolate().reindex(ts.index)'}
score: 0.6117574634843912
{'intent': 'resampling within a pandas multiindex', 'snippet': "df['Date'] = pd.to_datetime(df['Date'])"}
score: 0.6117574634843912
{'intent': 'Resampling Within a Pandas MultiIndex', 'snippet': "df['Date'] = pd.to_datetime(df['Date'])"}

1139. input: [(x + y) for x, y in zip(first, second)]
score: 0.7821445533962536
{'intent': 'sum each element `x` in list `first` with element `y` at the same index in list `second`.', 'snippet': '[(x + y) for x, y in zip(first, second)]'}
score: 0.7821445533962536
{'intent': 'sum each element `x` in list `first` with element `y` at the same index in list `second`.', 'snippet': '[(x + y) for x, y in zip(first, second)]'}
score: 0.7474272706832633
{'intent': 'Mapping a string into a list of pairs', 'snippet': '[(x + y) for x, y in zip(word, word[1:])]'}

1140. input: persons = sorted(persons, key=lambda person: person['name'])
score: 0.8273503493262482
{'intent': 'How do I sort a key:list dictionary by values in list?', 'snippet': "persons = sorted(persons, key=lambda person: person['name'])"}
score: 0.7919612262121185
{'intent': "sort a list of dictionary `persons` according to the key `['passport']['birth_info']['date']`", 'snippet': "sorted(persons, key=lambda x: x['passport']['birth_info']['date'])"}
score: 0.7919612262121185
{'intent': "sort a list of dictionary `persons` according to the key `['passport']['birth_info']['date']`", 'snippet': "sorted(persons, key=lambda x: x['passport']['birth_info']['date'])"}

1141. input: time.sleep(4)
score: 0.6080748398921617
{'intent': 'make a time delay', 'snippet': 'time.sleep(5)'}
score: 0.5954389873277457
{'intent': 'delay for "5" seconds', 'snippet': 'time.sleep(5)'}
score: 0.5954389873277457
{'intent': 'delay for "5" seconds', 'snippet': 'time.sleep(5)'}

1142. input: result = db.engine.execute('<sql here>')
score: 0.7890859054316872
{'intent': 'How to execute raw SQL in SQLAlchemy-flask app', 'snippet': "result = db.engine.execute('<sql here>')"}
score: 0.7890859054316872
{'intent': 'How to execute raw SQL in SQLAlchemy-flask app', 'snippet': "result = db.engine.execute('<sql here>')"}
score: 0.7134770059864635
{'intent': "execute raw sql queue '<sql here>' in database `db` in sqlalchemy-flask app", 'snippet': "result = db.engine.execute('<sql here>')"}

1143. input: 'hiya\x00x\x00'.split('\x00', 1)[0]
score: 0.83069377854042
{'intent': 'Convert zero-padded bytes to UTF-8 string', 'snippet': "'hiya\\x00x\\x00'.split('\\x00', 1)[0]"}
score: 0.7067733479803333
{'intent': 'How to split a byte string into separate bytes in python', 'snippet': "['\\x00\\x00', '\\x00\\x00', '\\x00\\x00']"}
score: 0.6285531637725192
{'intent': 'split string "0,1,2" based on delimiter \',\'', 'snippet': '"""0,1,2""".split(\',\')'}

1144. input: df.groupby('Event').Status.value_counts().unstack().fillna(0)
score: 0.8252050393691052
{'intent': 'Use groupby in Pandas to count things in one column in comparison to another', 'snippet': "df.groupby('Event').Status.value_counts().unstack().fillna(0)"}
score: 0.7361792892020209
{'intent': 'Pandas: Counting unique values in a dataframe', 'snippet': 'd.stack().groupby(level=0).apply(pd.Series.value_counts).unstack().fillna(0)'}
score: 0.7361792892020209
{'intent': 'pandas: counting unique values in a dataframe', 'snippet': 'd.stack().groupby(level=0).apply(pd.Series.value_counts).unstack().fillna(0)'}

1145. input: [1, 2, 3, 4, 5, 6]
score: 0.6413714864809599
{'intent': 'splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6], [], []]'}
score: 0.6413714864809599
{'intent': 'Splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6], [], []]'}
score: 0.6408588038067851
{'intent': 'Splitting a list into uneven groups?', 'snippet': '[[1, 2], [3, 4, 5, 6]]'}

1146. input: tkinter adding line number to text widget
score: 0.9228430191501519
{'intent': 'Tkinter adding line number to text widget', 'snippet': 'root.mainloop()'}
score: 0.9228430191501519
{'intent': 'tkinter adding line number to text widget', 'snippet': 'root.mainloop()'}
score: 0.7956716450749024
{'intent': 'getting the total number of lines in a tkinter text widget?', 'snippet': "int(text_widget.index('end-1c').split('.')[0])"}

1147. input: terminate the program
score: 0.8817496360498124
{'intent': 'terminate the program', 'snippet': 'quit()'}
score: 0.8167806654331649
{'intent': 'terminate the program', 'snippet': 'sys.exit()'}
score: 0.8167806654331649
{'intent': 'terminate the program', 'snippet': 'sys.exit()'}

1148. input: group by multiple time units in pandas data frame
score: 0.8654968423504498
{'intent': 'group by multiple time units in pandas data frame', 'snippet': "dfts = df.set_index('date_time')"}
score: 0.8654968423504498
{'intent': 'Group by multiple time units in pandas data frame', 'snippet': "dfts = df.set_index('date_time')"}
score: 0.817276705669784
{'intent': 'group by multiple time units in pandas data frame', 'snippet': 'dfts.groupby(lambda x: x.year).std()'}

1149. input: how to get output of exe in python script?
score: 0.8885069180960833
{'intent': 'How to get output of exe in python script?', 'snippet': 'p1.communicate()[0]'}
score: 0.8885069180960833
{'intent': 'How to get output of exe in python script?', 'snippet': 'p1.communicate()[0]'}
score: 0.8351599526904798
{'intent': 'how to get output of exe in python script?', 'snippet': "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"}

1150. input: plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)), plt.title('Original')
score: 0.6583048813091693
{'intent': 'imshow(img, cmap=cm.gray) shows a white for 128 value', 'snippet': "plt.imshow(bg, cmap=plt.get_cmap('gray'), vmin=0, vmax=255)"}
score: 0.6583048813091693
{'intent': 'imshow(img, cmap=cm.gray) shows a white for 128 value', 'snippet': "plt.imshow(bg, cmap=plt.get_cmap('gray'), vmin=0, vmax=255)"}
score: 0.6082463492319482
{'intent': 'How do you count cars in OpenCV with Python?', 'snippet': "plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)), plt.title('Original')"}

1151. input: zipped.sort(key=lambda t: t[1])
score: 0.8933542033205468
{'intent': 'How do I sort a zipped list in Python?', 'snippet': 'zipped.sort(key=lambda t: t[1])'}
score: 0.8933542033205468
{'intent': 'How do I sort a zipped list in Python?', 'snippet': 'zipped.sort(key=lambda t: t[1])'}
score: 0.8747238436603757
{'intent': 'sort a zipped list `zipped` using lambda function', 'snippet': 'sorted(zipped, key=lambda x: x[1])'}

1152. input: python tuple trailing comma syntax rule
score: 0.8522276115045688
{'intent': 'Python tuple trailing comma syntax rule', 'snippet': "a = ['a', 'bc']"}
score: 0.6532828171194189
{'intent': 'How to convert comma-delimited string to list in Python?', 'snippet': 'print(tuple(my_list))'}
score: 0.6532828171194189
{'intent': 'how to convert comma-delimited string to list in python?', 'snippet': 'print(tuple(my_list))'}

1153. input: sys.stdout = sys.__stdout__
score: 0.7817623779048263
{'intent': 'Unable to restore stdout to original (only to terminal)', 'snippet': 'sys.stdout = sys.__stdout__'}
score: 0.7489782176242656
{'intent': 'Capture stdout from a script in Python', 'snippet': "sys.stdout.write('foobar')"}
score: 0.7111723245280877
{'intent': 'how can i capture the stdout output of a child process?', 'snippet': 'sys.stdout.flush()'}

1154. input: return HttpResponse(json.dumps(results), content_type='application/json')
score: 0.9067283659149522
{'intent': 'create a json response `response_data`', 'snippet': "return HttpResponse(json.dumps(response_data), content_type='application/json')"}
score: 0.9067283659149522
{'intent': 'create a json response `response_data`', 'snippet': "return HttpResponse(json.dumps(response_data), content_type='application/json')"}
score: 0.8456424169444352
{'intent': 'creating a json response using django and python', 'snippet': "return HttpResponse(json.dumps(response_data), content_type='application/json')"}

1155. input: sum elements at the same index of each list in list `lists`
score: 0.8525381301519592
{'intent': 'sum elements at the same index of each list in list `lists`', 'snippet': 'map(sum, zip(*lists))'}
score: 0.8335595255706465
{'intent': "Sum of sums of each list, in a list of lists named 'lists'.", 'snippet': 'sum(sum(x) for x in lists)'}
score: 0.8335595255706465
{'intent': "sum of sums of each list, in a list of lists named 'lists'.", 'snippet': 'sum(sum(x) for x in lists)'}

1156. input: """""".join(k for k, g in groupby(sorted('aaabcabccd')))
score: 0.5966737805289655
{'intent': "create a list of all unique characters in string 'aaabcabccd'", 'snippet': '"""""".join(list(OrderedDict.fromkeys(\'aaabcabccd\').keys()))'}
score: 0.5966737805289655
{'intent': "create a list of all unique characters in string 'aaabcabccd'", 'snippet': '"""""".join(list(OrderedDict.fromkeys(\'aaabcabccd\').keys()))'}
score: 0.5709384361412022
{'intent': 'pandas groupby: how to get a union of strings', 'snippet': "df.groupby('A')['C'].apply(lambda x: '{%s}' % ', '.join(x))"}

1157. input: yourdatetime.date() == datetime.today().date()
score: 0.898667183821041
{'intent': "check if date `yourdatetime` is equal to today's date", 'snippet': 'yourdatetime.date() == datetime.today().date()'}
score: 0.898667183821041
{'intent': "check if date `yourdatetime` is equal to today's date", 'snippet': 'yourdatetime.date() == datetime.today().date()'}
score: 0.7888723547765802
{'intent': 'How can I check if a date is the same day as datetime.today()?', 'snippet': 'yourdatetime.date() == datetime.today().date()'}

1158. input: how do you create a legend for a contour plot in matplotlib?
score: 0.9178631079437171
{'intent': 'How do you create a legend for a contour plot in matplotlib?', 'snippet': 'plt.show()'}
score: 0.8963503738125792
{'intent': 'How do you create a legend for a contour plot in matplotlib?', 'snippet': "plt.legend(loc='upper left')"}
score: 0.6978794358380751
{'intent': 'How do I write a Latex formula in the legend of a plot using Matplotlib inside a .py file?', 'snippet': 'ax.legend()'}

1159. input: [1, 2, 3, 2].index(2)
score: 0.7272781620909332
{'intent': 'Python: Find in list', 'snippet': '[1, 2, 3, 2].index(2)'}
score: 0.6570776125890379
{'intent': 'how to print out the indexes in a list with repetitive elements', 'snippet': '[1, 4, 5, 6, 7]'}
score: 0.6570776125890379
{'intent': 'How to print out the indexes in a list with repetitive elements', 'snippet': '[1, 4, 5, 6, 7]'}

1160. input: admin.site.register(YourModel, YourModelAdmin)
score: 0.5867478989773551
{'intent': 'django: faking a field in the admin interface?', 'snippet': 'admin.site.register(Foo, FooAdmin)'}
score: 0.5750522004408707
{'intent': 'create django admin intermediate page', 'snippet': 'admin.site.register(Person, PersonAdmin)'}
score: 0.5309661060135397
{'intent': 'indirect inline in django admin', 'snippet': 'admin.site.register(User, UserAdmin)'}

1161. input: vectorizer.get_feature_names()
score: 0.6807397861906329
{'intent': 'Using DictVectorizer with sklearn DecisionTreeClassifier', 'snippet': 'vectorizer.get_feature_names()'}
score: 0.4662596097438404
{'intent': 'Get all object attributes', 'snippet': 'print((obj.__dict__))'}
score: 0.4617488728621353
{'intent': 'how do i get the name from a named tuple in python?', 'snippet': 'ham.__class__.__name__'}

1162. input: parsing non-zero padded timestamps in python
score: 0.839307417610579
{'intent': 'Parsing non-zero padded timestamps in Python', 'snippet': "datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')"}
score: 0.839307417610579
{'intent': 'Parsing non-zero padded timestamps in Python', 'snippet': "datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')"}
score: 0.685117338792139
{'intent': 'In Python, how can I turn this format into a unix timestamp?', 'snippet': 'int(time.mktime(dt.timetuple()))'}

1163. input: how can i just list undocumented members with sphinx/autodoc?
score: 0.9338041549962327
{'intent': 'How can I just list undocumented members with sphinx/autodoc?', 'snippet': "autodoc_default_flags = ['members', 'undoc-members']"}
score: 0.4540513812011396
{'intent': 'Omit (or format) the value of a variable when documenting with Sphinx', 'snippet': "self.add_line('   :annotation: = ' + objrepr, '<autodoc>')"}
score: 0.4540513812011396
{'intent': 'omit (or format) the value of a variable when documenting with sphinx', 'snippet': "self.add_line('   :annotation: = ' + objrepr, '<autodoc>')"}

1164. input: df.query('111 <= B <= 500')
score: 0.7187305094719791
{'intent': 'How to query MultiIndex index columns values in pandas', 'snippet': "df.query('111 <= B <= 500')"}
score: 0.6854662163979218
{'intent': 'Selecting with complex criteria from pandas.DataFrame', 'snippet': "df['A'][(df['B'] > 50) & (df['C'] == 900)]"}
score: 0.6655659189276873
{'intent': 'how to query multiindex index columns values in pandas', 'snippet': "df.query('0 < A < 4 and 150 < B < 400')"}

1165. input: how to remove tags from a string in python using regular expressions? (not in html)
score: 0.8769786640051311
{'intent': 'How to remove tags from a string in python using regular expressions? (NOT in HTML)', 'snippet': "re.sub('<[^>]*>', '', mystring)"}
score: 0.8769786640051311
{'intent': 'How to remove tags from a string in python using regular expressions? (NOT in HTML)', 'snippet': "re.sub('<[^>]*>', '', mystring)"}
score: 0.8769786640051311
{'intent': 'how to remove tags from a string in python using regular expressions? (not in html)', 'snippet': "re.sub('<[^>]*>', '', mystring)"}

1166. input: s = s.replace('M', '')
score: 0.8733177639512877
{'intent': 'delete character "m" from a string `s` using python', 'snippet': "s = s.replace('M', '')"}
score: 0.8733177639512877
{'intent': 'Delete character "M" from a string `s` using python', 'snippet': "s = s.replace('M', '')"}
score: 0.8333436507691971
{'intent': 'How to delete a character from a string using python?', 'snippet': "s = s.replace('M', '')"}

1167. input: pandas.set_option('display.max_columns', None)
score: 0.8863642933157928
{'intent': 'Output data from all columns in a dataframe in pandas', 'snippet': "pandas.set_option('display.max_columns', None)"}
score: 0.8863642933157928
{'intent': 'Output data from all columns in a dataframe in pandas', 'snippet': "pandas.set_option('display.max_columns', None)"}
score: 0.8534292824901828
{'intent': 'display maximum output data of columns in dataframe `pandas` that will fit into the screen', 'snippet': "pandas.set_option('display.max_columns', None)"}

1168. input: how to make several plots on a single page using matplotlib?
score: 0.9284496703577984
{'intent': 'How to make several plots on a single page using matplotlib?', 'snippet': 'fig.add_subplot(111)'}
score: 0.9245064080556629
{'intent': 'How to make several plots on a single page using matplotlib?', 'snippet': 'fig.add_subplot(1, 1, 1)'}
score: 0.9245064080556629
{'intent': 'How to make several plots on a single page using matplotlib?', 'snippet': 'fig.add_subplot(1, 1, 1)'}

1169. input: pandas - changing the format of a data frame
score: 0.6382460183961319
{'intent': 'pandas: transforming the dataframegroupby object to desired format', 'snippet': 'df = df.reset_index()'}
score: 0.6382460183961319
{'intent': 'Pandas: transforming the DataFrameGroupBy object to desired format', 'snippet': 'df = df.reset_index()'}
score: 0.6348326353558535
{'intent': 'convert pandas dataframe to csv string', 'snippet': 'df.to_csv()'}

1170. input: A[[0, 1], [0, 1]]
score: 0.6982404030575363
{'intent': 'get element at index 0 of first row and element at index 1 of second row in array `A`', 'snippet': 'A[[0, 1], [0, 1]]'}
score: 0.6982404030575363
{'intent': 'get element at index 0 of first row and element at index 1 of second row in array `a`', 'snippet': 'A[[0, 1], [0, 1]]'}
score: 0.649280202938418
{'intent': 'Selecting specific column in each row from array', 'snippet': 'A[[0, 1], [0, 1]]'}

1171. input: os.setsid()
score: 0.6233071489798586
{'intent': 'Can I run a Python script as a service?', 'snippet': 'os.setsid()'}
score: 0.5319500738952335
{'intent': 'How do I get the Application ID at runtime', 'snippet': "os.environ['APPLICATION_ID']"}
score: 0.5319500738952335
{'intent': 'how do i get the application id at runtime', 'snippet': "os.environ['APPLICATION_ID']"}

1172. input: two values from one input in python?
score: 0.8188770465679538
{'intent': 'Two values from one input in python?', 'snippet': "var1, var2 = input('Enter two numbers here: ').split()"}
score: 0.8188770465679538
{'intent': 'two values from one input in python?', 'snippet': "var1, var2 = input('Enter two numbers here: ').split()"}
score: 0.8188770465679538
{'intent': 'Two values from one input in python?', 'snippet': "var1, var2 = input('Enter two numbers here: ').split()"}

1173. input: python get focused entry name
score: 0.8141673469180386
{'intent': 'Python get focused entry name', 'snippet': "print(('focus object class:', window2.focus_get().__class__))"}
score: 0.8141673469180386
{'intent': 'Python get focused entry name', 'snippet': "print(('focus object class:', window2.focus_get().__class__))"}
score: 0.6208702842881344
{'intent': 'get the widget which has currently the focus in tkinter instance `window2`', 'snippet': "print(('focus object class:', window2.focus_get().__class__))"}

1174. input: using matplotlib, how can i print something "actual size"?
score: 0.861217367102637
{'intent': 'Using matplotlib, how can I print something "actual size"?', 'snippet': "fig.savefig('ten_x_seven_cm.png', dpi=128)"}
score: 0.7331774264047947
{'intent': 'matplotlib, define size of a grid on a plot', 'snippet': 'plt.show()'}
score: 0.7331774264047947
{'intent': 'matplotlib, define size of a grid on a plot', 'snippet': 'plt.show()'}

1175. input: matplotlib.pyplot.show()
score: 0.8514951378729161
{'intent': 'scatter plot in matplotlib', 'snippet': 'matplotlib.pyplot.show()'}
score: 0.8514951378729161
{'intent': 'scatter plot in matplotlib', 'snippet': 'matplotlib.pyplot.show()'}
score: 0.8288024127192524
{'intent': 'How to show matplotlib plots in python', 'snippet': 'plt.show()'}

1176. input: how to check if string is a pangram?
score: 0.8009927725486639
{'intent': 'How to check if string is a pangram?', 'snippet': "is_pangram = lambda s: not set('abcdefghijklmnopqrstuvwxyz') - set(s.lower())"}
score: 0.8009927725486639
{'intent': 'how to check if string is a pangram?', 'snippet': "is_pangram = lambda s: not set('abcdefghijklmnopqrstuvwxyz') - set(s.lower())"}
score: 0.5028206174121427
{'intent': 'check if string `string` starts with a number', 'snippet': 'string[0].isdigit()'}

1177. input: removing json property in array of objects with python
score: 0.8470605304444694
{'intent': 'Removing JSON property in array of objects with Python', 'snippet': "[item for item in data if not item['imageData']]"}
score: 0.7119406653238324
{'intent': 'Convert JSON array `array` to Python object', 'snippet': 'data = json.loads(array)'}
score: 0.7119406653238324
{'intent': 'Convert JSON array `array` to Python object', 'snippet': 'data = json.loads(array)'}

1178. input: how do i zip keys with individual values in my lists in python?
score: 0.8833231180915574
{'intent': 'How do I zip keys with individual values in my lists in python?', 'snippet': '[dict(zip(k, x)) for x in v]'}
score: 0.8833231180915574
{'intent': 'How do I zip keys with individual values in my lists in python?', 'snippet': '[dict(zip(k, x)) for x in v]'}
score: 0.8121365064655901
{'intent': 'add items to a dictionary of lists', 'snippet': 'print(dict(zip(keys, [list(i) for i in zip(*data)])))'}

1179. input: get the date 6 months from today
score: 0.7961872635690054
{'intent': 'get the date 6 months from today', 'snippet': 'six_months = (date.today() + relativedelta(months=(+ 6)))'}
score: 0.7352672740009816
{'intent': 'How do I calculate the date six months from the current date', 'snippet': 'six_months = (date.today() + relativedelta(months=(+ 6)))'}
score: 0.7151920919234038
{'intent': 'calculate the date six months from the current date', 'snippet': 'print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())'}

1180. input: plt.show()
score: 0.5945757646595553
{'intent': 'how to maximize a plt.show() window using python', 'snippet': 'plt.show()'}
score: 0.5945757646595553
{'intent': 'How to maximize a plt.show() window using Python', 'snippet': 'plt.show()'}
score: 0.5873936843071983
{'intent': 'using show() and close() from matplotlib', 'snippet': 'plt.show()'}

1181. input: how to merge two python dictionaries in a single expression?
score: 0.8702732856398723
{'intent': 'How to merge two Python dictionaries in a single expression?', 'snippet': 'z = merge_two_dicts(x, y)'}
score: 0.8702732856398723
{'intent': 'how to merge two python dictionaries in a single expression?', 'snippet': 'z = merge_two_dicts(x, y)'}
score: 0.858166761057937
{'intent': 'How to merge two Python dictionaries in a single expression?', 'snippet': 'c = dict(list(a.items()) + list(b.items()))'}

1182. input: boxes = [(0, gp1), (0, gp2), (1, gp3), (1, gp4), (0, gp5)]
score: 0.7167329978352815
{'intent': 'What is the most effective way to incremente a large number of values in Python?', 'snippet': 'boxes = [(0, gp1), (0, gp2), (1, gp3), (1, gp4), (0, gp5)]'}
score: 0.4943409926703547
{'intent': 'organizing list of tuples', 'snippet': '[(1, 4), (4, 8), (8, 10)]'}
score: 0.4943409926703547
{'intent': 'Organizing list of tuples', 'snippet': '[(1, 4), (4, 8), (8, 10)]'}

1183. input: how do i release memory used by a pandas dataframe?
score: 0.9560847069604852
{'intent': 'How do I release memory used by a pandas dataframe?', 'snippet': 'df.info()'}
score: 0.9362321172621905
{'intent': 'How do I release memory used by a pandas dataframe?', 'snippet': 'df.dtypes'}
score: 0.9362321172621905
{'intent': 'how do i release memory used by a pandas dataframe?', 'snippet': 'df.dtypes'}

1184. input: s.rfind('l')
score: 0.6088992929888924
{'intent': 'Find index of last occurrence of a substring in a string', 'snippet': "s.rfind('l')"}
score: 0.5124231881691539
{'intent': 'Find last occurrence of character', 'snippet': "'abcd}def}'.rfind('}')"}
score: 0.5073822824668051
{'intent': 'python - how to cut a string in python?', 'snippet': "s[:s.rfind('&')]"}

1185. input: imtag = re.match('<img.*?>', line).group(0)
score: 0.8640130899266252
{'intent': "return a string from a regex match with pattern '<img.*?>' in string 'line'", 'snippet': "imtag = re.match('<img.*?>', line).group(0)"}
score: 0.8558845579494967
{'intent': 'how do i return a string from a regex match in python', 'snippet': "imtag = re.match('<img.*?>', line).group(0)"}
score: 0.8558845579494967
{'intent': 'how do i return a string from a regex match in python', 'snippet': "imtag = re.match('<img.*?>', line).group(0)"}

1186. input: setattr(foo, key, value)
score: 0.6808841382616191
{'intent': 'How do you programmatically set an attribute in Python?', 'snippet': "setattr(x, attr, 'magic')"}
score: 0.6808841382616191
{'intent': 'how do you programmatically set an attribute in python?', 'snippet': "setattr(x, attr, 'magic')"}
score: 0.6467081576737326
{'intent': "How do I update an object's members using a dict?", 'snippet': 'setattr(foo, key, value)'}

1187. input: how to exclude a character from a regex group?
score: 0.7979990747784194
{'intent': 'How to exclude a character from a regex group?', 'snippet': "re.compile('[^a-zA-Z0-9-]+')"}
score: 0.7979990747784194
{'intent': 'How to exclude a character from a regex group?', 'snippet': "re.compile('[^a-zA-Z0-9-]+')"}
score: 0.7979990747784194
{'intent': 'how to exclude a character from a regex group?', 'snippet': "re.compile('[^a-zA-Z0-9-]+')"}

1188. input: is there a list of line styles in matplotlib?
score: 0.9341123940184938
{'intent': 'Is there a list of line styles in matplotlib?', 'snippet': "['', ' ', 'None', '--', '-.', '-', ':']"}
score: 0.6528099755228152
{'intent': 'python seaborn matplotlib setting line style as legend', 'snippet': 'plt.show()'}
score: 0.6528099755228152
{'intent': 'Python Seaborn Matplotlib setting line style as legend', 'snippet': 'plt.show()'}

1189. input: """-""".join(a + b for a, b in zip(s[::2], s[1::2]))
score: 0.8467853504905288
{'intent': 'Insert a character `-` after every two elements in a string `s`', 'snippet': '"""-""".join(a + b for a, b in zip(s[::2], s[1::2]))'}
score: 0.8134526629096296
{'intent': 'Pythonic way to insert every 2 elements in a string', 'snippet': '"""-""".join(a + b for a, b in zip(s[::2], s[1::2]))'}
score: 0.8134526629096296
{'intent': 'Pythonic way to insert every 2 elements in a string', 'snippet': '"""-""".join(a + b for a, b in zip(s[::2], s[1::2]))'}

1190. input: pandas hdfstore of multiindex dataframes: how to efficiently get all indexes
score: 0.9371244064721383
{'intent': 'Pandas HDFStore of MultiIndex DataFrames: how to efficiently get all indexes', 'snippet': "store.select('df', columns=['A'])"}
score: 0.6823589715108682
{'intent': 'coverting index into multiindex (hierachical index) in pandas', 'snippet': "df.index = pd.MultiIndex.from_tuples(df.index.str.split('|').tolist())"}
score: 0.6775355565734136
{'intent': 'How to query MultiIndex index columns values in pandas', 'snippet': "result_df.index.get_level_values('A')"}

1191. input: plt.ylabel('Response')
score: 0.6729404655832893
{'intent': 'How do I plot multiple X or Y axes in matplotlib?', 'snippet': "plt.ylabel('Response')"}
score: 0.557959991184132
{'intent': 'adding a y-axis label to secondary y-axis in matplotlib', 'snippet': 'plt.show()'}
score: 0.557959991184132
{'intent': 'Adding a y-axis label to secondary y-axis in matplotlib', 'snippet': 'plt.show()'}

1192. input: extract day of year and julian day from a string date in python
score: 0.8445298326476874
{'intent': 'Extract day of year and Julian day from a string date in python', 'snippet': 'sum(jdcal.gcal2jd(dt.year, dt.month, dt.day))'}
score: 0.8216427392245562
{'intent': 'Extract day of year and Julian day from a string date in python', 'snippet': 'int(sum(jdcal.gcal2jd(dt.year, dt.month, dt.day)))'}
score: 0.8216427392245562
{'intent': 'extract day of year and julian day from a string date in python', 'snippet': 'int(sum(jdcal.gcal2jd(dt.year, dt.month, dt.day)))'}

1193. input: how do i sort a list with "nones last"
score: 0.8411403477341517
{'intent': 'How do I sort a list with "Nones last"', 'snippet': '[(False, 0), (False, 1), (False, 2), (False, 3), (False, 4), (True, None)]'}
score: 0.8233486912274918
{'intent': 'how do i sort a list with "nones last"', 'snippet': "sorted(lis, key=lambda a: Infinity() if a['name'] is None else a['name'])"}
score: 0.7849602991591216
{'intent': 'How do I sort a list with "Nones last"', 'snippet': "groups = sorted(groups, key=lambda a: (a['name'] is None, a['name']))"}

1194. input: j = np.array(j)
sum((j > i))
score: 0.8245374053301414
{'intent': 'get the number of values in list `j` that is greater than `i`', 'snippet': 'j = np.array(j)\nsum((j > i))'}
score: 0.7881304788831269
{'intent': 'number of values in a list greater than a certain number', 'snippet': 'j = np.array(j)\nsum((j > i))'}
score: 0.7846836044142723
{'intent': 'multiply array `a` and array `b`respective elements then sum each row of the new array', 'snippet': "np.einsum('ji,i->j', a, b)"}

1195. input: re.findall(' +|[^ ]+', s)
score: 0.8154421420266065
{'intent': 're.split with spaces in python', 'snippet': "re.findall(' +|[^ ]+', s)"}
score: 0.7175029048644056
{'intent': 'python regex findall', 'snippet': "re.findall('\\\\[P\\\\]\\\\s?(.+?)\\\\s?\\\\[\\\\/P\\\\]', line)"}
score: 0.7175029048644056
{'intent': 'Python regex findall', 'snippet': "re.findall('\\\\[P\\\\]\\\\s?(.+?)\\\\s?\\\\[\\\\/P\\\\]', line)"}

1196. input: dict['Apple']['American']
score: 0.8461623109787879
{'intent': 'accessing elements of python dictionary', 'snippet': "dict['Apple']['American']"}
score: 0.8461623109787879
{'intent': 'Accessing elements of python dictionary', 'snippet': "dict['Apple']['American']"}
score: 0.8461623109787879
{'intent': 'Accessing elements of python dictionary', 'snippet': "dict['Apple']['American']"}

1197. input: divide the values of two dictionaries in python
score: 0.8430775918405495
{'intent': 'Divide the values of two dictionaries in python', 'snippet': '{k: (float(d2[k]) / d1[k]) for k in d1.keys() & d2}'}
score: 0.8425353590443964
{'intent': 'divide the values of two dictionaries in python', 'snippet': '{k: (float(d2[k]) / d1[k]) for k in d2}'}
score: 0.8425353590443964
{'intent': 'Divide the values of two dictionaries in python', 'snippet': '{k: (float(d2[k]) / d1[k]) for k in d2}'}

1198. input: ['this', 'day', 'is']
score: 0.4488371877869532
{'intent': 'Return a list of weekdays', 'snippet': "weekdays('Wednesday')"}
score: 0.4488371877869532
{'intent': 'return a list of weekdays', 'snippet': "weekdays('Wednesday')"}
score: 0.4396558500188015
{'intent': 'Return a list of weekdays', 'snippet': "print(weekdays('Wednesday'))"}

1199. input: print('\n'.join(''.join(s) for s in something))
score: 0.7992246908528927
{'intent': 'print list of items `myList`', 'snippet': "print('\\n'.join(str(p) for p in myList))"}
score: 0.7992246908528927
{'intent': 'print list of items `mylist`', 'snippet': "print('\\n'.join(str(p) for p in myList))"}
score: 0.7929168898086693
{'intent': 'Pythonic way to print list items', 'snippet': "print('\\n'.join(str(p) for p in myList))"}

1200. input: get current script directory
score: 0.7650843367093187
{'intent': 'get current script directory', 'snippet': 'os.path.dirname(os.path.abspath(__file__))'}
score: 0.709612664664566
{'intent': 'get parent of current directory from python script', 'snippet': 'd = os.path.dirname(os.getcwd())'}
score: 0.6997392242774547
{'intent': "how can i find script's directory with python?", 'snippet': 'return os.path.dirname(os.path.realpath(sys.argv[0]))'}

1201. input: subprocess.call(['python', './script.py'], stdout=output)
score: 0.8749875826977376
{'intent': 'How to execute a python script and write output to txt file?', 'snippet': "subprocess.call(['python', './script.py'], stdout=output)"}
score: 0.8498011885517809
{'intent': 'how can i call a python script from a python script', 'snippet': 'p = subprocess.Popen(cmd, stdout=sys.stdout, stderr=sys.stderr)'}
score: 0.8498011885517809
{'intent': 'How can I call a python script from a python script', 'snippet': 'p = subprocess.Popen(cmd, stdout=sys.stdout, stderr=sys.stderr)'}

1202. input: format() in python regex
score: 0.7494605111563655
{'intent': "Python: String formatting a regex string that uses both '%' and '{' as characters", 'snippet': '"""([0-9]{{1,3}}[%])([{0}]?)""".format(config.SERIES)'}
score: 0.7494605111563655
{'intent': "python: string formatting a regex string that uses both '%' and '{' as characters", 'snippet': '"""([0-9]{{1,3}}[%])([{0}]?)""".format(config.SERIES)'}
score: 0.7435991940866025
{'intent': 'Format() in Python Regex', 'snippet': '"""{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter""".format(\'b\', \'a\')'}

1203. input: df['date_column'] = pd.to_datetime(df['date_column'])
score: 0.8909401653418435
{'intent': 'convert dataframe column type from string to datetime', 'snippet': "df['col'] = pd.to_datetime(df['col'])"}
score: 0.8909401653418435
{'intent': 'Convert DataFrame column type from string to datetime', 'snippet': "df['col'] = pd.to_datetime(df['col'])"}
score: 0.8909401653418435
{'intent': 'Convert DataFrame column type from string to datetime', 'snippet': "df['col'] = pd.to_datetime(df['col'])"}

1204. input: sys.exit(0)
score: 0.8665752465729155
{'intent': 'exit script', 'snippet': 'sys.exit()'}
score: 0.8665752465729155
{'intent': 'Exit script', 'snippet': 'sys.exit()'}
score: 0.8582630992062408
{'intent': 'properly quit a program', 'snippet': 'sys.exit(0)'}

1205. input: concatenate sequence of numpy arrays  `list` into a one dimensional array along the first axis
score: 0.9564224356916987
{'intent': 'concatenate sequence of numpy arrays  `LIST` into a one dimensional array along the first axis', 'snippet': 'numpy.concatenate(LIST, axis=0)'}
score: 0.8369034907044276
{'intent': 'How to convert list of numpy arrays into single numpy array?', 'snippet': 'numpy.concatenate(LIST, axis=0)'}
score: 0.8369034907044276
{'intent': 'How to convert list of numpy arrays into single numpy array?', 'snippet': 'numpy.concatenate(LIST, axis=0)'}

1206. input: how to annotate a range of the x axis in matplotlib?
score: 0.8669282653158557
{'intent': 'How to annotate a range of the x axis in matplotlib?', 'snippet': "ax.annotate('important\\npart', xy=(5, 1.5), ha='center', va='center')"}
score: 0.7616790512005043
{'intent': 'Matplotlib/pyplot: How to enforce axis range?', 'snippet': 'fig.show()'}
score: 0.7418096635859719
{'intent': 'python matplotlib - how to specify values on y axis?', 'snippet': 'plt.plot(x, y)'}

1207. input: df.sort('count', ascending=False).groupby('Mt', as_index=False).first()
score: 0.8076996619029568
{'intent': 'Extract row with maximum value in a group pandas dataframe', 'snippet': "df.sort('count', ascending=False).groupby('Mt', as_index=False).first()"}
score: 0.7382141742450854
{'intent': 'python : getting the row which has the max value in groups using groupby', 'snippet': "df.groupby(['Mt'], sort=False)['count'].max()"}
score: 0.7370015624780621
{'intent': 'how to remove duplicates from a dataframe?', 'snippet': "df.sort_values(by=['a', 'b']).groupby(df.a).first()[['b']].reset_index()"}

1208. input: df.ix[df['A'].idxmax()]
score: 0.8372674693016537
{'intent': 'Pandas DataFrame - Find row where values for column is maximal', 'snippet': "df.ix[df['A'].idxmax()]"}
score: 0.7683402032268454
{'intent': 'Find maximum value of a column and return the corresponding row values using Pandas', 'snippet': "df.loc[df['Value'].idxmax()]"}
score: 0.7683402032268454
{'intent': 'find maximum value of a column and return the corresponding row values using pandas', 'snippet': "df.loc[df['Value'].idxmax()]"}

1209. input: map two lists `keys` and `values` into a dictionary
score: 0.8414686113245637
{'intent': 'map two lists `keys` and `values` into a dictionary', 'snippet': 'dict((k, v) for k, v in zip(keys, values))'}
score: 0.8414686113245637
{'intent': 'map two lists `keys` and `values` into a dictionary', 'snippet': 'dict((k, v) for k, v in zip(keys, values))'}
score: 0.8305285515706273
{'intent': 'map two lists `keys` and `values` into a dictionary', 'snippet': 'new_dict = {k: v for k, v in zip(keys, values)}'}

1210. input: isinstance(now, datetime.datetime)
score: 0.7337009815994836
{'intent': 'current time', 'snippet': 't = datetime.datetime.now()'}
score: 0.7160256874160726
{'intent': 'get current time', 'snippet': 'datetime.datetime.now()'}
score: 0.7079947259462804
{'intent': 'get current date and time', 'snippet': 'datetime.datetime.now()'}

1211. input: return values for column `c` after group by on column `a` and `b` in dataframe `df`
score: 0.8306949781702491
{'intent': 'Return values for column `C` after group by on column `A` and `B` in dataframe `df`', 'snippet': "df.groupby(['A', 'B'])['C'].unique()"}
score: 0.6830531050989718
{'intent': "get data of column 'a' and column 'b' in dataframe `df` where column 'a' is equal to 'foo'", 'snippet': "df.loc[gb.groups['foo'], ('A', 'B')]"}
score: 0.6830531050989718
{'intent': "get data of column 'A' and column 'B' in dataframe `df` where column 'A' is equal to 'foo'", 'snippet': "df.loc[gb.groups['foo'], ('A', 'B')]"}

1212. input: matplotlib: how to put individual tags for a scatter plot
score: 0.9259094217917245
{'intent': 'Matplotlib: How to put individual tags for a scatter plot', 'snippet': 'plt.show()'}
score: 0.6815538193763084
{'intent': 'scatter plot in matplotlib', 'snippet': 'matplotlib.pyplot.show()'}
score: 0.6815538193763084
{'intent': 'scatter plot in matplotlib', 'snippet': 'matplotlib.pyplot.show()'}

1213. input: numpy.nonzero(m.mask)
score: 0.7363544044395336
{'intent': 'Finding missing values in a numpy array', 'snippet': 'numpy.nonzero(m.mask)'}
score: 0.6854998078921724
{'intent': 'Finding missing values in a numpy array', 'snippet': 'm[m.mask]'}
score: 0.6854998078921724
{'intent': 'finding missing values in a numpy array', 'snippet': 'm[m.mask]'}

1214. input: v = df['value'].dropna()
score: 0.7206685876812089
{'intent': 'Pandas dropna - store dropped rows', 'snippet': "df.dropna(subset=['col2', 'col3'])"}
score: 0.7206685876812089
{'intent': 'pandas dropna - store dropped rows', 'snippet': "df.dropna(subset=['col2', 'col3'])"}
score: 0.713902906985279
{'intent': 'How to drop rows of Pandas DataFrame whose value in certain columns is NaN', 'snippet': 'df.dropna(subset=[1])'}

1215. input: plotting a 2d array with matplotlib
score: 0.8678662230896239
{'intent': 'plotting a 2d array with matplotlib', 'snippet': 'plt.show()'}
score: 0.8080074820915553
{'intent': 'Plotting a 2D Array with Matplotlib', 'snippet': 'ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.jet)'}
score: 0.7161084080138208
{'intent': 'Plotting a 2D Array with Matplotlib', 'snippet': "ax.set_zlabel('$V(\\\\phi)$')"}

1216. input: print(root.xpath("//article[@type='news']/content/text()"))
score: 0.8213859699512513
{'intent': 'finding elements by attribute with lxml', 'snippet': 'print(root.xpath("//article[@type=\'news\']/content/text()"))'}
score: 0.6369505191027209
{'intent': "find the element that holds string 'TEXT A' in file `root`", 'snippet': 'e = root.xpath(\'.//a[text()="TEXT A"]\')'}
score: 0.6369505191027209
{'intent': "find the element that holds string 'text a' in file `root`", 'snippet': 'e = root.xpath(\'.//a[text()="TEXT A"]\')'}

1217. input: copy list `old_list` as `new_list`
score: 0.9609720178073586
{'intent': 'copy list `old_list` as `new_list`', 'snippet': 'new_list = list(old_list)'}
score: 0.9534788916979092
{'intent': 'copy list `old_list` as `new_list`', 'snippet': 'new_list = old_list[:]'}
score: 0.9534788916979092
{'intent': 'copy list `old_list` as `new_list`', 'snippet': 'new_list = old_list[:]'}

1218. input: advanced input in python
score: 0.5971207846936855
{'intent': 'pipe input to python program and later get input from user', 'snippet': "a = input('Prompt: ')"}
score: 0.5784806844457859
{'intent': 'how can i read inputs as integers in python?', 'snippet': "y = int(eval(input('Enter a number: ')))"}
score: 0.5759800726048836
{'intent': 'print "please enter something: " to console, and read user input to `var`', 'snippet': "var = input('Please enter something: ')"}

1219. input: a = [(b + 4 if b < 0 else b) for b in a]
score: 0.7599109596832035
{'intent': 'modify list element with list comprehension in python', 'snippet': 'a = [(b + 4 if b < 0 else b) for b in a]'}
score: 0.5335272832583005
{'intent': 'create a list containing the indices of elements greater than 4 in list `a`', 'snippet': '[i for i, v in enumerate(a) if v > 4]'}
score: 0.5335272832583005
{'intent': 'create a list containing the indices of elements greater than 4 in list `a`', 'snippet': '[i for i, v in enumerate(a) if v > 4]'}

1220. input: text_file.close()
score: 0.8161323083967642
{'intent': 'Writing to a file in a for loop', 'snippet': 'text_file.close()'}
score: 0.8158053082668788
{'intent': 'Python Print String To Text File', 'snippet': 'text_file.close()'}
score: 0.7211387103778137
{'intent': 'how to read the entire file into a list in python?', 'snippet': 'text_file.close()'}

1221. input: get all the values from a numpy array `a` excluding index 3
score: 0.8996084019670697
{'intent': 'get all the values from a numpy array `a` excluding index 3', 'snippet': 'a[np.arange(len(a)) != 3]'}
score: 0.8890718473003038
{'intent': 'how to get all the values from a numpy array excluding a certain index?', 'snippet': 'a[np.arange(len(a)) != 3]'}
score: 0.8890718473003038
{'intent': 'how to get all the values from a numpy array excluding a certain index?', 'snippet': 'a[np.arange(len(a)) != 3]'}

1222. input: how to print unicode character in python?
score: 0.8627915035549795
{'intent': 'How to print Unicode character in Python?', 'snippet': "print('\\u2713')"}
score: 0.845789320533603
{'intent': 'How to print Unicode character in Python?', 'snippet': "print('\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f')"}
score: 0.845789320533603
{'intent': 'how to print unicode character in python?', 'snippet': "print('\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f')"}

1223. input: how to use lxml to find an element by text?
score: 0.8601759025674949
{'intent': 'How to use lxml to find an element by text?', 'snippet': 'e = root.xpath(\'.//a[text()="TEXT A"]\')'}
score: 0.8601759025674949
{'intent': 'How to use lxml to find an element by text?', 'snippet': 'e = root.xpath(\'.//a[text()="TEXT A"]\')'}
score: 0.8584390143265428
{'intent': 'how to use lxml to find an element by text?', 'snippet': 'e = root.xpath(\'.//a[contains(text(),"TEXT A")]\')'}

1224. input: Book.objects.filter(author__id=1).filter(author__id=2)
score: 0.9310422869134398
{'intent': 'Filter Django objects by `author` with ids `1` and `2`', 'snippet': 'Book.objects.filter(author__id=1).filter(author__id=2)'}
score: 0.9310422869134398
{'intent': 'filter django objects by `author` with ids `1` and `2`', 'snippet': 'Book.objects.filter(author__id=1).filter(author__id=2)'}
score: 0.8633278267847443
{'intent': 'How to do many-to-many Django query to find book with 2 given authors?', 'snippet': 'Book.objects.filter(author__id=1).filter(author__id=2)'}

1225. input: data.decode('latin-1').encode('utf-8')
score: 0.8540099318597192
{'intent': 'python - convert binary data to utf-8', 'snippet': "data.decode('latin-1').encode('utf-8')"}
score: 0.8529379421000818
{'intent': 'how to convert encoding in python?', 'snippet': "data.decode('utf8').encode('latin1').decode('gb2312')"}
score: 0.7823508586541497
{'intent': 'Python Convert Unicode-Hex utf-8 strings to Unicode strings', 'snippet': "s.encode('latin-1').decode('utf8')"}

1226. input: remove extra white spaces & tabs from a string `s`
score: 0.8157062440224854
{'intent': 'remove extra white spaces & tabs from a string `s`', 'snippet': '""" """.join(s.split())'}
score: 0.7630019131621099
{'intent': 'trim whitespaces (including tabs) in string `s`', 'snippet': "print(re.sub('[\\\\s+]', '', s))"}
score: 0.7630019131621099
{'intent': 'trim whitespaces (including tabs) in string `s`', 'snippet': "print(re.sub('[\\\\s+]', '', s))"}

1227. input: list(itertools.product(*a))
score: 0.8828803698279142
{'intent': 'All combinations of a list of lists', 'snippet': 'list(itertools.product(*a))'}
score: 0.8828803698279142
{'intent': 'All combinations of a list of lists', 'snippet': 'list(itertools.product(*a))'}
score: 0.8828803698279142
{'intent': 'all combinations of a list of lists', 'snippet': 'list(itertools.product(*a))'}

1228. input: removing trailing zeros in python
score: 0.8832215387439979
{'intent': 'removing trailing zeros in python', 'snippet': "int('0000')"}
score: 0.8832215387439979
{'intent': 'Removing Trailing Zeros in Python', 'snippet': "int('0000')"}
score: 0.8654201311946482
{'intent': 'how to remove leading and trailing zeros in a string? python', 'snippet': "your_string.strip('0')"}

1229. input: re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]
score: 0.849483180335554
{'intent': 'Finding recurring patterns in a string', 'snippet': "re.findall('^(.+?)((.+)\\\\3+)$', '42344343434')[0][:-1]"}
score: 0.849483180335554
{'intent': 'Finding recurring patterns in a string', 'snippet': "re.findall('^(.+?)((.+)\\\\3+)$', '42344343434')[0][:-1]"}
score: 0.849483180335554
{'intent': 'finding recurring patterns in a string', 'snippet': "re.findall('^(.+?)((.+)\\\\3+)$', '42344343434')[0][:-1]"}

1230. input: numpy index, get bands of width 2
score: 0.800958292937747
{'intent': 'Numpy index, get bands of width 2', 'snippet': 'test.reshape((4, 4))[:, :2].reshape((2, 4))'}
score: 0.6123829258124555
{'intent': 'Python numpy 2D array indexing', 'snippet': 'b[a].shape'}
score: 0.6123829258124555
{'intent': 'python numpy 2d array indexing', 'snippet': 'b[a].shape'}

1231. input: print('Hello World')
score: 0.7725541116695924
{'intent': 'Syntax error on print with Python 3', 'snippet': "print('Hello World')"}
score: 0.7107342781371665
{'intent': 'how to print like printf in python3?', 'snippet': "print('Hi')"}
score: 0.7107342781371665
{'intent': 'How to print like printf in python3?', 'snippet': "print('Hi')"}

1232. input: re.findall('[a-z]*', 'f233op')
score: 0.8025331076005282
{'intent': 'match zero-or-more instances of lower case alphabet characters in a string `f233op `', 'snippet': "re.findall('([a-z])*', 'f233op')"}
score: 0.8025331076005282
{'intent': 'match zero-or-more instances of lower case alphabet characters in a string `f233op `', 'snippet': "re.findall('([a-z])*', 'f233op')"}
score: 0.8017597228393594
{'intent': 'match zero-or-more instances of lower case alphabet characters in a string `f233op `', 'snippet': "re.findall('([a-z]*)', 'f233op')"}

1233. input: how to compute skipgrams in python?
score: 0.4616840487406153
{'intent': 'Finding missing values in a numpy array', 'snippet': 'numpy.nonzero(m.mask)'}
score: 0.45651869086379954
{'intent': 'Find gaps in a sequence of Strings', 'snippet': "list(find_gaps(['0000001', '0000003', '0000006']))"}
score: 0.45651869086379954
{'intent': 'find gaps in a sequence of strings', 'snippet': "list(find_gaps(['0000001', '0000003', '0000006']))"}

1234. input: how to import .py file from another directory?
score: 0.9077999982714638
{'intent': 'How to import .py file from another directory?', 'snippet': "sys.path.insert(0, 'path/to/your/py_file')"}
score: 0.7968497732789053
{'intent': 'python: import a file from a subdirectory', 'snippet': '__init__.py'}
score: 0.7968497732789053
{'intent': 'Python: import a file from a subdirectory', 'snippet': '__init__.py'}

1235. input: ['Item 1 ', ' Item 2 ', ' Item 3 ', ' Item 4 ', ' Item 5']
score: 0.5468621538218543
{'intent': 'Most efficient way to split strings in Python', 'snippet': "['Item 1 ', ' Item 2 ', ' Item 3 ', ' Item 4 ', ' Item 5']"}
score: 0.5357990434168667
{'intent': 'Perform different operations based on index modulus of list items', 'snippet': "['One', 'TWO', 'eerhT', 'Four', 'FIVE', 'xiS', 'Seven', 'EIGHT', 'eniN']"}
score: 0.5357990434168667
{'intent': 'perform different operations based on index modulus of list items', 'snippet': "['One', 'TWO', 'eerhT', 'Four', 'FIVE', 'xiS', 'Seven', 'EIGHT', 'eniN']"}

1236. input: [x for x in COUNTRIES if x[0] == 'AS'][0][1]
score: 0.7651169228131718
{'intent': 'Getting an element from tuple of tuples in python', 'snippet': "[x for x in COUNTRIES if x[0] == 'AS'][0][1]"}
score: 0.7630324624489078
{'intent': 'getting an element from tuple of tuples in python', 'snippet': "[x[1] for x in COUNTRIES if x[0] == 'AS'][0]"}
score: 0.7630324624489078
{'intent': 'Getting an element from tuple of tuples in python', 'snippet': "[x[1] for x in COUNTRIES if x[0] == 'AS'][0]"}

1237. input: ['\x00\x00', '\x00\x00', '\x00\x00']
score: 0.5813573839986774
{'intent': 'Read into a bytearray at an offset?', 'snippet': "bytearray('\\x00\\x00\\x00\\x07\\x08\\x00\\x00\\x00\\x00\\x00')"}
score: 0.5813573839986774
{'intent': 'read into a bytearray at an offset?', 'snippet': "bytearray('\\x00\\x00\\x00\\x07\\x08\\x00\\x00\\x00\\x00\\x00')"}
score: 0.5778153154863954
{'intent': 'reading 3 bytes as an integer', 'snippet': "print(struct.unpack('>I', '\\x00' + s)[0])"}

